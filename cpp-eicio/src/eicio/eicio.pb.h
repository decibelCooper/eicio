// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eicio.proto

#ifndef PROTOBUF_eicio_2eproto__INCLUDED
#define PROTOBUF_eicio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace eicio {
namespace model {
class CalorimeterHit;
class CalorimeterHitDefaultTypeInternal;
extern CalorimeterHitDefaultTypeInternal _CalorimeterHit_default_instance_;
class CalorimeterHitCollection;
class CalorimeterHitCollectionDefaultTypeInternal;
extern CalorimeterHitCollectionDefaultTypeInternal _CalorimeterHitCollection_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class ClusterCollection;
class ClusterCollectionDefaultTypeInternal;
extern ClusterCollectionDefaultTypeInternal _ClusterCollection_default_instance_;
class EventHeader;
class EventHeaderDefaultTypeInternal;
extern EventHeaderDefaultTypeInternal _EventHeader_default_instance_;
class EventHeader_CollectionHeader;
class EventHeader_CollectionHeaderDefaultTypeInternal;
extern EventHeader_CollectionHeaderDefaultTypeInternal _EventHeader_CollectionHeader_default_instance_;
class FloatParams;
class FloatParamsDefaultTypeInternal;
extern FloatParamsDefaultTypeInternal _FloatParams_default_instance_;
class IntParams;
class IntParamsDefaultTypeInternal;
extern IntParamsDefaultTypeInternal _IntParams_default_instance_;
class MCParticle;
class MCParticleDefaultTypeInternal;
extern MCParticleDefaultTypeInternal _MCParticle_default_instance_;
class MCParticleCollection;
class MCParticleCollectionDefaultTypeInternal;
extern MCParticleCollectionDefaultTypeInternal _MCParticleCollection_default_instance_;
class Params;
class ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class Params_FloatsEntry;
class Params_FloatsEntryDefaultTypeInternal;
extern Params_FloatsEntryDefaultTypeInternal _Params_FloatsEntry_default_instance_;
class Params_IntsEntry;
class Params_IntsEntryDefaultTypeInternal;
extern Params_IntsEntryDefaultTypeInternal _Params_IntsEntry_default_instance_;
class Params_StringsEntry;
class Params_StringsEntryDefaultTypeInternal;
extern Params_StringsEntryDefaultTypeInternal _Params_StringsEntry_default_instance_;
class ParticleID;
class ParticleIDDefaultTypeInternal;
extern ParticleIDDefaultTypeInternal _ParticleID_default_instance_;
class RawCalorimeterHit;
class RawCalorimeterHitDefaultTypeInternal;
extern RawCalorimeterHitDefaultTypeInternal _RawCalorimeterHit_default_instance_;
class RawCalorimeterHitCollection;
class RawCalorimeterHitCollectionDefaultTypeInternal;
extern RawCalorimeterHitCollectionDefaultTypeInternal _RawCalorimeterHitCollection_default_instance_;
class RecParticle;
class RecParticleDefaultTypeInternal;
extern RecParticleDefaultTypeInternal _RecParticle_default_instance_;
class RecParticleCollection;
class RecParticleCollectionDefaultTypeInternal;
extern RecParticleCollectionDefaultTypeInternal _RecParticleCollection_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class Relation;
class RelationDefaultTypeInternal;
extern RelationDefaultTypeInternal _Relation_default_instance_;
class RelationCollection;
class RelationCollectionDefaultTypeInternal;
extern RelationCollectionDefaultTypeInternal _RelationCollection_default_instance_;
class SimCalorimeterHit;
class SimCalorimeterHitDefaultTypeInternal;
extern SimCalorimeterHitDefaultTypeInternal _SimCalorimeterHit_default_instance_;
class SimCalorimeterHitCollection;
class SimCalorimeterHitCollectionDefaultTypeInternal;
extern SimCalorimeterHitCollectionDefaultTypeInternal _SimCalorimeterHitCollection_default_instance_;
class SimCalorimeterHit_Contrib;
class SimCalorimeterHit_ContribDefaultTypeInternal;
extern SimCalorimeterHit_ContribDefaultTypeInternal _SimCalorimeterHit_Contrib_default_instance_;
class SimTrackerHit;
class SimTrackerHitDefaultTypeInternal;
extern SimTrackerHitDefaultTypeInternal _SimTrackerHit_default_instance_;
class SimTrackerHitCollection;
class SimTrackerHitCollectionDefaultTypeInternal;
extern SimTrackerHitCollectionDefaultTypeInternal _SimTrackerHitCollection_default_instance_;
class StringParams;
class StringParamsDefaultTypeInternal;
extern StringParamsDefaultTypeInternal _StringParams_default_instance_;
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
class TrackCollection;
class TrackCollectionDefaultTypeInternal;
extern TrackCollectionDefaultTypeInternal _TrackCollection_default_instance_;
class Track_TrackState;
class Track_TrackStateDefaultTypeInternal;
extern Track_TrackStateDefaultTypeInternal _Track_TrackState_default_instance_;
class TrackerData;
class TrackerDataDefaultTypeInternal;
extern TrackerDataDefaultTypeInternal _TrackerData_default_instance_;
class TrackerDataCollection;
class TrackerDataCollectionDefaultTypeInternal;
extern TrackerDataCollectionDefaultTypeInternal _TrackerDataCollection_default_instance_;
class TrackerHit;
class TrackerHitDefaultTypeInternal;
extern TrackerHitDefaultTypeInternal _TrackerHit_default_instance_;
class TrackerHitCollection;
class TrackerHitCollectionDefaultTypeInternal;
extern TrackerHitCollectionDefaultTypeInternal _TrackerHitCollection_default_instance_;
class TrackerHitPlane;
class TrackerHitPlaneDefaultTypeInternal;
extern TrackerHitPlaneDefaultTypeInternal _TrackerHitPlane_default_instance_;
class TrackerHitPlaneCollection;
class TrackerHitPlaneCollectionDefaultTypeInternal;
extern TrackerHitPlaneCollectionDefaultTypeInternal _TrackerHitPlaneCollection_default_instance_;
class TrackerHitZCylinder;
class TrackerHitZCylinderDefaultTypeInternal;
extern TrackerHitZCylinderDefaultTypeInternal _TrackerHitZCylinder_default_instance_;
class TrackerHitZCylinderCollection;
class TrackerHitZCylinderCollectionDefaultTypeInternal;
extern TrackerHitZCylinderCollectionDefaultTypeInternal _TrackerHitZCylinderCollection_default_instance_;
class TrackerPulse;
class TrackerPulseDefaultTypeInternal;
extern TrackerPulseDefaultTypeInternal _TrackerPulse_default_instance_;
class TrackerPulseCollection;
class TrackerPulseCollectionDefaultTypeInternal;
extern TrackerPulseCollectionDefaultTypeInternal _TrackerPulseCollection_default_instance_;
class TrackerRawData;
class TrackerRawDataDefaultTypeInternal;
extern TrackerRawDataDefaultTypeInternal _TrackerRawData_default_instance_;
class TrackerRawDataCollection;
class TrackerRawDataCollectionDefaultTypeInternal;
extern TrackerRawDataCollectionDefaultTypeInternal _TrackerRawDataCollection_default_instance_;
class Vertex;
class VertexDefaultTypeInternal;
extern VertexDefaultTypeInternal _Vertex_default_instance_;
class VertexCollection;
class VertexCollectionDefaultTypeInternal;
extern VertexCollectionDefaultTypeInternal _VertexCollection_default_instance_;
}  // namespace model
}  // namespace eicio

namespace eicio {
namespace model {

namespace protobuf_eicio_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
    static const ::google::protobuf::internal::ParseTableField entries[];
    static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    static const ::google::protobuf::internal::ParseTable schema[];
    static const ::google::protobuf::uint32 offsets[];
    static void InitDefaultsImpl();
    static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_eicio_2eproto

// ===================================================================

class EventHeader_CollectionHeader
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.EventHeader.CollectionHeader) */ {
   public:
    EventHeader_CollectionHeader();
    virtual ~EventHeader_CollectionHeader();

    EventHeader_CollectionHeader(const EventHeader_CollectionHeader& from);

    inline EventHeader_CollectionHeader& operator=(const EventHeader_CollectionHeader& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const EventHeader_CollectionHeader& default_instance();

    static inline const EventHeader_CollectionHeader* internal_default_instance() {
        return reinterpret_cast<const EventHeader_CollectionHeader*>(
            &_EventHeader_CollectionHeader_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 0;

    void Swap(EventHeader_CollectionHeader* other);

    // implements Message ----------------------------------------------

    inline EventHeader_CollectionHeader* New() const PROTOBUF_FINAL { return New(NULL); }

    EventHeader_CollectionHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const EventHeader_CollectionHeader& from);
    void MergeFrom(const EventHeader_CollectionHeader& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(EventHeader_CollectionHeader* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // string name = 1;
    void clear_name();
    static const int kNameFieldNumber = 1;
    const ::std::string& name() const;
    void set_name(const ::std::string& value);
#if LANG_CXX11
    void set_name(::std::string&& value);
#endif
    void set_name(const char* value);
    void set_name(const char* value, size_t size);
    ::std::string* mutable_name();
    ::std::string* release_name();
    void set_allocated_name(::std::string* name);

    // string type = 3;
    void clear_type();
    static const int kTypeFieldNumber = 3;
    const ::std::string& type() const;
    void set_type(const ::std::string& value);
#if LANG_CXX11
    void set_type(::std::string&& value);
#endif
    void set_type(const char* value);
    void set_type(const char* value, size_t size);
    ::std::string* mutable_type();
    ::std::string* release_type();
    void set_allocated_type(::std::string* type);

    // uint32 id = 2;
    void clear_id();
    static const int kIdFieldNumber = 2;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 payloadSize = 4;
    void clear_payloadsize();
    static const int kPayloadSizeFieldNumber = 4;
    ::google::protobuf::uint32 payloadsize() const;
    void set_payloadsize(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.EventHeader.CollectionHeader)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 payloadsize_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventHeader : public ::google::protobuf::
                        Message /* @@protoc_insertion_point(class_definition:eicio.model.EventHeader) */ {
   public:
    EventHeader();
    virtual ~EventHeader();

    EventHeader(const EventHeader& from);

    inline EventHeader& operator=(const EventHeader& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const EventHeader& default_instance();

    static inline const EventHeader* internal_default_instance() {
        return reinterpret_cast<const EventHeader*>(&_EventHeader_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 1;

    void Swap(EventHeader* other);

    // implements Message ----------------------------------------------

    inline EventHeader* New() const PROTOBUF_FINAL { return New(NULL); }

    EventHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const EventHeader& from);
    void MergeFrom(const EventHeader& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(EventHeader* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    typedef EventHeader_CollectionHeader CollectionHeader;

    // accessors -------------------------------------------------------

    // repeated .eicio.model.EventHeader.CollectionHeader payloadCollections = 7;
    int payloadcollections_size() const;
    void clear_payloadcollections();
    static const int kPayloadCollectionsFieldNumber = 7;
    const ::eicio::model::EventHeader_CollectionHeader& payloadcollections(int index) const;
    ::eicio::model::EventHeader_CollectionHeader* mutable_payloadcollections(int index);
    ::eicio::model::EventHeader_CollectionHeader* add_payloadcollections();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::EventHeader_CollectionHeader>*
    mutable_payloadcollections();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::EventHeader_CollectionHeader>&
    payloadcollections() const;

    // string detector = 5;
    void clear_detector();
    static const int kDetectorFieldNumber = 5;
    const ::std::string& detector() const;
    void set_detector(const ::std::string& value);
#if LANG_CXX11
    void set_detector(::std::string&& value);
#endif
    void set_detector(const char* value);
    void set_detector(const char* value, size_t size);
    ::std::string* mutable_detector();
    ::std::string* release_detector();
    void set_allocated_detector(::std::string* detector);

    // string description = 16;
    void clear_description();
    static const int kDescriptionFieldNumber = 16;
    const ::std::string& description() const;
    void set_description(const ::std::string& value);
#if LANG_CXX11
    void set_description(::std::string&& value);
#endif
    void set_description(const char* value);
    void set_description(const char* value, size_t size);
    ::std::string* mutable_description();
    ::std::string* release_description();
    void set_allocated_description(::std::string* description);

    // .eicio.model.Params params = 6;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 6;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint64 runNumber = 2;
    void clear_runnumber();
    static const int kRunNumberFieldNumber = 2;
    ::google::protobuf::uint64 runnumber() const;
    void set_runnumber(::google::protobuf::uint64 value);

    // uint64 eventNumber = 3;
    void clear_eventnumber();
    static const int kEventNumberFieldNumber = 3;
    ::google::protobuf::uint64 eventnumber() const;
    void set_eventnumber(::google::protobuf::uint64 value);

    // uint64 timeStamp = 4;
    void clear_timestamp();
    static const int kTimeStampFieldNumber = 4;
    ::google::protobuf::uint64 timestamp() const;
    void set_timestamp(::google::protobuf::uint64 value);

    // uint32 version = 1;
    void clear_version();
    static const int kVersionFieldNumber = 1;
    ::google::protobuf::uint32 version() const;
    void set_version(::google::protobuf::uint32 value);

    // uint32 nUniqueIDs = 8;
    void clear_nuniqueids();
    static const int kNUniqueIDsFieldNumber = 8;
    ::google::protobuf::uint32 nuniqueids() const;
    void set_nuniqueids(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.EventHeader)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::EventHeader_CollectionHeader> payloadcollections_;
    ::google::protobuf::internal::ArenaStringPtr detector_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint64 runnumber_;
    ::google::protobuf::uint64 eventnumber_;
    ::google::protobuf::uint64 timestamp_;
    ::google::protobuf::uint32 version_;
    ::google::protobuf::uint32 nuniqueids_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IntParams : public ::google::protobuf::
                      Message /* @@protoc_insertion_point(class_definition:eicio.model.IntParams) */ {
   public:
    IntParams();
    virtual ~IntParams();

    IntParams(const IntParams& from);

    inline IntParams& operator=(const IntParams& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const IntParams& default_instance();

    static inline const IntParams* internal_default_instance() {
        return reinterpret_cast<const IntParams*>(&_IntParams_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 2;

    void Swap(IntParams* other);

    // implements Message ----------------------------------------------

    inline IntParams* New() const PROTOBUF_FINAL { return New(NULL); }

    IntParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const IntParams& from);
    void MergeFrom(const IntParams& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(IntParams* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated int32 array = 1;
    int array_size() const;
    void clear_array();
    static const int kArrayFieldNumber = 1;
    ::google::protobuf::int32 array(int index) const;
    void set_array(int index, ::google::protobuf::int32 value);
    void add_array(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32>& array() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32>* mutable_array();

    // @@protoc_insertion_point(class_scope:eicio.model.IntParams)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32> array_;
    mutable int _array_cached_byte_size_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FloatParams : public ::google::protobuf::
                        Message /* @@protoc_insertion_point(class_definition:eicio.model.FloatParams) */ {
   public:
    FloatParams();
    virtual ~FloatParams();

    FloatParams(const FloatParams& from);

    inline FloatParams& operator=(const FloatParams& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const FloatParams& default_instance();

    static inline const FloatParams* internal_default_instance() {
        return reinterpret_cast<const FloatParams*>(&_FloatParams_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 3;

    void Swap(FloatParams* other);

    // implements Message ----------------------------------------------

    inline FloatParams* New() const PROTOBUF_FINAL { return New(NULL); }

    FloatParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const FloatParams& from);
    void MergeFrom(const FloatParams& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(FloatParams* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated float array = 1;
    int array_size() const;
    void clear_array();
    static const int kArrayFieldNumber = 1;
    float array(int index) const;
    void set_array(int index, float value);
    void add_array(float value);
    const ::google::protobuf::RepeatedField<float>& array() const;
    ::google::protobuf::RepeatedField<float>* mutable_array();

    // @@protoc_insertion_point(class_scope:eicio.model.FloatParams)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> array_;
    mutable int _array_cached_byte_size_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StringParams : public ::google::protobuf::
                         Message /* @@protoc_insertion_point(class_definition:eicio.model.StringParams) */ {
   public:
    StringParams();
    virtual ~StringParams();

    StringParams(const StringParams& from);

    inline StringParams& operator=(const StringParams& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const StringParams& default_instance();

    static inline const StringParams* internal_default_instance() {
        return reinterpret_cast<const StringParams*>(&_StringParams_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 4;

    void Swap(StringParams* other);

    // implements Message ----------------------------------------------

    inline StringParams* New() const PROTOBUF_FINAL { return New(NULL); }

    StringParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const StringParams& from);
    void MergeFrom(const StringParams& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(StringParams* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated string array = 1;
    int array_size() const;
    void clear_array();
    static const int kArrayFieldNumber = 1;
    const ::std::string& array(int index) const;
    ::std::string* mutable_array(int index);
    void set_array(int index, const ::std::string& value);
#if LANG_CXX11
    void set_array(int index, ::std::string&& value);
#endif
    void set_array(int index, const char* value);
    void set_array(int index, const char* value, size_t size);
    ::std::string* add_array();
    void add_array(const ::std::string& value);
#if LANG_CXX11
    void add_array(::std::string&& value);
#endif
    void add_array(const char* value);
    void add_array(const char* value, size_t size);
    const ::google::protobuf::RepeatedPtrField< ::std::string>& array() const;
    ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_array();

    // @@protoc_insertion_point(class_scope:eicio.model.StringParams)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::std::string> array_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

class Params
    : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.model.Params) */ {
   public:
    Params();
    virtual ~Params();

    Params(const Params& from);

    inline Params& operator=(const Params& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Params& default_instance();

    static inline const Params* internal_default_instance() {
        return reinterpret_cast<const Params*>(&_Params_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 8;

    void Swap(Params* other);

    // implements Message ----------------------------------------------

    inline Params* New() const PROTOBUF_FINAL { return New(NULL); }

    Params* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const Params& from);
    void MergeFrom(const Params& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(Params* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // map<string, .eicio.model.IntParams> ints = 1;
    int ints_size() const;
    void clear_ints();
    static const int kIntsFieldNumber = 1;
    const ::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>& ints() const;
    ::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>* mutable_ints();

    // map<string, .eicio.model.FloatParams> floats = 2;
    int floats_size() const;
    void clear_floats();
    static const int kFloatsFieldNumber = 2;
    const ::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>& floats() const;
    ::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>* mutable_floats();

    // map<string, .eicio.model.StringParams> strings = 3;
    int strings_size() const;
    void clear_strings();
    static const int kStringsFieldNumber = 3;
    const ::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>& strings() const;
    ::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>* mutable_strings();

    // @@protoc_insertion_point(class_scope:eicio.model.Params)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;

   public:
    class Params_IntsEntry : public ::google::protobuf::internal::MapEntry<
                                 Params_IntsEntry, ::std::string, ::eicio::model::IntParams,
                                 ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                 ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0> {
       public:
        typedef ::google::protobuf::internal::MapEntry<
            Params_IntsEntry, ::std::string, ::eicio::model::IntParams,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0>
            SuperType;
        Params_IntsEntry();
        Params_IntsEntry(::google::protobuf::Arena* arena);
        void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
        void MergeFrom(const Params_IntsEntry& other);
        static const Message* internal_default_instance() {
            return reinterpret_cast<const Message*>(&_Params_IntsEntry_default_instance_);
        }
        ::google::protobuf::Metadata GetMetadata() const;
    };
    ::google::protobuf::internal::MapField<Params_IntsEntry, ::std::string, ::eicio::model::IntParams,
                                           ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                           ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0>
        ints_;

   private:
   public:
    class Params_FloatsEntry : public ::google::protobuf::internal::MapEntry<
                                   Params_FloatsEntry, ::std::string, ::eicio::model::FloatParams,
                                   ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                   ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0> {
       public:
        typedef ::google::protobuf::internal::MapEntry<
            Params_FloatsEntry, ::std::string, ::eicio::model::FloatParams,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0>
            SuperType;
        Params_FloatsEntry();
        Params_FloatsEntry(::google::protobuf::Arena* arena);
        void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
        void MergeFrom(const Params_FloatsEntry& other);
        static const Message* internal_default_instance() {
            return reinterpret_cast<const Message*>(&_Params_FloatsEntry_default_instance_);
        }
        ::google::protobuf::Metadata GetMetadata() const;
    };
    ::google::protobuf::internal::MapField<Params_FloatsEntry, ::std::string, ::eicio::model::FloatParams,
                                           ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                           ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0>
        floats_;

   private:
   public:
    class Params_StringsEntry : public ::google::protobuf::internal::MapEntry<
                                    Params_StringsEntry, ::std::string, ::eicio::model::StringParams,
                                    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0> {
       public:
        typedef ::google::protobuf::internal::MapEntry<
            Params_StringsEntry, ::std::string, ::eicio::model::StringParams,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0>
            SuperType;
        Params_StringsEntry();
        Params_StringsEntry(::google::protobuf::Arena* arena);
        void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
        void MergeFrom(const Params_StringsEntry& other);
        static const Message* internal_default_instance() {
            return reinterpret_cast<const Message*>(&_Params_StringsEntry_default_instance_);
        }
        ::google::protobuf::Metadata GetMetadata() const;
    };
    ::google::protobuf::internal::MapField<Params_StringsEntry, ::std::string, ::eicio::model::StringParams,
                                           ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                                           ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0>
        strings_;

   private:
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reference : public ::google::protobuf::
                      Message /* @@protoc_insertion_point(class_definition:eicio.model.Reference) */ {
   public:
    Reference();
    virtual ~Reference();

    Reference(const Reference& from);

    inline Reference& operator=(const Reference& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Reference& default_instance();

    static inline const Reference* internal_default_instance() {
        return reinterpret_cast<const Reference*>(&_Reference_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 9;

    void Swap(Reference* other);

    // implements Message ----------------------------------------------

    inline Reference* New() const PROTOBUF_FINAL { return New(NULL); }

    Reference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const Reference& from);
    void MergeFrom(const Reference& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(Reference* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // uint32 collID = 1;
    void clear_collid();
    static const int kCollIDFieldNumber = 1;
    ::google::protobuf::uint32 collid() const;
    void set_collid(::google::protobuf::uint32 value);

    // uint32 entryID = 2;
    void clear_entryid();
    static const int kEntryIDFieldNumber = 2;
    ::google::protobuf::uint32 entryid() const;
    void set_entryid(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.Reference)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::uint32 collid_;
    ::google::protobuf::uint32 entryid_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParticleID : public ::google::protobuf::
                       Message /* @@protoc_insertion_point(class_definition:eicio.model.ParticleID) */ {
   public:
    ParticleID();
    virtual ~ParticleID();

    ParticleID(const ParticleID& from);

    inline ParticleID& operator=(const ParticleID& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const ParticleID& default_instance();

    static inline const ParticleID* internal_default_instance() {
        return reinterpret_cast<const ParticleID*>(&_ParticleID_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 10;

    void Swap(ParticleID* other);

    // implements Message ----------------------------------------------

    inline ParticleID* New() const PROTOBUF_FINAL { return New(NULL); }

    ParticleID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const ParticleID& from);
    void MergeFrom(const ParticleID& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(ParticleID* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated float params = 5;
    int params_size() const;
    void clear_params();
    static const int kParamsFieldNumber = 5;
    float params(int index) const;
    void set_params(int index, float value);
    void add_params(float value);
    const ::google::protobuf::RepeatedField<float>& params() const;
    ::google::protobuf::RepeatedField<float>* mutable_params();

    // float likelihood = 1;
    void clear_likelihood();
    static const int kLikelihoodFieldNumber = 1;
    float likelihood() const;
    void set_likelihood(float value);

    // int32 type = 2;
    void clear_type();
    static const int kTypeFieldNumber = 2;
    ::google::protobuf::int32 type() const;
    void set_type(::google::protobuf::int32 value);

    // int32 PDG = 3;
    void clear_pdg();
    static const int kPDGFieldNumber = 3;
    ::google::protobuf::int32 pdg() const;
    void set_pdg(::google::protobuf::int32 value);

    // int32 algType = 4;
    void clear_algtype();
    static const int kAlgTypeFieldNumber = 4;
    ::google::protobuf::int32 algtype() const;
    void set_algtype(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.ParticleID)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> params_;
    mutable int _params_cached_byte_size_;
    float likelihood_;
    ::google::protobuf::int32 type_;
    ::google::protobuf::int32 pdg_;
    ::google::protobuf::int32 algtype_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MCParticle : public ::google::protobuf::
                       Message /* @@protoc_insertion_point(class_definition:eicio.model.MCParticle) */ {
   public:
    MCParticle();
    virtual ~MCParticle();

    MCParticle(const MCParticle& from);

    inline MCParticle& operator=(const MCParticle& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const MCParticle& default_instance();

    static inline const MCParticle* internal_default_instance() {
        return reinterpret_cast<const MCParticle*>(&_MCParticle_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 11;

    void Swap(MCParticle* other);

    // implements Message ----------------------------------------------

    inline MCParticle* New() const PROTOBUF_FINAL { return New(NULL); }

    MCParticle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const MCParticle& from);
    void MergeFrom(const MCParticle& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(MCParticle* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.Reference parents = 2;
    int parents_size() const;
    void clear_parents();
    static const int kParentsFieldNumber = 2;
    const ::eicio::model::Reference& parents(int index) const;
    ::eicio::model::Reference* mutable_parents(int index);
    ::eicio::model::Reference* add_parents();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_parents();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& parents() const;

    // repeated .eicio.model.Reference children = 3;
    int children_size() const;
    void clear_children();
    static const int kChildrenFieldNumber = 3;
    const ::eicio::model::Reference& children(int index) const;
    ::eicio::model::Reference* mutable_children(int index);
    ::eicio::model::Reference* add_children();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_children();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& children() const;

    // repeated double vertex = 5;
    int vertex_size() const;
    void clear_vertex();
    static const int kVertexFieldNumber = 5;
    double vertex(int index) const;
    void set_vertex(int index, double value);
    void add_vertex(double value);
    const ::google::protobuf::RepeatedField<double>& vertex() const;
    ::google::protobuf::RepeatedField<double>* mutable_vertex();

    // repeated double p = 7;
    int p_size() const;
    void clear_p();
    static const int kPFieldNumber = 7;
    double p(int index) const;
    void set_p(int index, double value);
    void add_p(double value);
    const ::google::protobuf::RepeatedField<double>& p() const;
    ::google::protobuf::RepeatedField<double>* mutable_p();

    // repeated double PEndPoint = 10;
    int pendpoint_size() const;
    void clear_pendpoint();
    static const int kPEndPointFieldNumber = 10;
    double pendpoint(int index) const;
    void set_pendpoint(int index, double value);
    void add_pendpoint(double value);
    const ::google::protobuf::RepeatedField<double>& pendpoint() const;
    ::google::protobuf::RepeatedField<double>* mutable_pendpoint();

    // repeated float spin = 11;
    int spin_size() const;
    void clear_spin();
    static const int kSpinFieldNumber = 11;
    float spin(int index) const;
    void set_spin(int index, float value);
    void add_spin(float value);
    const ::google::protobuf::RepeatedField<float>& spin() const;
    ::google::protobuf::RepeatedField<float>* mutable_spin();

    // repeated int32 colorFlow = 12;
    int colorflow_size() const;
    void clear_colorflow();
    static const int kColorFlowFieldNumber = 12;
    ::google::protobuf::int32 colorflow(int index) const;
    void set_colorflow(int index, ::google::protobuf::int32 value);
    void add_colorflow(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32>& colorflow() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32>* mutable_colorflow();

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 PDG = 4;
    void clear_pdg();
    static const int kPDGFieldNumber = 4;
    ::google::protobuf::int32 pdg() const;
    void set_pdg(::google::protobuf::int32 value);

    // float time = 6;
    void clear_time();
    static const int kTimeFieldNumber = 6;
    float time() const;
    void set_time(float value);

    // float charge = 9;
    void clear_charge();
    static const int kChargeFieldNumber = 9;
    float charge() const;
    void set_charge(float value);

    // double mass = 8;
    void clear_mass();
    static const int kMassFieldNumber = 8;
    double mass() const;
    void set_mass(double value);

    // int32 genStatus = 13;
    void clear_genstatus();
    static const int kGenStatusFieldNumber = 13;
    ::google::protobuf::int32 genstatus() const;
    void set_genstatus(::google::protobuf::int32 value);

    // uint32 simStatus = 14;
    void clear_simstatus();
    static const int kSimStatusFieldNumber = 14;
    ::google::protobuf::uint32 simstatus() const;
    void set_simstatus(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.MCParticle)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> parents_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> children_;
    ::google::protobuf::RepeatedField<double> vertex_;
    mutable int _vertex_cached_byte_size_;
    ::google::protobuf::RepeatedField<double> p_;
    mutable int _p_cached_byte_size_;
    ::google::protobuf::RepeatedField<double> pendpoint_;
    mutable int _pendpoint_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> spin_;
    mutable int _spin_cached_byte_size_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32> colorflow_;
    mutable int _colorflow_cached_byte_size_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 pdg_;
    float time_;
    float charge_;
    double mass_;
    ::google::protobuf::int32 genstatus_;
    ::google::protobuf::uint32 simstatus_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MCParticleCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.MCParticleCollection) */ {
   public:
    MCParticleCollection();
    virtual ~MCParticleCollection();

    MCParticleCollection(const MCParticleCollection& from);

    inline MCParticleCollection& operator=(const MCParticleCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const MCParticleCollection& default_instance();

    static inline const MCParticleCollection* internal_default_instance() {
        return reinterpret_cast<const MCParticleCollection*>(&_MCParticleCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 12;

    void Swap(MCParticleCollection* other);

    // implements Message ----------------------------------------------

    inline MCParticleCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    MCParticleCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const MCParticleCollection& from);
    void MergeFrom(const MCParticleCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(MCParticleCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.MCParticle entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::MCParticle& entries(int index) const;
    ::eicio::model::MCParticle* mutable_entries(int index);
    ::eicio::model::MCParticle* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::MCParticle>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::MCParticle>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.MCParticleCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::MCParticle> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimTrackerHit : public ::google::protobuf::
                          Message /* @@protoc_insertion_point(class_definition:eicio.model.SimTrackerHit) */ {
   public:
    SimTrackerHit();
    virtual ~SimTrackerHit();

    SimTrackerHit(const SimTrackerHit& from);

    inline SimTrackerHit& operator=(const SimTrackerHit& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const SimTrackerHit& default_instance();

    static inline const SimTrackerHit* internal_default_instance() {
        return reinterpret_cast<const SimTrackerHit*>(&_SimTrackerHit_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 13;

    void Swap(SimTrackerHit* other);

    // implements Message ----------------------------------------------

    inline SimTrackerHit* New() const PROTOBUF_FINAL { return New(NULL); }

    SimTrackerHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const SimTrackerHit& from);
    void MergeFrom(const SimTrackerHit& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(SimTrackerHit* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated double pos = 4;
    int pos_size() const;
    void clear_pos();
    static const int kPosFieldNumber = 4;
    double pos(int index) const;
    void set_pos(int index, double value);
    void add_pos(double value);
    const ::google::protobuf::RepeatedField<double>& pos() const;
    ::google::protobuf::RepeatedField<double>* mutable_pos();

    // repeated float p = 8;
    int p_size() const;
    void clear_p();
    static const int kPFieldNumber = 8;
    float p(int index) const;
    void set_p(int index, float value);
    void add_p(float value);
    const ::google::protobuf::RepeatedField<float>& p() const;
    ::google::protobuf::RepeatedField<float>* mutable_p();

    // .eicio.model.Reference mc = 7;
    bool has_mc() const;
    void clear_mc();
    static const int kMcFieldNumber = 7;
    const ::eicio::model::Reference& mc() const;
    ::eicio::model::Reference* mutable_mc();
    ::eicio::model::Reference* release_mc();
    void set_allocated_mc(::eicio::model::Reference* mc);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 cellID0 = 2;
    void clear_cellid0();
    static const int kCellID0FieldNumber = 2;
    ::google::protobuf::int32 cellid0() const;
    void set_cellid0(::google::protobuf::int32 value);

    // int32 cellID1 = 3;
    void clear_cellid1();
    static const int kCellID1FieldNumber = 3;
    ::google::protobuf::int32 cellid1() const;
    void set_cellid1(::google::protobuf::int32 value);

    // float EDep = 5;
    void clear_edep();
    static const int kEDepFieldNumber = 5;
    float edep() const;
    void set_edep(float value);

    // float time = 6;
    void clear_time();
    static const int kTimeFieldNumber = 6;
    float time() const;
    void set_time(float value);

    // float pathLength = 9;
    void clear_pathlength();
    static const int kPathLengthFieldNumber = 9;
    float pathlength() const;
    void set_pathlength(float value);

    // int32 quality = 10;
    void clear_quality();
    static const int kQualityFieldNumber = 10;
    ::google::protobuf::int32 quality() const;
    void set_quality(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.SimTrackerHit)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<double> pos_;
    mutable int _pos_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> p_;
    mutable int _p_cached_byte_size_;
    ::eicio::model::Reference* mc_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 cellid0_;
    ::google::protobuf::int32 cellid1_;
    float edep_;
    float time_;
    float pathlength_;
    ::google::protobuf::int32 quality_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimTrackerHitCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.SimTrackerHitCollection) */ {
   public:
    SimTrackerHitCollection();
    virtual ~SimTrackerHitCollection();

    SimTrackerHitCollection(const SimTrackerHitCollection& from);

    inline SimTrackerHitCollection& operator=(const SimTrackerHitCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const SimTrackerHitCollection& default_instance();

    static inline const SimTrackerHitCollection* internal_default_instance() {
        return reinterpret_cast<const SimTrackerHitCollection*>(&_SimTrackerHitCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 14;

    void Swap(SimTrackerHitCollection* other);

    // implements Message ----------------------------------------------

    inline SimTrackerHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    SimTrackerHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const SimTrackerHitCollection& from);
    void MergeFrom(const SimTrackerHitCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(SimTrackerHitCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.SimTrackerHit entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::SimTrackerHit& entries(int index) const;
    ::eicio::model::SimTrackerHit* mutable_entries(int index);
    ::eicio::model::SimTrackerHit* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::SimTrackerHit>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::SimTrackerHit>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.SimTrackerHitCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::SimTrackerHit> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerRawData
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerRawData) */ {
   public:
    TrackerRawData();
    virtual ~TrackerRawData();

    TrackerRawData(const TrackerRawData& from);

    inline TrackerRawData& operator=(const TrackerRawData& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerRawData& default_instance();

    static inline const TrackerRawData* internal_default_instance() {
        return reinterpret_cast<const TrackerRawData*>(&_TrackerRawData_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 15;

    void Swap(TrackerRawData* other);

    // implements Message ----------------------------------------------

    inline TrackerRawData* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerRawData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerRawData& from);
    void MergeFrom(const TrackerRawData& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerRawData* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated uint32 ADCs = 5;
    int adcs_size() const;
    void clear_adcs();
    static const int kADCsFieldNumber = 5;
    ::google::protobuf::uint32 adcs(int index) const;
    void set_adcs(int index, ::google::protobuf::uint32 value);
    void add_adcs(::google::protobuf::uint32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::uint32>& adcs() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::uint32>* mutable_adcs();

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 cellID0 = 2;
    void clear_cellid0();
    static const int kCellID0FieldNumber = 2;
    ::google::protobuf::int32 cellid0() const;
    void set_cellid0(::google::protobuf::int32 value);

    // int32 cellID1 = 3;
    void clear_cellid1();
    static const int kCellID1FieldNumber = 3;
    ::google::protobuf::int32 cellid1() const;
    void set_cellid1(::google::protobuf::int32 value);

    // int32 time = 4;
    void clear_time();
    static const int kTimeFieldNumber = 4;
    ::google::protobuf::int32 time() const;
    void set_time(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerRawData)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField< ::google::protobuf::uint32> adcs_;
    mutable int _adcs_cached_byte_size_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 cellid0_;
    ::google::protobuf::int32 cellid1_;
    ::google::protobuf::int32 time_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerRawDataCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerRawDataCollection) */ {
   public:
    TrackerRawDataCollection();
    virtual ~TrackerRawDataCollection();

    TrackerRawDataCollection(const TrackerRawDataCollection& from);

    inline TrackerRawDataCollection& operator=(const TrackerRawDataCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerRawDataCollection& default_instance();

    static inline const TrackerRawDataCollection* internal_default_instance() {
        return reinterpret_cast<const TrackerRawDataCollection*>(
            &_TrackerRawDataCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 16;

    void Swap(TrackerRawDataCollection* other);

    // implements Message ----------------------------------------------

    inline TrackerRawDataCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerRawDataCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerRawDataCollection& from);
    void MergeFrom(const TrackerRawDataCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerRawDataCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.TrackerRawData entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::TrackerRawData& entries(int index) const;
    ::eicio::model::TrackerRawData* mutable_entries(int index);
    ::eicio::model::TrackerRawData* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerRawData>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerRawData>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerRawDataCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerRawData> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerData : public ::google::protobuf::
                        Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerData) */ {
   public:
    TrackerData();
    virtual ~TrackerData();

    TrackerData(const TrackerData& from);

    inline TrackerData& operator=(const TrackerData& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerData& default_instance();

    static inline const TrackerData* internal_default_instance() {
        return reinterpret_cast<const TrackerData*>(&_TrackerData_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 17;

    void Swap(TrackerData* other);

    // implements Message ----------------------------------------------

    inline TrackerData* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerData& from);
    void MergeFrom(const TrackerData& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerData* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated float charges = 5;
    int charges_size() const;
    void clear_charges();
    static const int kChargesFieldNumber = 5;
    float charges(int index) const;
    void set_charges(int index, float value);
    void add_charges(float value);
    const ::google::protobuf::RepeatedField<float>& charges() const;
    ::google::protobuf::RepeatedField<float>* mutable_charges();

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 cellID0 = 2;
    void clear_cellid0();
    static const int kCellID0FieldNumber = 2;
    ::google::protobuf::int32 cellid0() const;
    void set_cellid0(::google::protobuf::int32 value);

    // int32 cellID1 = 3;
    void clear_cellid1();
    static const int kCellID1FieldNumber = 3;
    ::google::protobuf::int32 cellid1() const;
    void set_cellid1(::google::protobuf::int32 value);

    // float time = 4;
    void clear_time();
    static const int kTimeFieldNumber = 4;
    float time() const;
    void set_time(float value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerData)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> charges_;
    mutable int _charges_cached_byte_size_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 cellid0_;
    ::google::protobuf::int32 cellid1_;
    float time_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerDataCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerDataCollection) */ {
   public:
    TrackerDataCollection();
    virtual ~TrackerDataCollection();

    TrackerDataCollection(const TrackerDataCollection& from);

    inline TrackerDataCollection& operator=(const TrackerDataCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerDataCollection& default_instance();

    static inline const TrackerDataCollection* internal_default_instance() {
        return reinterpret_cast<const TrackerDataCollection*>(&_TrackerDataCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 18;

    void Swap(TrackerDataCollection* other);

    // implements Message ----------------------------------------------

    inline TrackerDataCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerDataCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerDataCollection& from);
    void MergeFrom(const TrackerDataCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerDataCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.TrackerData entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::TrackerData& entries(int index) const;
    ::eicio::model::TrackerData* mutable_entries(int index);
    ::eicio::model::TrackerData* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerData>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerData>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerDataCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerData> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHit : public ::google::protobuf::
                       Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerHit) */ {
   public:
    TrackerHit();
    virtual ~TrackerHit();

    TrackerHit(const TrackerHit& from);

    inline TrackerHit& operator=(const TrackerHit& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerHit& default_instance();

    static inline const TrackerHit* internal_default_instance() {
        return reinterpret_cast<const TrackerHit*>(&_TrackerHit_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 19;

    void Swap(TrackerHit* other);

    // implements Message ----------------------------------------------

    inline TrackerHit* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerHit& from);
    void MergeFrom(const TrackerHit& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerHit* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated double pos = 5;
    int pos_size() const;
    void clear_pos();
    static const int kPosFieldNumber = 5;
    double pos(int index) const;
    void set_pos(int index, double value);
    void add_pos(double value);
    const ::google::protobuf::RepeatedField<double>& pos() const;
    ::google::protobuf::RepeatedField<double>* mutable_pos();

    // repeated double cov = 6;
    int cov_size() const;
    void clear_cov();
    static const int kCovFieldNumber = 6;
    double cov(int index) const;
    void set_cov(int index, double value);
    void add_cov(double value);
    const ::google::protobuf::RepeatedField<double>& cov() const;
    ::google::protobuf::RepeatedField<double>* mutable_cov();

    // repeated .eicio.model.Reference rawHits = 11;
    int rawhits_size() const;
    void clear_rawhits();
    static const int kRawHitsFieldNumber = 11;
    const ::eicio::model::Reference& rawhits(int index) const;
    ::eicio::model::Reference* mutable_rawhits(int index);
    ::eicio::model::Reference* add_rawhits();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_rawhits();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& rawhits() const;

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 cellID0 = 2;
    void clear_cellid0();
    static const int kCellID0FieldNumber = 2;
    ::google::protobuf::int32 cellid0() const;
    void set_cellid0(::google::protobuf::int32 value);

    // int32 cellID1 = 3;
    void clear_cellid1();
    static const int kCellID1FieldNumber = 3;
    ::google::protobuf::int32 cellid1() const;
    void set_cellid1(::google::protobuf::int32 value);

    // int32 type = 4;
    void clear_type();
    static const int kTypeFieldNumber = 4;
    ::google::protobuf::int32 type() const;
    void set_type(::google::protobuf::int32 value);

    // float EDep = 7;
    void clear_edep();
    static const int kEDepFieldNumber = 7;
    float edep() const;
    void set_edep(float value);

    // float EDepErr = 8;
    void clear_edeperr();
    static const int kEDepErrFieldNumber = 8;
    float edeperr() const;
    void set_edeperr(float value);

    // float time = 9;
    void clear_time();
    static const int kTimeFieldNumber = 9;
    float time() const;
    void set_time(float value);

    // int32 quality = 10;
    void clear_quality();
    static const int kQualityFieldNumber = 10;
    ::google::protobuf::int32 quality() const;
    void set_quality(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerHit)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<double> pos_;
    mutable int _pos_cached_byte_size_;
    ::google::protobuf::RepeatedField<double> cov_;
    mutable int _cov_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> rawhits_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 cellid0_;
    ::google::protobuf::int32 cellid1_;
    ::google::protobuf::int32 type_;
    float edep_;
    float edeperr_;
    float time_;
    ::google::protobuf::int32 quality_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerHitCollection) */ {
   public:
    TrackerHitCollection();
    virtual ~TrackerHitCollection();

    TrackerHitCollection(const TrackerHitCollection& from);

    inline TrackerHitCollection& operator=(const TrackerHitCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerHitCollection& default_instance();

    static inline const TrackerHitCollection* internal_default_instance() {
        return reinterpret_cast<const TrackerHitCollection*>(&_TrackerHitCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 20;

    void Swap(TrackerHitCollection* other);

    // implements Message ----------------------------------------------

    inline TrackerHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerHitCollection& from);
    void MergeFrom(const TrackerHitCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerHitCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.TrackerHit entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::TrackerHit& entries(int index) const;
    ::eicio::model::TrackerHit* mutable_entries(int index);
    ::eicio::model::TrackerHit* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHit>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHit>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerHitCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHit> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerPulse : public ::google::protobuf::
                         Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerPulse) */ {
   public:
    TrackerPulse();
    virtual ~TrackerPulse();

    TrackerPulse(const TrackerPulse& from);

    inline TrackerPulse& operator=(const TrackerPulse& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerPulse& default_instance();

    static inline const TrackerPulse* internal_default_instance() {
        return reinterpret_cast<const TrackerPulse*>(&_TrackerPulse_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 21;

    void Swap(TrackerPulse* other);

    // implements Message ----------------------------------------------

    inline TrackerPulse* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerPulse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerPulse& from);
    void MergeFrom(const TrackerPulse& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerPulse* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated float cov = 6;
    int cov_size() const;
    void clear_cov();
    static const int kCovFieldNumber = 6;
    float cov(int index) const;
    void set_cov(int index, float value);
    void add_cov(float value);
    const ::google::protobuf::RepeatedField<float>& cov() const;
    ::google::protobuf::RepeatedField<float>* mutable_cov();

    // .eicio.model.Reference TPC = 8;
    bool has_tpc() const;
    void clear_tpc();
    static const int kTPCFieldNumber = 8;
    const ::eicio::model::Reference& tpc() const;
    ::eicio::model::Reference* mutable_tpc();
    ::eicio::model::Reference* release_tpc();
    void set_allocated_tpc(::eicio::model::Reference* tpc);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 cellID0 = 2;
    void clear_cellid0();
    static const int kCellID0FieldNumber = 2;
    ::google::protobuf::int32 cellid0() const;
    void set_cellid0(::google::protobuf::int32 value);

    // int32 cellID1 = 3;
    void clear_cellid1();
    static const int kCellID1FieldNumber = 3;
    ::google::protobuf::int32 cellid1() const;
    void set_cellid1(::google::protobuf::int32 value);

    // float time = 4;
    void clear_time();
    static const int kTimeFieldNumber = 4;
    float time() const;
    void set_time(float value);

    // float charge = 5;
    void clear_charge();
    static const int kChargeFieldNumber = 5;
    float charge() const;
    void set_charge(float value);

    // int32 quality = 7;
    void clear_quality();
    static const int kQualityFieldNumber = 7;
    ::google::protobuf::int32 quality() const;
    void set_quality(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerPulse)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> cov_;
    mutable int _cov_cached_byte_size_;
    ::eicio::model::Reference* tpc_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 cellid0_;
    ::google::protobuf::int32 cellid1_;
    float time_;
    float charge_;
    ::google::protobuf::int32 quality_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerPulseCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerPulseCollection) */ {
   public:
    TrackerPulseCollection();
    virtual ~TrackerPulseCollection();

    TrackerPulseCollection(const TrackerPulseCollection& from);

    inline TrackerPulseCollection& operator=(const TrackerPulseCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerPulseCollection& default_instance();

    static inline const TrackerPulseCollection* internal_default_instance() {
        return reinterpret_cast<const TrackerPulseCollection*>(&_TrackerPulseCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 22;

    void Swap(TrackerPulseCollection* other);

    // implements Message ----------------------------------------------

    inline TrackerPulseCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerPulseCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerPulseCollection& from);
    void MergeFrom(const TrackerPulseCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerPulseCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.TrackerPulse entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::TrackerPulse& entries(int index) const;
    ::eicio::model::TrackerPulse* mutable_entries(int index);
    ::eicio::model::TrackerPulse* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerPulse>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerPulse>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerPulseCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerPulse> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitPlane
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerHitPlane) */ {
   public:
    TrackerHitPlane();
    virtual ~TrackerHitPlane();

    TrackerHitPlane(const TrackerHitPlane& from);

    inline TrackerHitPlane& operator=(const TrackerHitPlane& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerHitPlane& default_instance();

    static inline const TrackerHitPlane* internal_default_instance() {
        return reinterpret_cast<const TrackerHitPlane*>(&_TrackerHitPlane_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 23;

    void Swap(TrackerHitPlane* other);

    // implements Message ----------------------------------------------

    inline TrackerHitPlane* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerHitPlane* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerHitPlane& from);
    void MergeFrom(const TrackerHitPlane& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerHitPlane* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated double pos = 5;
    int pos_size() const;
    void clear_pos();
    static const int kPosFieldNumber = 5;
    double pos(int index) const;
    void set_pos(int index, double value);
    void add_pos(double value);
    const ::google::protobuf::RepeatedField<double>& pos() const;
    ::google::protobuf::RepeatedField<double>* mutable_pos();

    // repeated float U = 6;
    int u_size() const;
    void clear_u();
    static const int kUFieldNumber = 6;
    float u(int index) const;
    void set_u(int index, float value);
    void add_u(float value);
    const ::google::protobuf::RepeatedField<float>& u() const;
    ::google::protobuf::RepeatedField<float>* mutable_u();

    // repeated float V = 7;
    int v_size() const;
    void clear_v();
    static const int kVFieldNumber = 7;
    float v(int index) const;
    void set_v(int index, float value);
    void add_v(float value);
    const ::google::protobuf::RepeatedField<float>& v() const;
    ::google::protobuf::RepeatedField<float>* mutable_v();

    // repeated .eicio.model.Reference rawHits = 14;
    int rawhits_size() const;
    void clear_rawhits();
    static const int kRawHitsFieldNumber = 14;
    const ::eicio::model::Reference& rawhits(int index) const;
    ::eicio::model::Reference* mutable_rawhits(int index);
    ::eicio::model::Reference* add_rawhits();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_rawhits();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& rawhits() const;

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 cellID0 = 2;
    void clear_cellid0();
    static const int kCellID0FieldNumber = 2;
    ::google::protobuf::int32 cellid0() const;
    void set_cellid0(::google::protobuf::int32 value);

    // int32 cellID1 = 3;
    void clear_cellid1();
    static const int kCellID1FieldNumber = 3;
    ::google::protobuf::int32 cellid1() const;
    void set_cellid1(::google::protobuf::int32 value);

    // int32 type = 4;
    void clear_type();
    static const int kTypeFieldNumber = 4;
    ::google::protobuf::int32 type() const;
    void set_type(::google::protobuf::int32 value);

    // float dU = 8;
    void clear_du();
    static const int kDUFieldNumber = 8;
    float du() const;
    void set_du(float value);

    // float dV = 9;
    void clear_dv();
    static const int kDVFieldNumber = 9;
    float dv() const;
    void set_dv(float value);

    // float EDep = 10;
    void clear_edep();
    static const int kEDepFieldNumber = 10;
    float edep() const;
    void set_edep(float value);

    // float EDepErr = 11;
    void clear_edeperr();
    static const int kEDepErrFieldNumber = 11;
    float edeperr() const;
    void set_edeperr(float value);

    // float time = 12;
    void clear_time();
    static const int kTimeFieldNumber = 12;
    float time() const;
    void set_time(float value);

    // int32 quality = 13;
    void clear_quality();
    static const int kQualityFieldNumber = 13;
    ::google::protobuf::int32 quality() const;
    void set_quality(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerHitPlane)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<double> pos_;
    mutable int _pos_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> u_;
    mutable int _u_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> v_;
    mutable int _v_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> rawhits_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 cellid0_;
    ::google::protobuf::int32 cellid1_;
    ::google::protobuf::int32 type_;
    float du_;
    float dv_;
    float edep_;
    float edeperr_;
    float time_;
    ::google::protobuf::int32 quality_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitPlaneCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerHitPlaneCollection) */ {
   public:
    TrackerHitPlaneCollection();
    virtual ~TrackerHitPlaneCollection();

    TrackerHitPlaneCollection(const TrackerHitPlaneCollection& from);

    inline TrackerHitPlaneCollection& operator=(const TrackerHitPlaneCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerHitPlaneCollection& default_instance();

    static inline const TrackerHitPlaneCollection* internal_default_instance() {
        return reinterpret_cast<const TrackerHitPlaneCollection*>(
            &_TrackerHitPlaneCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 24;

    void Swap(TrackerHitPlaneCollection* other);

    // implements Message ----------------------------------------------

    inline TrackerHitPlaneCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerHitPlaneCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerHitPlaneCollection& from);
    void MergeFrom(const TrackerHitPlaneCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerHitPlaneCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.TrackerHitPlane entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::TrackerHitPlane& entries(int index) const;
    ::eicio::model::TrackerHitPlane* mutable_entries(int index);
    ::eicio::model::TrackerHitPlane* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitPlane>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitPlane>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerHitPlaneCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitPlane> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitZCylinder
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerHitZCylinder) */ {
   public:
    TrackerHitZCylinder();
    virtual ~TrackerHitZCylinder();

    TrackerHitZCylinder(const TrackerHitZCylinder& from);

    inline TrackerHitZCylinder& operator=(const TrackerHitZCylinder& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerHitZCylinder& default_instance();

    static inline const TrackerHitZCylinder* internal_default_instance() {
        return reinterpret_cast<const TrackerHitZCylinder*>(&_TrackerHitZCylinder_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 25;

    void Swap(TrackerHitZCylinder* other);

    // implements Message ----------------------------------------------

    inline TrackerHitZCylinder* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerHitZCylinder* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerHitZCylinder& from);
    void MergeFrom(const TrackerHitZCylinder& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerHitZCylinder* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated double pos = 5;
    int pos_size() const;
    void clear_pos();
    static const int kPosFieldNumber = 5;
    double pos(int index) const;
    void set_pos(int index, double value);
    void add_pos(double value);
    const ::google::protobuf::RepeatedField<double>& pos() const;
    ::google::protobuf::RepeatedField<double>* mutable_pos();

    // repeated float center = 6;
    int center_size() const;
    void clear_center();
    static const int kCenterFieldNumber = 6;
    float center(int index) const;
    void set_center(int index, float value);
    void add_center(float value);
    const ::google::protobuf::RepeatedField<float>& center() const;
    ::google::protobuf::RepeatedField<float>* mutable_center();

    // repeated .eicio.model.Reference rawHits = 13;
    int rawhits_size() const;
    void clear_rawhits();
    static const int kRawHitsFieldNumber = 13;
    const ::eicio::model::Reference& rawhits(int index) const;
    ::eicio::model::Reference* mutable_rawhits(int index);
    ::eicio::model::Reference* add_rawhits();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_rawhits();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& rawhits() const;

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 cellID0 = 2;
    void clear_cellid0();
    static const int kCellID0FieldNumber = 2;
    ::google::protobuf::int32 cellid0() const;
    void set_cellid0(::google::protobuf::int32 value);

    // int32 cellID1 = 3;
    void clear_cellid1();
    static const int kCellID1FieldNumber = 3;
    ::google::protobuf::int32 cellid1() const;
    void set_cellid1(::google::protobuf::int32 value);

    // int32 type = 4;
    void clear_type();
    static const int kTypeFieldNumber = 4;
    ::google::protobuf::int32 type() const;
    void set_type(::google::protobuf::int32 value);

    // float dRPhi = 7;
    void clear_drphi();
    static const int kDRPhiFieldNumber = 7;
    float drphi() const;
    void set_drphi(float value);

    // float dZ = 8;
    void clear_dz();
    static const int kDZFieldNumber = 8;
    float dz() const;
    void set_dz(float value);

    // float EDep = 9;
    void clear_edep();
    static const int kEDepFieldNumber = 9;
    float edep() const;
    void set_edep(float value);

    // float EDepErr = 10;
    void clear_edeperr();
    static const int kEDepErrFieldNumber = 10;
    float edeperr() const;
    void set_edeperr(float value);

    // float time = 11;
    void clear_time();
    static const int kTimeFieldNumber = 11;
    float time() const;
    void set_time(float value);

    // int32 quality = 12;
    void clear_quality();
    static const int kQualityFieldNumber = 12;
    ::google::protobuf::int32 quality() const;
    void set_quality(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerHitZCylinder)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<double> pos_;
    mutable int _pos_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> center_;
    mutable int _center_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> rawhits_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 cellid0_;
    ::google::protobuf::int32 cellid1_;
    ::google::protobuf::int32 type_;
    float drphi_;
    float dz_;
    float edep_;
    float edeperr_;
    float time_;
    ::google::protobuf::int32 quality_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitZCylinderCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackerHitZCylinderCollection) */ {
   public:
    TrackerHitZCylinderCollection();
    virtual ~TrackerHitZCylinderCollection();

    TrackerHitZCylinderCollection(const TrackerHitZCylinderCollection& from);

    inline TrackerHitZCylinderCollection& operator=(const TrackerHitZCylinderCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackerHitZCylinderCollection& default_instance();

    static inline const TrackerHitZCylinderCollection* internal_default_instance() {
        return reinterpret_cast<const TrackerHitZCylinderCollection*>(
            &_TrackerHitZCylinderCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 26;

    void Swap(TrackerHitZCylinderCollection* other);

    // implements Message ----------------------------------------------

    inline TrackerHitZCylinderCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackerHitZCylinderCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackerHitZCylinderCollection& from);
    void MergeFrom(const TrackerHitZCylinderCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackerHitZCylinderCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.TrackerHitZCylinder entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::TrackerHitZCylinder& entries(int index) const;
    ::eicio::model::TrackerHitZCylinder* mutable_entries(int index);
    ::eicio::model::TrackerHitZCylinder* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitZCylinder>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitZCylinder>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackerHitZCylinderCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitZCylinder> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Track_TrackState
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.Track.TrackState) */ {
   public:
    Track_TrackState();
    virtual ~Track_TrackState();

    Track_TrackState(const Track_TrackState& from);

    inline Track_TrackState& operator=(const Track_TrackState& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Track_TrackState& default_instance();

    static inline const Track_TrackState* internal_default_instance() {
        return reinterpret_cast<const Track_TrackState*>(&_Track_TrackState_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 27;

    void Swap(Track_TrackState* other);

    // implements Message ----------------------------------------------

    inline Track_TrackState* New() const PROTOBUF_FINAL { return New(NULL); }

    Track_TrackState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const Track_TrackState& from);
    void MergeFrom(const Track_TrackState& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(Track_TrackState* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated float cov = 7;
    int cov_size() const;
    void clear_cov();
    static const int kCovFieldNumber = 7;
    float cov(int index) const;
    void set_cov(int index, float value);
    void add_cov(float value);
    const ::google::protobuf::RepeatedField<float>& cov() const;
    ::google::protobuf::RepeatedField<float>* mutable_cov();

    // repeated float ref = 8;
    int ref_size() const;
    void clear_ref();
    static const int kRefFieldNumber = 8;
    float ref(int index) const;
    void set_ref(int index, float value);
    void add_ref(float value);
    const ::google::protobuf::RepeatedField<float>& ref() const;
    ::google::protobuf::RepeatedField<float>* mutable_ref();

    // int32 loc = 1;
    void clear_loc();
    static const int kLocFieldNumber = 1;
    ::google::protobuf::int32 loc() const;
    void set_loc(::google::protobuf::int32 value);

    // float d0 = 2;
    void clear_d0();
    static const int kD0FieldNumber = 2;
    float d0() const;
    void set_d0(float value);

    // float phi = 3;
    void clear_phi();
    static const int kPhiFieldNumber = 3;
    float phi() const;
    void set_phi(float value);

    // float omega = 4;
    void clear_omega();
    static const int kOmegaFieldNumber = 4;
    float omega() const;
    void set_omega(float value);

    // float z0 = 5;
    void clear_z0();
    static const int kZ0FieldNumber = 5;
    float z0() const;
    void set_z0(float value);

    // float tanL = 6;
    void clear_tanl();
    static const int kTanLFieldNumber = 6;
    float tanl() const;
    void set_tanl(float value);

    // @@protoc_insertion_point(class_scope:eicio.model.Track.TrackState)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> cov_;
    mutable int _cov_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> ref_;
    mutable int _ref_cached_byte_size_;
    ::google::protobuf::int32 loc_;
    float d0_;
    float phi_;
    float omega_;
    float z0_;
    float tanl_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Track
    : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.model.Track) */ {
   public:
    Track();
    virtual ~Track();

    Track(const Track& from);

    inline Track& operator=(const Track& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Track& default_instance();

    static inline const Track* internal_default_instance() {
        return reinterpret_cast<const Track*>(&_Track_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 28;

    void Swap(Track* other);

    // implements Message ----------------------------------------------

    inline Track* New() const PROTOBUF_FINAL { return New(NULL); }

    Track* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const Track& from);
    void MergeFrom(const Track& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(Track* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    typedef Track_TrackState TrackState;

    // accessors -------------------------------------------------------

    // repeated int32 subDetHits = 8;
    int subdethits_size() const;
    void clear_subdethits();
    static const int kSubDetHitsFieldNumber = 8;
    ::google::protobuf::int32 subdethits(int index) const;
    void set_subdethits(int index, ::google::protobuf::int32 value);
    void add_subdethits(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField< ::google::protobuf::int32>& subdethits() const;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32>* mutable_subdethits();

    // repeated .eicio.model.Track.TrackState states = 9;
    int states_size() const;
    void clear_states();
    static const int kStatesFieldNumber = 9;
    const ::eicio::model::Track_TrackState& states(int index) const;
    ::eicio::model::Track_TrackState* mutable_states(int index);
    ::eicio::model::Track_TrackState* add_states();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Track_TrackState>* mutable_states();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Track_TrackState>& states() const;

    // repeated .eicio.model.Reference hits = 10;
    int hits_size() const;
    void clear_hits();
    static const int kHitsFieldNumber = 10;
    const ::eicio::model::Reference& hits(int index) const;
    ::eicio::model::Reference* mutable_hits(int index);
    ::eicio::model::Reference* add_hits();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_hits();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& hits() const;

    // repeated .eicio.model.Reference tracks = 11;
    int tracks_size() const;
    void clear_tracks();
    static const int kTracksFieldNumber = 11;
    const ::eicio::model::Reference& tracks(int index) const;
    ::eicio::model::Reference* mutable_tracks(int index);
    ::eicio::model::Reference* add_tracks();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_tracks();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& tracks() const;

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 type = 2;
    void clear_type();
    static const int kTypeFieldNumber = 2;
    ::google::protobuf::int32 type() const;
    void set_type(::google::protobuf::int32 value);

    // float chi2 = 3;
    void clear_chi2();
    static const int kChi2FieldNumber = 3;
    float chi2() const;
    void set_chi2(float value);

    // int32 NDF = 4;
    void clear_ndf();
    static const int kNDFFieldNumber = 4;
    ::google::protobuf::int32 ndf() const;
    void set_ndf(::google::protobuf::int32 value);

    // float dEdx = 5;
    void clear_dedx();
    static const int kDEdxFieldNumber = 5;
    float dedx() const;
    void set_dedx(float value);

    // float dEdxErr = 6;
    void clear_dedxerr();
    static const int kDEdxErrFieldNumber = 6;
    float dedxerr() const;
    void set_dedxerr(float value);

    // float radius = 7;
    void clear_radius();
    static const int kRadiusFieldNumber = 7;
    float radius() const;
    void set_radius(float value);

    // @@protoc_insertion_point(class_scope:eicio.model.Track)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField< ::google::protobuf::int32> subdethits_;
    mutable int _subdethits_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Track_TrackState> states_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> hits_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> tracks_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 type_;
    float chi2_;
    ::google::protobuf::int32 ndf_;
    float dedx_;
    float dedxerr_;
    float radius_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.TrackCollection) */ {
   public:
    TrackCollection();
    virtual ~TrackCollection();

    TrackCollection(const TrackCollection& from);

    inline TrackCollection& operator=(const TrackCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const TrackCollection& default_instance();

    static inline const TrackCollection* internal_default_instance() {
        return reinterpret_cast<const TrackCollection*>(&_TrackCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 29;

    void Swap(TrackCollection* other);

    // implements Message ----------------------------------------------

    inline TrackCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    TrackCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const TrackCollection& from);
    void MergeFrom(const TrackCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(TrackCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.Track entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::Track& entries(int index) const;
    ::eicio::model::Track* mutable_entries(int index);
    ::eicio::model::Track* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Track>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Track>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.TrackCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Track> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimCalorimeterHit_Contrib
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.SimCalorimeterHit.Contrib) */ {
   public:
    SimCalorimeterHit_Contrib();
    virtual ~SimCalorimeterHit_Contrib();

    SimCalorimeterHit_Contrib(const SimCalorimeterHit_Contrib& from);

    inline SimCalorimeterHit_Contrib& operator=(const SimCalorimeterHit_Contrib& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const SimCalorimeterHit_Contrib& default_instance();

    static inline const SimCalorimeterHit_Contrib* internal_default_instance() {
        return reinterpret_cast<const SimCalorimeterHit_Contrib*>(
            &_SimCalorimeterHit_Contrib_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 30;

    void Swap(SimCalorimeterHit_Contrib* other);

    // implements Message ----------------------------------------------

    inline SimCalorimeterHit_Contrib* New() const PROTOBUF_FINAL { return New(NULL); }

    SimCalorimeterHit_Contrib* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const SimCalorimeterHit_Contrib& from);
    void MergeFrom(const SimCalorimeterHit_Contrib& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(SimCalorimeterHit_Contrib* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated float stepPos = 5;
    int steppos_size() const;
    void clear_steppos();
    static const int kStepPosFieldNumber = 5;
    float steppos(int index) const;
    void set_steppos(int index, float value);
    void add_steppos(float value);
    const ::google::protobuf::RepeatedField<float>& steppos() const;
    ::google::protobuf::RepeatedField<float>* mutable_steppos();

    // .eicio.model.Reference MCParticle = 1;
    bool has_mcparticle() const;
    void clear_mcparticle();
    static const int kMCParticleFieldNumber = 1;
    const ::eicio::model::Reference& mcparticle() const;
    ::eicio::model::Reference* mutable_mcparticle();
    ::eicio::model::Reference* release_mcparticle();
    void set_allocated_mcparticle(::eicio::model::Reference* mcparticle);

    // float energy = 2;
    void clear_energy();
    static const int kEnergyFieldNumber = 2;
    float energy() const;
    void set_energy(float value);

    // float time = 3;
    void clear_time();
    static const int kTimeFieldNumber = 3;
    float time() const;
    void set_time(float value);

    // int32 PDG = 4;
    void clear_pdg();
    static const int kPDGFieldNumber = 4;
    ::google::protobuf::int32 pdg() const;
    void set_pdg(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.SimCalorimeterHit.Contrib)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> steppos_;
    mutable int _steppos_cached_byte_size_;
    ::eicio::model::Reference* mcparticle_;
    float energy_;
    float time_;
    ::google::protobuf::int32 pdg_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimCalorimeterHit
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.SimCalorimeterHit) */ {
   public:
    SimCalorimeterHit();
    virtual ~SimCalorimeterHit();

    SimCalorimeterHit(const SimCalorimeterHit& from);

    inline SimCalorimeterHit& operator=(const SimCalorimeterHit& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const SimCalorimeterHit& default_instance();

    static inline const SimCalorimeterHit* internal_default_instance() {
        return reinterpret_cast<const SimCalorimeterHit*>(&_SimCalorimeterHit_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 31;

    void Swap(SimCalorimeterHit* other);

    // implements Message ----------------------------------------------

    inline SimCalorimeterHit* New() const PROTOBUF_FINAL { return New(NULL); }

    SimCalorimeterHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const SimCalorimeterHit& from);
    void MergeFrom(const SimCalorimeterHit& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(SimCalorimeterHit* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    typedef SimCalorimeterHit_Contrib Contrib;

    // accessors -------------------------------------------------------

    // repeated float pos = 6;
    int pos_size() const;
    void clear_pos();
    static const int kPosFieldNumber = 6;
    float pos(int index) const;
    void set_pos(int index, float value);
    void add_pos(float value);
    const ::google::protobuf::RepeatedField<float>& pos() const;
    ::google::protobuf::RepeatedField<float>* mutable_pos();

    // repeated .eicio.model.SimCalorimeterHit.Contrib contributions = 7;
    int contributions_size() const;
    void clear_contributions();
    static const int kContributionsFieldNumber = 7;
    const ::eicio::model::SimCalorimeterHit_Contrib& contributions(int index) const;
    ::eicio::model::SimCalorimeterHit_Contrib* mutable_contributions(int index);
    ::eicio::model::SimCalorimeterHit_Contrib* add_contributions();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit_Contrib>* mutable_contributions();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit_Contrib>& contributions()
        const;

    // .eicio.model.Params params = 2;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 2;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 cellID0 = 3;
    void clear_cellid0();
    static const int kCellID0FieldNumber = 3;
    ::google::protobuf::int32 cellid0() const;
    void set_cellid0(::google::protobuf::int32 value);

    // int32 cellID1 = 4;
    void clear_cellid1();
    static const int kCellID1FieldNumber = 4;
    ::google::protobuf::int32 cellid1() const;
    void set_cellid1(::google::protobuf::int32 value);

    // float energy = 5;
    void clear_energy();
    static const int kEnergyFieldNumber = 5;
    float energy() const;
    void set_energy(float value);

    // @@protoc_insertion_point(class_scope:eicio.model.SimCalorimeterHit)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> pos_;
    mutable int _pos_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit_Contrib> contributions_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 cellid0_;
    ::google::protobuf::int32 cellid1_;
    float energy_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimCalorimeterHitCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.SimCalorimeterHitCollection) */ {
   public:
    SimCalorimeterHitCollection();
    virtual ~SimCalorimeterHitCollection();

    SimCalorimeterHitCollection(const SimCalorimeterHitCollection& from);

    inline SimCalorimeterHitCollection& operator=(const SimCalorimeterHitCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const SimCalorimeterHitCollection& default_instance();

    static inline const SimCalorimeterHitCollection* internal_default_instance() {
        return reinterpret_cast<const SimCalorimeterHitCollection*>(
            &_SimCalorimeterHitCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 32;

    void Swap(SimCalorimeterHitCollection* other);

    // implements Message ----------------------------------------------

    inline SimCalorimeterHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    SimCalorimeterHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const SimCalorimeterHitCollection& from);
    void MergeFrom(const SimCalorimeterHitCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(SimCalorimeterHitCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.SimCalorimeterHit entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::SimCalorimeterHit& entries(int index) const;
    ::eicio::model::SimCalorimeterHit* mutable_entries(int index);
    ::eicio::model::SimCalorimeterHit* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.SimCalorimeterHitCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RawCalorimeterHit
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.RawCalorimeterHit) */ {
   public:
    RawCalorimeterHit();
    virtual ~RawCalorimeterHit();

    RawCalorimeterHit(const RawCalorimeterHit& from);

    inline RawCalorimeterHit& operator=(const RawCalorimeterHit& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const RawCalorimeterHit& default_instance();

    static inline const RawCalorimeterHit* internal_default_instance() {
        return reinterpret_cast<const RawCalorimeterHit*>(&_RawCalorimeterHit_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 33;

    void Swap(RawCalorimeterHit* other);

    // implements Message ----------------------------------------------

    inline RawCalorimeterHit* New() const PROTOBUF_FINAL { return New(NULL); }

    RawCalorimeterHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const RawCalorimeterHit& from);
    void MergeFrom(const RawCalorimeterHit& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(RawCalorimeterHit* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 cellID0 = 2;
    void clear_cellid0();
    static const int kCellID0FieldNumber = 2;
    ::google::protobuf::int32 cellid0() const;
    void set_cellid0(::google::protobuf::int32 value);

    // int32 cellID1 = 3;
    void clear_cellid1();
    static const int kCellID1FieldNumber = 3;
    ::google::protobuf::int32 cellid1() const;
    void set_cellid1(::google::protobuf::int32 value);

    // int32 amplitude = 4;
    void clear_amplitude();
    static const int kAmplitudeFieldNumber = 4;
    ::google::protobuf::int32 amplitude() const;
    void set_amplitude(::google::protobuf::int32 value);

    // int32 timeStamp = 5;
    void clear_timestamp();
    static const int kTimeStampFieldNumber = 5;
    ::google::protobuf::int32 timestamp() const;
    void set_timestamp(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.RawCalorimeterHit)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 cellid0_;
    ::google::protobuf::int32 cellid1_;
    ::google::protobuf::int32 amplitude_;
    ::google::protobuf::int32 timestamp_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RawCalorimeterHitCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.RawCalorimeterHitCollection) */ {
   public:
    RawCalorimeterHitCollection();
    virtual ~RawCalorimeterHitCollection();

    RawCalorimeterHitCollection(const RawCalorimeterHitCollection& from);

    inline RawCalorimeterHitCollection& operator=(const RawCalorimeterHitCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const RawCalorimeterHitCollection& default_instance();

    static inline const RawCalorimeterHitCollection* internal_default_instance() {
        return reinterpret_cast<const RawCalorimeterHitCollection*>(
            &_RawCalorimeterHitCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 34;

    void Swap(RawCalorimeterHitCollection* other);

    // implements Message ----------------------------------------------

    inline RawCalorimeterHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    RawCalorimeterHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const RawCalorimeterHitCollection& from);
    void MergeFrom(const RawCalorimeterHitCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(RawCalorimeterHitCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.RawCalorimeterHit entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::RawCalorimeterHit& entries(int index) const;
    ::eicio::model::RawCalorimeterHit* mutable_entries(int index);
    ::eicio::model::RawCalorimeterHit* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::RawCalorimeterHit>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::RawCalorimeterHit>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.RawCalorimeterHitCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::RawCalorimeterHit> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CalorimeterHit
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.CalorimeterHit) */ {
   public:
    CalorimeterHit();
    virtual ~CalorimeterHit();

    CalorimeterHit(const CalorimeterHit& from);

    inline CalorimeterHit& operator=(const CalorimeterHit& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const CalorimeterHit& default_instance();

    static inline const CalorimeterHit* internal_default_instance() {
        return reinterpret_cast<const CalorimeterHit*>(&_CalorimeterHit_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 35;

    void Swap(CalorimeterHit* other);

    // implements Message ----------------------------------------------

    inline CalorimeterHit* New() const PROTOBUF_FINAL { return New(NULL); }

    CalorimeterHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const CalorimeterHit& from);
    void MergeFrom(const CalorimeterHit& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(CalorimeterHit* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated float pos = 7;
    int pos_size() const;
    void clear_pos();
    static const int kPosFieldNumber = 7;
    float pos(int index) const;
    void set_pos(int index, float value);
    void add_pos(float value);
    const ::google::protobuf::RepeatedField<float>& pos() const;
    ::google::protobuf::RepeatedField<float>* mutable_pos();

    // .eicio.model.Reference raw = 9;
    bool has_raw() const;
    void clear_raw();
    static const int kRawFieldNumber = 9;
    const ::eicio::model::Reference& raw() const;
    ::eicio::model::Reference* mutable_raw();
    ::eicio::model::Reference* release_raw();
    void set_allocated_raw(::eicio::model::Reference* raw);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 cellID0 = 2;
    void clear_cellid0();
    static const int kCellID0FieldNumber = 2;
    ::google::protobuf::int32 cellid0() const;
    void set_cellid0(::google::protobuf::int32 value);

    // int32 cellID1 = 3;
    void clear_cellid1();
    static const int kCellID1FieldNumber = 3;
    ::google::protobuf::int32 cellid1() const;
    void set_cellid1(::google::protobuf::int32 value);

    // float energy = 4;
    void clear_energy();
    static const int kEnergyFieldNumber = 4;
    float energy() const;
    void set_energy(float value);

    // float energyErr = 5;
    void clear_energyerr();
    static const int kEnergyErrFieldNumber = 5;
    float energyerr() const;
    void set_energyerr(float value);

    // float time = 6;
    void clear_time();
    static const int kTimeFieldNumber = 6;
    float time() const;
    void set_time(float value);

    // int32 type = 8;
    void clear_type();
    static const int kTypeFieldNumber = 8;
    ::google::protobuf::int32 type() const;
    void set_type(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.CalorimeterHit)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> pos_;
    mutable int _pos_cached_byte_size_;
    ::eicio::model::Reference* raw_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 cellid0_;
    ::google::protobuf::int32 cellid1_;
    float energy_;
    float energyerr_;
    float time_;
    ::google::protobuf::int32 type_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CalorimeterHitCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.CalorimeterHitCollection) */ {
   public:
    CalorimeterHitCollection();
    virtual ~CalorimeterHitCollection();

    CalorimeterHitCollection(const CalorimeterHitCollection& from);

    inline CalorimeterHitCollection& operator=(const CalorimeterHitCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const CalorimeterHitCollection& default_instance();

    static inline const CalorimeterHitCollection* internal_default_instance() {
        return reinterpret_cast<const CalorimeterHitCollection*>(
            &_CalorimeterHitCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 36;

    void Swap(CalorimeterHitCollection* other);

    // implements Message ----------------------------------------------

    inline CalorimeterHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    CalorimeterHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const CalorimeterHitCollection& from);
    void MergeFrom(const CalorimeterHitCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(CalorimeterHitCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.CalorimeterHit entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::CalorimeterHit& entries(int index) const;
    ::eicio::model::CalorimeterHit* mutable_entries(int index);
    ::eicio::model::CalorimeterHit* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::CalorimeterHit>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::CalorimeterHit>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.CalorimeterHitCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::CalorimeterHit> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Cluster : public ::google::protobuf::
                    Message /* @@protoc_insertion_point(class_definition:eicio.model.Cluster) */ {
   public:
    Cluster();
    virtual ~Cluster();

    Cluster(const Cluster& from);

    inline Cluster& operator=(const Cluster& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Cluster& default_instance();

    static inline const Cluster* internal_default_instance() {
        return reinterpret_cast<const Cluster*>(&_Cluster_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 37;

    void Swap(Cluster* other);

    // implements Message ----------------------------------------------

    inline Cluster* New() const PROTOBUF_FINAL { return New(NULL); }

    Cluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const Cluster& from);
    void MergeFrom(const Cluster& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(Cluster* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated float pos = 5;
    int pos_size() const;
    void clear_pos();
    static const int kPosFieldNumber = 5;
    float pos(int index) const;
    void set_pos(int index, float value);
    void add_pos(float value);
    const ::google::protobuf::RepeatedField<float>& pos() const;
    ::google::protobuf::RepeatedField<float>* mutable_pos();

    // repeated float posErr = 6;
    int poserr_size() const;
    void clear_poserr();
    static const int kPosErrFieldNumber = 6;
    float poserr(int index) const;
    void set_poserr(int index, float value);
    void add_poserr(float value);
    const ::google::protobuf::RepeatedField<float>& poserr() const;
    ::google::protobuf::RepeatedField<float>* mutable_poserr();

    // repeated float dirErr = 9;
    int direrr_size() const;
    void clear_direrr();
    static const int kDirErrFieldNumber = 9;
    float direrr(int index) const;
    void set_direrr(int index, float value);
    void add_direrr(float value);
    const ::google::protobuf::RepeatedField<float>& direrr() const;
    ::google::protobuf::RepeatedField<float>* mutable_direrr();

    // repeated float shape = 10;
    int shape_size() const;
    void clear_shape();
    static const int kShapeFieldNumber = 10;
    float shape(int index) const;
    void set_shape(int index, float value);
    void add_shape(float value);
    const ::google::protobuf::RepeatedField<float>& shape() const;
    ::google::protobuf::RepeatedField<float>* mutable_shape();

    // repeated .eicio.model.ParticleID PIDs = 11;
    int pids_size() const;
    void clear_pids();
    static const int kPIDsFieldNumber = 11;
    const ::eicio::model::ParticleID& pids(int index) const;
    ::eicio::model::ParticleID* mutable_pids(int index);
    ::eicio::model::ParticleID* add_pids();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>* mutable_pids();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>& pids() const;

    // repeated .eicio.model.Reference clusters = 12;
    int clusters_size() const;
    void clear_clusters();
    static const int kClustersFieldNumber = 12;
    const ::eicio::model::Reference& clusters(int index) const;
    ::eicio::model::Reference* mutable_clusters(int index);
    ::eicio::model::Reference* add_clusters();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_clusters();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& clusters() const;

    // repeated .eicio.model.Reference hits = 13;
    int hits_size() const;
    void clear_hits();
    static const int kHitsFieldNumber = 13;
    const ::eicio::model::Reference& hits(int index) const;
    ::eicio::model::Reference* mutable_hits(int index);
    ::eicio::model::Reference* add_hits();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_hits();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& hits() const;

    // repeated float weights = 14;
    int weights_size() const;
    void clear_weights();
    static const int kWeightsFieldNumber = 14;
    float weights(int index) const;
    void set_weights(int index, float value);
    void add_weights(float value);
    const ::google::protobuf::RepeatedField<float>& weights() const;
    ::google::protobuf::RepeatedField<float>* mutable_weights();

    // repeated float subDetEnes = 15;
    int subdetenes_size() const;
    void clear_subdetenes();
    static const int kSubDetEnesFieldNumber = 15;
    float subdetenes(int index) const;
    void set_subdetenes(int index, float value);
    void add_subdetenes(float value);
    const ::google::protobuf::RepeatedField<float>& subdetenes() const;
    ::google::protobuf::RepeatedField<float>* mutable_subdetenes();

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 type = 2;
    void clear_type();
    static const int kTypeFieldNumber = 2;
    ::google::protobuf::int32 type() const;
    void set_type(::google::protobuf::int32 value);

    // float energy = 3;
    void clear_energy();
    static const int kEnergyFieldNumber = 3;
    float energy() const;
    void set_energy(float value);

    // float energyErr = 4;
    void clear_energyerr();
    static const int kEnergyErrFieldNumber = 4;
    float energyerr() const;
    void set_energyerr(float value);

    // float theta = 7;
    void clear_theta();
    static const int kThetaFieldNumber = 7;
    float theta() const;
    void set_theta(float value);

    // float phi = 8;
    void clear_phi();
    static const int kPhiFieldNumber = 8;
    float phi() const;
    void set_phi(float value);

    // @@protoc_insertion_point(class_scope:eicio.model.Cluster)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> pos_;
    mutable int _pos_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> poserr_;
    mutable int _poserr_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> direrr_;
    mutable int _direrr_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> shape_;
    mutable int _shape_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID> pids_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> clusters_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> hits_;
    ::google::protobuf::RepeatedField<float> weights_;
    mutable int _weights_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> subdetenes_;
    mutable int _subdetenes_cached_byte_size_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 type_;
    float energy_;
    float energyerr_;
    float theta_;
    float phi_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.ClusterCollection) */ {
   public:
    ClusterCollection();
    virtual ~ClusterCollection();

    ClusterCollection(const ClusterCollection& from);

    inline ClusterCollection& operator=(const ClusterCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const ClusterCollection& default_instance();

    static inline const ClusterCollection* internal_default_instance() {
        return reinterpret_cast<const ClusterCollection*>(&_ClusterCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 38;

    void Swap(ClusterCollection* other);

    // implements Message ----------------------------------------------

    inline ClusterCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    ClusterCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const ClusterCollection& from);
    void MergeFrom(const ClusterCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(ClusterCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.Cluster entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::Cluster& entries(int index) const;
    ::eicio::model::Cluster* mutable_entries(int index);
    ::eicio::model::Cluster* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Cluster>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Cluster>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.ClusterCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Cluster> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecParticle : public ::google::protobuf::
                        Message /* @@protoc_insertion_point(class_definition:eicio.model.RecParticle) */ {
   public:
    RecParticle();
    virtual ~RecParticle();

    RecParticle(const RecParticle& from);

    inline RecParticle& operator=(const RecParticle& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const RecParticle& default_instance();

    static inline const RecParticle* internal_default_instance() {
        return reinterpret_cast<const RecParticle*>(&_RecParticle_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 39;

    void Swap(RecParticle* other);

    // implements Message ----------------------------------------------

    inline RecParticle* New() const PROTOBUF_FINAL { return New(NULL); }

    RecParticle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const RecParticle& from);
    void MergeFrom(const RecParticle& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(RecParticle* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated float p = 3;
    int p_size() const;
    void clear_p();
    static const int kPFieldNumber = 3;
    float p(int index) const;
    void set_p(int index, float value);
    void add_p(float value);
    const ::google::protobuf::RepeatedField<float>& p() const;
    ::google::protobuf::RepeatedField<float>* mutable_p();

    // repeated float cov = 5;
    int cov_size() const;
    void clear_cov();
    static const int kCovFieldNumber = 5;
    float cov(int index) const;
    void set_cov(int index, float value);
    void add_cov(float value);
    const ::google::protobuf::RepeatedField<float>& cov() const;
    ::google::protobuf::RepeatedField<float>* mutable_cov();

    // repeated float ref = 8;
    int ref_size() const;
    void clear_ref();
    static const int kRefFieldNumber = 8;
    float ref(int index) const;
    void set_ref(int index, float value);
    void add_ref(float value);
    const ::google::protobuf::RepeatedField<float>& ref() const;
    ::google::protobuf::RepeatedField<float>* mutable_ref();

    // repeated .eicio.model.ParticleID PIDs = 9;
    int pids_size() const;
    void clear_pids();
    static const int kPIDsFieldNumber = 9;
    const ::eicio::model::ParticleID& pids(int index) const;
    ::eicio::model::ParticleID* mutable_pids(int index);
    ::eicio::model::ParticleID* add_pids();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>* mutable_pids();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>& pids() const;

    // repeated .eicio.model.Reference recs = 12;
    int recs_size() const;
    void clear_recs();
    static const int kRecsFieldNumber = 12;
    const ::eicio::model::Reference& recs(int index) const;
    ::eicio::model::Reference* mutable_recs(int index);
    ::eicio::model::Reference* add_recs();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_recs();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& recs() const;

    // repeated .eicio.model.Reference tracks = 13;
    int tracks_size() const;
    void clear_tracks();
    static const int kTracksFieldNumber = 13;
    const ::eicio::model::Reference& tracks(int index) const;
    ::eicio::model::Reference* mutable_tracks(int index);
    ::eicio::model::Reference* add_tracks();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_tracks();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& tracks() const;

    // repeated .eicio.model.Reference clusters = 14;
    int clusters_size() const;
    void clear_clusters();
    static const int kClustersFieldNumber = 14;
    const ::eicio::model::Reference& clusters(int index) const;
    ::eicio::model::Reference* mutable_clusters(int index);
    ::eicio::model::Reference* add_clusters();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* mutable_clusters();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& clusters() const;

    // .eicio.model.Reference startVtx = 15;
    bool has_startvtx() const;
    void clear_startvtx();
    static const int kStartVtxFieldNumber = 15;
    const ::eicio::model::Reference& startvtx() const;
    ::eicio::model::Reference* mutable_startvtx();
    ::eicio::model::Reference* release_startvtx();
    void set_allocated_startvtx(::eicio::model::Reference* startvtx);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 type = 2;
    void clear_type();
    static const int kTypeFieldNumber = 2;
    ::google::protobuf::int32 type() const;
    void set_type(::google::protobuf::int32 value);

    // float energy = 4;
    void clear_energy();
    static const int kEnergyFieldNumber = 4;
    float energy() const;
    void set_energy(float value);

    // float mass = 6;
    void clear_mass();
    static const int kMassFieldNumber = 6;
    float mass() const;
    void set_mass(float value);

    // float charge = 7;
    void clear_charge();
    static const int kChargeFieldNumber = 7;
    float charge() const;
    void set_charge(float value);

    // int32 PIDUsed = 10;
    void clear_pidused();
    static const int kPIDUsedFieldNumber = 10;
    ::google::protobuf::int32 pidused() const;
    void set_pidused(::google::protobuf::int32 value);

    // float goodnessOfPID = 11;
    void clear_goodnessofpid();
    static const int kGoodnessOfPIDFieldNumber = 11;
    float goodnessofpid() const;
    void set_goodnessofpid(float value);

    // @@protoc_insertion_point(class_scope:eicio.model.RecParticle)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> p_;
    mutable int _p_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> cov_;
    mutable int _cov_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> ref_;
    mutable int _ref_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID> pids_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> recs_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> tracks_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference> clusters_;
    ::eicio::model::Reference* startvtx_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 type_;
    float energy_;
    float mass_;
    float charge_;
    ::google::protobuf::int32 pidused_;
    float goodnessofpid_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecParticleCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.RecParticleCollection) */ {
   public:
    RecParticleCollection();
    virtual ~RecParticleCollection();

    RecParticleCollection(const RecParticleCollection& from);

    inline RecParticleCollection& operator=(const RecParticleCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const RecParticleCollection& default_instance();

    static inline const RecParticleCollection* internal_default_instance() {
        return reinterpret_cast<const RecParticleCollection*>(&_RecParticleCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 40;

    void Swap(RecParticleCollection* other);

    // implements Message ----------------------------------------------

    inline RecParticleCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    RecParticleCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const RecParticleCollection& from);
    void MergeFrom(const RecParticleCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(RecParticleCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.RecParticle entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::RecParticle& entries(int index) const;
    ::eicio::model::RecParticle* mutable_entries(int index);
    ::eicio::model::RecParticle* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::RecParticle>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::RecParticle>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.RecParticleCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::RecParticle> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vertex
    : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.model.Vertex) */ {
   public:
    Vertex();
    virtual ~Vertex();

    Vertex(const Vertex& from);

    inline Vertex& operator=(const Vertex& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Vertex& default_instance();

    static inline const Vertex* internal_default_instance() {
        return reinterpret_cast<const Vertex*>(&_Vertex_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 41;

    void Swap(Vertex* other);

    // implements Message ----------------------------------------------

    inline Vertex* New() const PROTOBUF_FINAL { return New(NULL); }

    Vertex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const Vertex& from);
    void MergeFrom(const Vertex& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(Vertex* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated float pos = 6;
    int pos_size() const;
    void clear_pos();
    static const int kPosFieldNumber = 6;
    float pos(int index) const;
    void set_pos(int index, float value);
    void add_pos(float value);
    const ::google::protobuf::RepeatedField<float>& pos() const;
    ::google::protobuf::RepeatedField<float>* mutable_pos();

    // repeated float cov = 7;
    int cov_size() const;
    void clear_cov();
    static const int kCovFieldNumber = 7;
    float cov(int index) const;
    void set_cov(int index, float value);
    void add_cov(float value);
    const ::google::protobuf::RepeatedField<float>& cov() const;
    ::google::protobuf::RepeatedField<float>* mutable_cov();

    // repeated float params = 8;
    int params_size() const;
    void clear_params();
    static const int kParamsFieldNumber = 8;
    float params(int index) const;
    void set_params(int index, float value);
    void add_params(float value);
    const ::google::protobuf::RepeatedField<float>& params() const;
    ::google::protobuf::RepeatedField<float>* mutable_params();

    // .eicio.model.Reference recPart = 9;
    bool has_recpart() const;
    void clear_recpart();
    static const int kRecPartFieldNumber = 9;
    const ::eicio::model::Reference& recpart() const;
    ::eicio::model::Reference* mutable_recpart();
    ::eicio::model::Reference* release_recpart();
    void set_allocated_recpart(::eicio::model::Reference* recpart);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // int32 primary = 2;
    void clear_primary();
    static const int kPrimaryFieldNumber = 2;
    ::google::protobuf::int32 primary() const;
    void set_primary(::google::protobuf::int32 value);

    // int32 algType = 3;
    void clear_algtype();
    static const int kAlgTypeFieldNumber = 3;
    ::google::protobuf::int32 algtype() const;
    void set_algtype(::google::protobuf::int32 value);

    // float chi2 = 4;
    void clear_chi2();
    static const int kChi2FieldNumber = 4;
    float chi2() const;
    void set_chi2(float value);

    // float prob = 5;
    void clear_prob();
    static const int kProbFieldNumber = 5;
    float prob() const;
    void set_prob(float value);

    // @@protoc_insertion_point(class_scope:eicio.model.Vertex)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<float> pos_;
    mutable int _pos_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> cov_;
    mutable int _cov_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> params_;
    mutable int _params_cached_byte_size_;
    ::eicio::model::Reference* recpart_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::int32 primary_;
    ::google::protobuf::int32 algtype_;
    float chi2_;
    float prob_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VertexCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.VertexCollection) */ {
   public:
    VertexCollection();
    virtual ~VertexCollection();

    VertexCollection(const VertexCollection& from);

    inline VertexCollection& operator=(const VertexCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const VertexCollection& default_instance();

    static inline const VertexCollection* internal_default_instance() {
        return reinterpret_cast<const VertexCollection*>(&_VertexCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 42;

    void Swap(VertexCollection* other);

    // implements Message ----------------------------------------------

    inline VertexCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    VertexCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const VertexCollection& from);
    void MergeFrom(const VertexCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(VertexCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.Vertex entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::Vertex& entries(int index) const;
    ::eicio::model::Vertex* mutable_entries(int index);
    ::eicio::model::Vertex* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Vertex>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Vertex>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.VertexCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Vertex> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Relation : public ::google::protobuf::
                     Message /* @@protoc_insertion_point(class_definition:eicio.model.Relation) */ {
   public:
    Relation();
    virtual ~Relation();

    Relation(const Relation& from);

    inline Relation& operator=(const Relation& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Relation& default_instance();

    static inline const Relation* internal_default_instance() {
        return reinterpret_cast<const Relation*>(&_Relation_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 43;

    void Swap(Relation* other);

    // implements Message ----------------------------------------------

    inline Relation* New() const PROTOBUF_FINAL { return New(NULL); }

    Relation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const Relation& from);
    void MergeFrom(const Relation& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(Relation* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // .eicio.model.Reference from = 2;
    bool has_from() const;
    void clear_from();
    static const int kFromFieldNumber = 2;
    const ::eicio::model::Reference& from() const;
    ::eicio::model::Reference* mutable_from();
    ::eicio::model::Reference* release_from();
    void set_allocated_from(::eicio::model::Reference* from);

    // .eicio.model.Reference to = 3;
    bool has_to() const;
    void clear_to();
    static const int kToFieldNumber = 3;
    const ::eicio::model::Reference& to() const;
    ::eicio::model::Reference* mutable_to();
    ::eicio::model::Reference* release_to();
    void set_allocated_to(::eicio::model::Reference* to);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // float weight = 4;
    void clear_weight();
    static const int kWeightFieldNumber = 4;
    float weight() const;
    void set_weight(float value);

    // @@protoc_insertion_point(class_scope:eicio.model.Relation)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::eicio::model::Reference* from_;
    ::eicio::model::Reference* to_;
    ::google::protobuf::uint32 id_;
    float weight_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelationCollection
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:eicio.model.RelationCollection) */ {
   public:
    RelationCollection();
    virtual ~RelationCollection();

    RelationCollection(const RelationCollection& from);

    inline RelationCollection& operator=(const RelationCollection& from) {
        CopyFrom(from);
        return *this;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const RelationCollection& default_instance();

    static inline const RelationCollection* internal_default_instance() {
        return reinterpret_cast<const RelationCollection*>(&_RelationCollection_default_instance_);
    }
    static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 44;

    void Swap(RelationCollection* other);

    // implements Message ----------------------------------------------

    inline RelationCollection* New() const PROTOBUF_FINAL { return New(NULL); }

    RelationCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
    void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
    void CopyFrom(const RelationCollection& from);
    void MergeFrom(const RelationCollection& from);
    void Clear() PROTOBUF_FINAL;
    bool IsInitialized() const PROTOBUF_FINAL;

    size_t ByteSizeLong() const PROTOBUF_FINAL;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
    int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

   private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const PROTOBUF_FINAL;
    void InternalSwap(RelationCollection* other);

   private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

   public:
    ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .eicio.model.Relation entries = 4;
    int entries_size() const;
    void clear_entries();
    static const int kEntriesFieldNumber = 4;
    const ::eicio::model::Relation& entries(int index) const;
    ::eicio::model::Relation* mutable_entries(int index);
    ::eicio::model::Relation* add_entries();
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Relation>* mutable_entries();
    const ::google::protobuf::RepeatedPtrField< ::eicio::model::Relation>& entries() const;

    // .eicio.model.Params params = 3;
    bool has_params() const;
    void clear_params();
    static const int kParamsFieldNumber = 3;
    const ::eicio::model::Params& params() const;
    ::eicio::model::Params* mutable_params();
    ::eicio::model::Params* release_params();
    void set_allocated_params(::eicio::model::Params* params);

    // uint32 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::uint32 id() const;
    void set_id(::google::protobuf::uint32 value);

    // uint32 flags = 2;
    void clear_flags();
    static const int kFlagsFieldNumber = 2;
    ::google::protobuf::uint32 flags() const;
    void set_flags(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:eicio.model.RelationCollection)
   private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField< ::eicio::model::Relation> entries_;
    ::eicio::model::Params* params_;
    ::google::protobuf::uint32 id_;
    ::google::protobuf::uint32 flags_;
    mutable int _cached_size_;
    friend struct protobuf_eicio_2eproto::TableStruct;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EventHeader_CollectionHeader

// string name = 1;
inline void EventHeader_CollectionHeader::clear_name() {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventHeader_CollectionHeader::name() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.CollectionHeader.name)
    return name_.GetNoArena();
}
inline void EventHeader_CollectionHeader::set_name(const ::std::string& value) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.CollectionHeader.name)
}
#if LANG_CXX11
inline void EventHeader_CollectionHeader::set_name(::std::string&& value) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:eicio.model.EventHeader.CollectionHeader.name)
}
#endif
inline void EventHeader_CollectionHeader::set_name(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:eicio.model.EventHeader.CollectionHeader.name)
}
inline void EventHeader_CollectionHeader::set_name(const char* value, size_t size) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:eicio.model.EventHeader.CollectionHeader.name)
}
inline ::std::string* EventHeader_CollectionHeader::mutable_name() {
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.CollectionHeader.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventHeader_CollectionHeader::release_name() {
    // @@protoc_insertion_point(field_release:eicio.model.EventHeader.CollectionHeader.name)

    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventHeader_CollectionHeader::set_allocated_name(::std::string* name) {
    if (name != NULL) {
    } else {
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:eicio.model.EventHeader.CollectionHeader.name)
}

// uint32 id = 2;
inline void EventHeader_CollectionHeader::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 EventHeader_CollectionHeader::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.CollectionHeader.id)
    return id_;
}
inline void EventHeader_CollectionHeader::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.CollectionHeader.id)
}

// string type = 3;
inline void EventHeader_CollectionHeader::clear_type() {
    type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventHeader_CollectionHeader::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.CollectionHeader.type)
    return type_.GetNoArena();
}
inline void EventHeader_CollectionHeader::set_type(const ::std::string& value) {
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.CollectionHeader.type)
}
#if LANG_CXX11
inline void EventHeader_CollectionHeader::set_type(::std::string&& value) {
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:eicio.model.EventHeader.CollectionHeader.type)
}
#endif
inline void EventHeader_CollectionHeader::set_type(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:eicio.model.EventHeader.CollectionHeader.type)
}
inline void EventHeader_CollectionHeader::set_type(const char* value, size_t size) {
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:eicio.model.EventHeader.CollectionHeader.type)
}
inline ::std::string* EventHeader_CollectionHeader::mutable_type() {
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.CollectionHeader.type)
    return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventHeader_CollectionHeader::release_type() {
    // @@protoc_insertion_point(field_release:eicio.model.EventHeader.CollectionHeader.type)

    return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventHeader_CollectionHeader::set_allocated_type(::std::string* type) {
    if (type != NULL) {
    } else {
    }
    type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
    // @@protoc_insertion_point(field_set_allocated:eicio.model.EventHeader.CollectionHeader.type)
}

// uint32 payloadSize = 4;
inline void EventHeader_CollectionHeader::clear_payloadsize() { payloadsize_ = 0u; }
inline ::google::protobuf::uint32 EventHeader_CollectionHeader::payloadsize() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.CollectionHeader.payloadSize)
    return payloadsize_;
}
inline void EventHeader_CollectionHeader::set_payloadsize(::google::protobuf::uint32 value) {
    payloadsize_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.CollectionHeader.payloadSize)
}

// -------------------------------------------------------------------

// EventHeader

// uint32 version = 1;
inline void EventHeader::clear_version() { version_ = 0u; }
inline ::google::protobuf::uint32 EventHeader::version() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.version)
    return version_;
}
inline void EventHeader::set_version(::google::protobuf::uint32 value) {
    version_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.version)
}

// uint64 runNumber = 2;
inline void EventHeader::clear_runnumber() { runnumber_ = GOOGLE_ULONGLONG(0); }
inline ::google::protobuf::uint64 EventHeader::runnumber() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.runNumber)
    return runnumber_;
}
inline void EventHeader::set_runnumber(::google::protobuf::uint64 value) {
    runnumber_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.runNumber)
}

// uint64 eventNumber = 3;
inline void EventHeader::clear_eventnumber() { eventnumber_ = GOOGLE_ULONGLONG(0); }
inline ::google::protobuf::uint64 EventHeader::eventnumber() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.eventNumber)
    return eventnumber_;
}
inline void EventHeader::set_eventnumber(::google::protobuf::uint64 value) {
    eventnumber_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.eventNumber)
}

// uint64 timeStamp = 4;
inline void EventHeader::clear_timestamp() { timestamp_ = GOOGLE_ULONGLONG(0); }
inline ::google::protobuf::uint64 EventHeader::timestamp() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.timeStamp)
    return timestamp_;
}
inline void EventHeader::set_timestamp(::google::protobuf::uint64 value) {
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.timeStamp)
}

// string detector = 5;
inline void EventHeader::clear_detector() {
    detector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventHeader::detector() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.detector)
    return detector_.GetNoArena();
}
inline void EventHeader::set_detector(const ::std::string& value) {
    detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.detector)
}
#if LANG_CXX11
inline void EventHeader::set_detector(::std::string&& value) {
    detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:eicio.model.EventHeader.detector)
}
#endif
inline void EventHeader::set_detector(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:eicio.model.EventHeader.detector)
}
inline void EventHeader::set_detector(const char* value, size_t size) {
    detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:eicio.model.EventHeader.detector)
}
inline ::std::string* EventHeader::mutable_detector() {
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.detector)
    return detector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventHeader::release_detector() {
    // @@protoc_insertion_point(field_release:eicio.model.EventHeader.detector)

    return detector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventHeader::set_allocated_detector(::std::string* detector) {
    if (detector != NULL) {
    } else {
    }
    detector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detector);
    // @@protoc_insertion_point(field_set_allocated:eicio.model.EventHeader.detector)
}

// .eicio.model.Params params = 6;
inline bool EventHeader::has_params() const { return this != internal_default_instance() && params_ != NULL; }
inline void EventHeader::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& EventHeader::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* EventHeader::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.params)
    return params_;
}
inline ::eicio::model::Params* EventHeader::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.EventHeader.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void EventHeader::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.EventHeader.params)
}

// repeated .eicio.model.EventHeader.CollectionHeader payloadCollections = 7;
inline int EventHeader::payloadcollections_size() const { return payloadcollections_.size(); }
inline void EventHeader::clear_payloadcollections() { payloadcollections_.Clear(); }
inline const ::eicio::model::EventHeader_CollectionHeader& EventHeader::payloadcollections(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.payloadCollections)
    return payloadcollections_.Get(index);
}
inline ::eicio::model::EventHeader_CollectionHeader* EventHeader::mutable_payloadcollections(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.payloadCollections)
    return payloadcollections_.Mutable(index);
}
inline ::eicio::model::EventHeader_CollectionHeader* EventHeader::add_payloadcollections() {
    // @@protoc_insertion_point(field_add:eicio.model.EventHeader.payloadCollections)
    return payloadcollections_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::EventHeader_CollectionHeader>*
EventHeader::mutable_payloadcollections() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.EventHeader.payloadCollections)
    return &payloadcollections_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::EventHeader_CollectionHeader>&
EventHeader::payloadcollections() const {
    // @@protoc_insertion_point(field_list:eicio.model.EventHeader.payloadCollections)
    return payloadcollections_;
}

// uint32 nUniqueIDs = 8;
inline void EventHeader::clear_nuniqueids() { nuniqueids_ = 0u; }
inline ::google::protobuf::uint32 EventHeader::nuniqueids() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.nUniqueIDs)
    return nuniqueids_;
}
inline void EventHeader::set_nuniqueids(::google::protobuf::uint32 value) {
    nuniqueids_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.nUniqueIDs)
}

// string description = 16;
inline void EventHeader::clear_description() {
    description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventHeader::description() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.description)
    return description_.GetNoArena();
}
inline void EventHeader::set_description(const ::std::string& value) {
    description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.description)
}
#if LANG_CXX11
inline void EventHeader::set_description(::std::string&& value) {
    description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:eicio.model.EventHeader.description)
}
#endif
inline void EventHeader::set_description(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                            ::std::string(value));
    // @@protoc_insertion_point(field_set_char:eicio.model.EventHeader.description)
}
inline void EventHeader::set_description(const char* value, size_t size) {
    description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                            ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:eicio.model.EventHeader.description)
}
inline ::std::string* EventHeader::mutable_description() {
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.description)
    return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventHeader::release_description() {
    // @@protoc_insertion_point(field_release:eicio.model.EventHeader.description)

    return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventHeader::set_allocated_description(::std::string* description) {
    if (description != NULL) {
    } else {
    }
    description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                     description);
    // @@protoc_insertion_point(field_set_allocated:eicio.model.EventHeader.description)
}

// -------------------------------------------------------------------

// IntParams

// repeated int32 array = 1;
inline int IntParams::array_size() const { return array_.size(); }
inline void IntParams::clear_array() { array_.Clear(); }
inline ::google::protobuf::int32 IntParams::array(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.IntParams.array)
    return array_.Get(index);
}
inline void IntParams::set_array(int index, ::google::protobuf::int32 value) {
    array_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.IntParams.array)
}
inline void IntParams::add_array(::google::protobuf::int32 value) {
    array_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.IntParams.array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32>& IntParams::array() const {
    // @@protoc_insertion_point(field_list:eicio.model.IntParams.array)
    return array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32>* IntParams::mutable_array() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.IntParams.array)
    return &array_;
}

// -------------------------------------------------------------------

// FloatParams

// repeated float array = 1;
inline int FloatParams::array_size() const { return array_.size(); }
inline void FloatParams::clear_array() { array_.Clear(); }
inline float FloatParams::array(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.FloatParams.array)
    return array_.Get(index);
}
inline void FloatParams::set_array(int index, float value) {
    array_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.FloatParams.array)
}
inline void FloatParams::add_array(float value) {
    array_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.FloatParams.array)
}
inline const ::google::protobuf::RepeatedField<float>& FloatParams::array() const {
    // @@protoc_insertion_point(field_list:eicio.model.FloatParams.array)
    return array_;
}
inline ::google::protobuf::RepeatedField<float>* FloatParams::mutable_array() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.FloatParams.array)
    return &array_;
}

// -------------------------------------------------------------------

// StringParams

// repeated string array = 1;
inline int StringParams::array_size() const { return array_.size(); }
inline void StringParams::clear_array() { array_.Clear(); }
inline const ::std::string& StringParams::array(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.StringParams.array)
    return array_.Get(index);
}
inline ::std::string* StringParams::mutable_array(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.StringParams.array)
    return array_.Mutable(index);
}
inline void StringParams::set_array(int index, const ::std::string& value) {
    // @@protoc_insertion_point(field_set:eicio.model.StringParams.array)
    array_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringParams::set_array(int index, ::std::string&& value) {
    // @@protoc_insertion_point(field_set:eicio.model.StringParams.array)
    array_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringParams::set_array(int index, const char* value) {
    GOOGLE_DCHECK(value != NULL);
    array_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:eicio.model.StringParams.array)
}
inline void StringParams::set_array(int index, const char* value, size_t size) {
    array_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:eicio.model.StringParams.array)
}
inline ::std::string* StringParams::add_array() {
    // @@protoc_insertion_point(field_add_mutable:eicio.model.StringParams.array)
    return array_.Add();
}
inline void StringParams::add_array(const ::std::string& value) {
    array_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:eicio.model.StringParams.array)
}
#if LANG_CXX11
inline void StringParams::add_array(::std::string&& value) {
    array_.Add(std::move(value));
    // @@protoc_insertion_point(field_add:eicio.model.StringParams.array)
}
#endif
inline void StringParams::add_array(const char* value) {
    GOOGLE_DCHECK(value != NULL);
    array_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:eicio.model.StringParams.array)
}
inline void StringParams::add_array(const char* value, size_t size) {
    array_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:eicio.model.StringParams.array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>& StringParams::array() const {
    // @@protoc_insertion_point(field_list:eicio.model.StringParams.array)
    return array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>* StringParams::mutable_array() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.StringParams.array)
    return &array_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Params

// map<string, .eicio.model.IntParams> ints = 1;
inline int Params::ints_size() const { return ints_.size(); }
inline void Params::clear_ints() { ints_.Clear(); }
inline const ::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>& Params::ints() const {
    // @@protoc_insertion_point(field_map:eicio.model.Params.ints)
    return ints_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>* Params::mutable_ints() {
    // @@protoc_insertion_point(field_mutable_map:eicio.model.Params.ints)
    return ints_.MutableMap();
}

// map<string, .eicio.model.FloatParams> floats = 2;
inline int Params::floats_size() const { return floats_.size(); }
inline void Params::clear_floats() { floats_.Clear(); }
inline const ::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>& Params::floats() const {
    // @@protoc_insertion_point(field_map:eicio.model.Params.floats)
    return floats_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>* Params::mutable_floats() {
    // @@protoc_insertion_point(field_mutable_map:eicio.model.Params.floats)
    return floats_.MutableMap();
}

// map<string, .eicio.model.StringParams> strings = 3;
inline int Params::strings_size() const { return strings_.size(); }
inline void Params::clear_strings() { strings_.Clear(); }
inline const ::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>& Params::strings() const {
    // @@protoc_insertion_point(field_map:eicio.model.Params.strings)
    return strings_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>* Params::mutable_strings() {
    // @@protoc_insertion_point(field_mutable_map:eicio.model.Params.strings)
    return strings_.MutableMap();
}

// -------------------------------------------------------------------

// Reference

// uint32 collID = 1;
inline void Reference::clear_collid() { collid_ = 0u; }
inline ::google::protobuf::uint32 Reference::collid() const {
    // @@protoc_insertion_point(field_get:eicio.model.Reference.collID)
    return collid_;
}
inline void Reference::set_collid(::google::protobuf::uint32 value) {
    collid_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Reference.collID)
}

// uint32 entryID = 2;
inline void Reference::clear_entryid() { entryid_ = 0u; }
inline ::google::protobuf::uint32 Reference::entryid() const {
    // @@protoc_insertion_point(field_get:eicio.model.Reference.entryID)
    return entryid_;
}
inline void Reference::set_entryid(::google::protobuf::uint32 value) {
    entryid_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Reference.entryID)
}

// -------------------------------------------------------------------

// ParticleID

// float likelihood = 1;
inline void ParticleID::clear_likelihood() { likelihood_ = 0; }
inline float ParticleID::likelihood() const {
    // @@protoc_insertion_point(field_get:eicio.model.ParticleID.likelihood)
    return likelihood_;
}
inline void ParticleID::set_likelihood(float value) {
    likelihood_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ParticleID.likelihood)
}

// int32 type = 2;
inline void ParticleID::clear_type() { type_ = 0; }
inline ::google::protobuf::int32 ParticleID::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.ParticleID.type)
    return type_;
}
inline void ParticleID::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ParticleID.type)
}

// int32 PDG = 3;
inline void ParticleID::clear_pdg() { pdg_ = 0; }
inline ::google::protobuf::int32 ParticleID::pdg() const {
    // @@protoc_insertion_point(field_get:eicio.model.ParticleID.PDG)
    return pdg_;
}
inline void ParticleID::set_pdg(::google::protobuf::int32 value) {
    pdg_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ParticleID.PDG)
}

// int32 algType = 4;
inline void ParticleID::clear_algtype() { algtype_ = 0; }
inline ::google::protobuf::int32 ParticleID::algtype() const {
    // @@protoc_insertion_point(field_get:eicio.model.ParticleID.algType)
    return algtype_;
}
inline void ParticleID::set_algtype(::google::protobuf::int32 value) {
    algtype_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ParticleID.algType)
}

// repeated float params = 5;
inline int ParticleID::params_size() const { return params_.size(); }
inline void ParticleID::clear_params() { params_.Clear(); }
inline float ParticleID::params(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.ParticleID.params)
    return params_.Get(index);
}
inline void ParticleID::set_params(int index, float value) {
    params_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.ParticleID.params)
}
inline void ParticleID::add_params(float value) {
    params_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.ParticleID.params)
}
inline const ::google::protobuf::RepeatedField<float>& ParticleID::params() const {
    // @@protoc_insertion_point(field_list:eicio.model.ParticleID.params)
    return params_;
}
inline ::google::protobuf::RepeatedField<float>* ParticleID::mutable_params() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.ParticleID.params)
    return &params_;
}

// -------------------------------------------------------------------

// MCParticle

// uint32 id = 1;
inline void MCParticle::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 MCParticle::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.id)
    return id_;
}
inline void MCParticle::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.id)
}

// repeated .eicio.model.Reference parents = 2;
inline int MCParticle::parents_size() const { return parents_.size(); }
inline void MCParticle::clear_parents() { parents_.Clear(); }
inline const ::eicio::model::Reference& MCParticle::parents(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.parents)
    return parents_.Get(index);
}
inline ::eicio::model::Reference* MCParticle::mutable_parents(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.MCParticle.parents)
    return parents_.Mutable(index);
}
inline ::eicio::model::Reference* MCParticle::add_parents() {
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.parents)
    return parents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* MCParticle::mutable_parents() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.parents)
    return &parents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& MCParticle::parents() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.parents)
    return parents_;
}

// repeated .eicio.model.Reference children = 3;
inline int MCParticle::children_size() const { return children_.size(); }
inline void MCParticle::clear_children() { children_.Clear(); }
inline const ::eicio::model::Reference& MCParticle::children(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.children)
    return children_.Get(index);
}
inline ::eicio::model::Reference* MCParticle::mutable_children(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.MCParticle.children)
    return children_.Mutable(index);
}
inline ::eicio::model::Reference* MCParticle::add_children() {
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.children)
    return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* MCParticle::mutable_children() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.children)
    return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& MCParticle::children() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.children)
    return children_;
}

// int32 PDG = 4;
inline void MCParticle::clear_pdg() { pdg_ = 0; }
inline ::google::protobuf::int32 MCParticle::pdg() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.PDG)
    return pdg_;
}
inline void MCParticle::set_pdg(::google::protobuf::int32 value) {
    pdg_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.PDG)
}

// repeated double vertex = 5;
inline int MCParticle::vertex_size() const { return vertex_.size(); }
inline void MCParticle::clear_vertex() { vertex_.Clear(); }
inline double MCParticle::vertex(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.vertex)
    return vertex_.Get(index);
}
inline void MCParticle::set_vertex(int index, double value) {
    vertex_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.vertex)
}
inline void MCParticle::add_vertex(double value) {
    vertex_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.vertex)
}
inline const ::google::protobuf::RepeatedField<double>& MCParticle::vertex() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.vertex)
    return vertex_;
}
inline ::google::protobuf::RepeatedField<double>* MCParticle::mutable_vertex() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.vertex)
    return &vertex_;
}

// float time = 6;
inline void MCParticle::clear_time() { time_ = 0; }
inline float MCParticle::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.time)
    return time_;
}
inline void MCParticle::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.time)
}

// repeated double p = 7;
inline int MCParticle::p_size() const { return p_.size(); }
inline void MCParticle::clear_p() { p_.Clear(); }
inline double MCParticle::p(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.p)
    return p_.Get(index);
}
inline void MCParticle::set_p(int index, double value) {
    p_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.p)
}
inline void MCParticle::add_p(double value) {
    p_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.p)
}
inline const ::google::protobuf::RepeatedField<double>& MCParticle::p() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.p)
    return p_;
}
inline ::google::protobuf::RepeatedField<double>* MCParticle::mutable_p() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.p)
    return &p_;
}

// double mass = 8;
inline void MCParticle::clear_mass() { mass_ = 0; }
inline double MCParticle::mass() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.mass)
    return mass_;
}
inline void MCParticle::set_mass(double value) {
    mass_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.mass)
}

// float charge = 9;
inline void MCParticle::clear_charge() { charge_ = 0; }
inline float MCParticle::charge() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.charge)
    return charge_;
}
inline void MCParticle::set_charge(float value) {
    charge_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.charge)
}

// repeated double PEndPoint = 10;
inline int MCParticle::pendpoint_size() const { return pendpoint_.size(); }
inline void MCParticle::clear_pendpoint() { pendpoint_.Clear(); }
inline double MCParticle::pendpoint(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.PEndPoint)
    return pendpoint_.Get(index);
}
inline void MCParticle::set_pendpoint(int index, double value) {
    pendpoint_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.PEndPoint)
}
inline void MCParticle::add_pendpoint(double value) {
    pendpoint_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.PEndPoint)
}
inline const ::google::protobuf::RepeatedField<double>& MCParticle::pendpoint() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.PEndPoint)
    return pendpoint_;
}
inline ::google::protobuf::RepeatedField<double>* MCParticle::mutable_pendpoint() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.PEndPoint)
    return &pendpoint_;
}

// repeated float spin = 11;
inline int MCParticle::spin_size() const { return spin_.size(); }
inline void MCParticle::clear_spin() { spin_.Clear(); }
inline float MCParticle::spin(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.spin)
    return spin_.Get(index);
}
inline void MCParticle::set_spin(int index, float value) {
    spin_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.spin)
}
inline void MCParticle::add_spin(float value) {
    spin_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.spin)
}
inline const ::google::protobuf::RepeatedField<float>& MCParticle::spin() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.spin)
    return spin_;
}
inline ::google::protobuf::RepeatedField<float>* MCParticle::mutable_spin() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.spin)
    return &spin_;
}

// repeated int32 colorFlow = 12;
inline int MCParticle::colorflow_size() const { return colorflow_.size(); }
inline void MCParticle::clear_colorflow() { colorflow_.Clear(); }
inline ::google::protobuf::int32 MCParticle::colorflow(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.colorFlow)
    return colorflow_.Get(index);
}
inline void MCParticle::set_colorflow(int index, ::google::protobuf::int32 value) {
    colorflow_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.colorFlow)
}
inline void MCParticle::add_colorflow(::google::protobuf::int32 value) {
    colorflow_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.colorFlow)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32>& MCParticle::colorflow() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.colorFlow)
    return colorflow_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32>* MCParticle::mutable_colorflow() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.colorFlow)
    return &colorflow_;
}

// int32 genStatus = 13;
inline void MCParticle::clear_genstatus() { genstatus_ = 0; }
inline ::google::protobuf::int32 MCParticle::genstatus() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.genStatus)
    return genstatus_;
}
inline void MCParticle::set_genstatus(::google::protobuf::int32 value) {
    genstatus_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.genStatus)
}

// uint32 simStatus = 14;
inline void MCParticle::clear_simstatus() { simstatus_ = 0u; }
inline ::google::protobuf::uint32 MCParticle::simstatus() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.simStatus)
    return simstatus_;
}
inline void MCParticle::set_simstatus(::google::protobuf::uint32 value) {
    simstatus_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.simStatus)
}

// -------------------------------------------------------------------

// MCParticleCollection

// uint32 id = 1;
inline void MCParticleCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 MCParticleCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticleCollection.id)
    return id_;
}
inline void MCParticleCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticleCollection.id)
}

// uint32 flags = 2;
inline void MCParticleCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 MCParticleCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticleCollection.flags)
    return flags_;
}
inline void MCParticleCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticleCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool MCParticleCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void MCParticleCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& MCParticleCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticleCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* MCParticleCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.MCParticleCollection.params)
    return params_;
}
inline ::eicio::model::Params* MCParticleCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.MCParticleCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void MCParticleCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.MCParticleCollection.params)
}

// repeated .eicio.model.MCParticle entries = 4;
inline int MCParticleCollection::entries_size() const { return entries_.size(); }
inline void MCParticleCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::MCParticle& MCParticleCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticleCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::MCParticle* MCParticleCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.MCParticleCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::MCParticle* MCParticleCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.MCParticleCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::MCParticle>*
MCParticleCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticleCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::MCParticle>&
MCParticleCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticleCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// SimTrackerHit

// uint32 id = 1;
inline void SimTrackerHit::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 SimTrackerHit::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.id)
    return id_;
}
inline void SimTrackerHit::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.id)
}

// int32 cellID0 = 2;
inline void SimTrackerHit::clear_cellid0() { cellid0_ = 0; }
inline ::google::protobuf::int32 SimTrackerHit::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.cellID0)
    return cellid0_;
}
inline void SimTrackerHit::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.cellID0)
}

// int32 cellID1 = 3;
inline void SimTrackerHit::clear_cellid1() { cellid1_ = 0; }
inline ::google::protobuf::int32 SimTrackerHit::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.cellID1)
    return cellid1_;
}
inline void SimTrackerHit::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.cellID1)
}

// repeated double pos = 4;
inline int SimTrackerHit::pos_size() const { return pos_.size(); }
inline void SimTrackerHit::clear_pos() { pos_.Clear(); }
inline double SimTrackerHit::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.pos)
    return pos_.Get(index);
}
inline void SimTrackerHit::set_pos(int index, double value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.pos)
}
inline void SimTrackerHit::add_pos(double value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.SimTrackerHit.pos)
}
inline const ::google::protobuf::RepeatedField<double>& SimTrackerHit::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimTrackerHit.pos)
    return pos_;
}
inline ::google::protobuf::RepeatedField<double>* SimTrackerHit::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimTrackerHit.pos)
    return &pos_;
}

// float EDep = 5;
inline void SimTrackerHit::clear_edep() { edep_ = 0; }
inline float SimTrackerHit::edep() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.EDep)
    return edep_;
}
inline void SimTrackerHit::set_edep(float value) {
    edep_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.EDep)
}

// float time = 6;
inline void SimTrackerHit::clear_time() { time_ = 0; }
inline float SimTrackerHit::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.time)
    return time_;
}
inline void SimTrackerHit::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.time)
}

// .eicio.model.Reference mc = 7;
inline bool SimTrackerHit::has_mc() const { return this != internal_default_instance() && mc_ != NULL; }
inline void SimTrackerHit::clear_mc() {
    if (GetArenaNoVirtual() == NULL && mc_ != NULL) delete mc_;
    mc_ = NULL;
}
inline const ::eicio::model::Reference& SimTrackerHit::mc() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.mc)
    return mc_ != NULL ? *mc_ : *::eicio::model::Reference::internal_default_instance();
}
inline ::eicio::model::Reference* SimTrackerHit::mutable_mc() {
    if (mc_ == NULL) {
        mc_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.SimTrackerHit.mc)
    return mc_;
}
inline ::eicio::model::Reference* SimTrackerHit::release_mc() {
    // @@protoc_insertion_point(field_release:eicio.model.SimTrackerHit.mc)

    ::eicio::model::Reference* temp = mc_;
    mc_ = NULL;
    return temp;
}
inline void SimTrackerHit::set_allocated_mc(::eicio::model::Reference* mc) {
    delete mc_;
    mc_ = mc;
    if (mc) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.SimTrackerHit.mc)
}

// repeated float p = 8;
inline int SimTrackerHit::p_size() const { return p_.size(); }
inline void SimTrackerHit::clear_p() { p_.Clear(); }
inline float SimTrackerHit::p(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.p)
    return p_.Get(index);
}
inline void SimTrackerHit::set_p(int index, float value) {
    p_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.p)
}
inline void SimTrackerHit::add_p(float value) {
    p_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.SimTrackerHit.p)
}
inline const ::google::protobuf::RepeatedField<float>& SimTrackerHit::p() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimTrackerHit.p)
    return p_;
}
inline ::google::protobuf::RepeatedField<float>* SimTrackerHit::mutable_p() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimTrackerHit.p)
    return &p_;
}

// float pathLength = 9;
inline void SimTrackerHit::clear_pathlength() { pathlength_ = 0; }
inline float SimTrackerHit::pathlength() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.pathLength)
    return pathlength_;
}
inline void SimTrackerHit::set_pathlength(float value) {
    pathlength_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.pathLength)
}

// int32 quality = 10;
inline void SimTrackerHit::clear_quality() { quality_ = 0; }
inline ::google::protobuf::int32 SimTrackerHit::quality() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.quality)
    return quality_;
}
inline void SimTrackerHit::set_quality(::google::protobuf::int32 value) {
    quality_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.quality)
}

// -------------------------------------------------------------------

// SimTrackerHitCollection

// uint32 id = 1;
inline void SimTrackerHitCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 SimTrackerHitCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHitCollection.id)
    return id_;
}
inline void SimTrackerHitCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHitCollection.id)
}

// uint32 flags = 2;
inline void SimTrackerHitCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 SimTrackerHitCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHitCollection.flags)
    return flags_;
}
inline void SimTrackerHitCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHitCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool SimTrackerHitCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void SimTrackerHitCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& SimTrackerHitCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHitCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* SimTrackerHitCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.SimTrackerHitCollection.params)
    return params_;
}
inline ::eicio::model::Params* SimTrackerHitCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.SimTrackerHitCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void SimTrackerHitCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.SimTrackerHitCollection.params)
}

// repeated .eicio.model.SimTrackerHit entries = 4;
inline int SimTrackerHitCollection::entries_size() const { return entries_.size(); }
inline void SimTrackerHitCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::SimTrackerHit& SimTrackerHitCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHitCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::SimTrackerHit* SimTrackerHitCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.SimTrackerHitCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::SimTrackerHit* SimTrackerHitCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.SimTrackerHitCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::SimTrackerHit>*
SimTrackerHitCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimTrackerHitCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::SimTrackerHit>&
SimTrackerHitCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimTrackerHitCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// TrackerRawData

// uint32 id = 1;
inline void TrackerRawData::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerRawData::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawData.id)
    return id_;
}
inline void TrackerRawData::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawData.id)
}

// int32 cellID0 = 2;
inline void TrackerRawData::clear_cellid0() { cellid0_ = 0; }
inline ::google::protobuf::int32 TrackerRawData::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawData.cellID0)
    return cellid0_;
}
inline void TrackerRawData::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawData.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerRawData::clear_cellid1() { cellid1_ = 0; }
inline ::google::protobuf::int32 TrackerRawData::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawData.cellID1)
    return cellid1_;
}
inline void TrackerRawData::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawData.cellID1)
}

// int32 time = 4;
inline void TrackerRawData::clear_time() { time_ = 0; }
inline ::google::protobuf::int32 TrackerRawData::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawData.time)
    return time_;
}
inline void TrackerRawData::set_time(::google::protobuf::int32 value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawData.time)
}

// repeated uint32 ADCs = 5;
inline int TrackerRawData::adcs_size() const { return adcs_.size(); }
inline void TrackerRawData::clear_adcs() { adcs_.Clear(); }
inline ::google::protobuf::uint32 TrackerRawData::adcs(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawData.ADCs)
    return adcs_.Get(index);
}
inline void TrackerRawData::set_adcs(int index, ::google::protobuf::uint32 value) {
    adcs_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawData.ADCs)
}
inline void TrackerRawData::add_adcs(::google::protobuf::uint32 value) {
    adcs_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerRawData.ADCs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32>& TrackerRawData::adcs() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerRawData.ADCs)
    return adcs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32>* TrackerRawData::mutable_adcs() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerRawData.ADCs)
    return &adcs_;
}

// -------------------------------------------------------------------

// TrackerRawDataCollection

// uint32 id = 1;
inline void TrackerRawDataCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerRawDataCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawDataCollection.id)
    return id_;
}
inline void TrackerRawDataCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawDataCollection.id)
}

// uint32 flags = 2;
inline void TrackerRawDataCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 TrackerRawDataCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawDataCollection.flags)
    return flags_;
}
inline void TrackerRawDataCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawDataCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool TrackerRawDataCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerRawDataCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& TrackerRawDataCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawDataCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* TrackerRawDataCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerRawDataCollection.params)
    return params_;
}
inline ::eicio::model::Params* TrackerRawDataCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerRawDataCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void TrackerRawDataCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerRawDataCollection.params)
}

// repeated .eicio.model.TrackerRawData entries = 4;
inline int TrackerRawDataCollection::entries_size() const { return entries_.size(); }
inline void TrackerRawDataCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::TrackerRawData& TrackerRawDataCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawDataCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::TrackerRawData* TrackerRawDataCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerRawDataCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::TrackerRawData* TrackerRawDataCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerRawDataCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerRawData>*
TrackerRawDataCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerRawDataCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerRawData>&
TrackerRawDataCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerRawDataCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// TrackerData

// uint32 id = 1;
inline void TrackerData::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerData::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerData.id)
    return id_;
}
inline void TrackerData::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerData.id)
}

// int32 cellID0 = 2;
inline void TrackerData::clear_cellid0() { cellid0_ = 0; }
inline ::google::protobuf::int32 TrackerData::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerData.cellID0)
    return cellid0_;
}
inline void TrackerData::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerData.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerData::clear_cellid1() { cellid1_ = 0; }
inline ::google::protobuf::int32 TrackerData::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerData.cellID1)
    return cellid1_;
}
inline void TrackerData::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerData.cellID1)
}

// float time = 4;
inline void TrackerData::clear_time() { time_ = 0; }
inline float TrackerData::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerData.time)
    return time_;
}
inline void TrackerData::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerData.time)
}

// repeated float charges = 5;
inline int TrackerData::charges_size() const { return charges_.size(); }
inline void TrackerData::clear_charges() { charges_.Clear(); }
inline float TrackerData::charges(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerData.charges)
    return charges_.Get(index);
}
inline void TrackerData::set_charges(int index, float value) {
    charges_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerData.charges)
}
inline void TrackerData::add_charges(float value) {
    charges_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerData.charges)
}
inline const ::google::protobuf::RepeatedField<float>& TrackerData::charges() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerData.charges)
    return charges_;
}
inline ::google::protobuf::RepeatedField<float>* TrackerData::mutable_charges() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerData.charges)
    return &charges_;
}

// -------------------------------------------------------------------

// TrackerDataCollection

// uint32 id = 1;
inline void TrackerDataCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerDataCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerDataCollection.id)
    return id_;
}
inline void TrackerDataCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerDataCollection.id)
}

// uint32 flags = 2;
inline void TrackerDataCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 TrackerDataCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerDataCollection.flags)
    return flags_;
}
inline void TrackerDataCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerDataCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool TrackerDataCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerDataCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& TrackerDataCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerDataCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* TrackerDataCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerDataCollection.params)
    return params_;
}
inline ::eicio::model::Params* TrackerDataCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerDataCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void TrackerDataCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerDataCollection.params)
}

// repeated .eicio.model.TrackerData entries = 4;
inline int TrackerDataCollection::entries_size() const { return entries_.size(); }
inline void TrackerDataCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::TrackerData& TrackerDataCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerDataCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::TrackerData* TrackerDataCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerDataCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::TrackerData* TrackerDataCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerDataCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerData>*
TrackerDataCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerDataCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerData>&
TrackerDataCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerDataCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// TrackerHit

// uint32 id = 1;
inline void TrackerHit::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerHit::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.id)
    return id_;
}
inline void TrackerHit::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.id)
}

// int32 cellID0 = 2;
inline void TrackerHit::clear_cellid0() { cellid0_ = 0; }
inline ::google::protobuf::int32 TrackerHit::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.cellID0)
    return cellid0_;
}
inline void TrackerHit::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerHit::clear_cellid1() { cellid1_ = 0; }
inline ::google::protobuf::int32 TrackerHit::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.cellID1)
    return cellid1_;
}
inline void TrackerHit::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.cellID1)
}

// int32 type = 4;
inline void TrackerHit::clear_type() { type_ = 0; }
inline ::google::protobuf::int32 TrackerHit::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.type)
    return type_;
}
inline void TrackerHit::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.type)
}

// repeated double pos = 5;
inline int TrackerHit::pos_size() const { return pos_.size(); }
inline void TrackerHit::clear_pos() { pos_.Clear(); }
inline double TrackerHit::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.pos)
    return pos_.Get(index);
}
inline void TrackerHit::set_pos(int index, double value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.pos)
}
inline void TrackerHit::add_pos(double value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHit.pos)
}
inline const ::google::protobuf::RepeatedField<double>& TrackerHit::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHit.pos)
    return pos_;
}
inline ::google::protobuf::RepeatedField<double>* TrackerHit::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHit.pos)
    return &pos_;
}

// repeated double cov = 6;
inline int TrackerHit::cov_size() const { return cov_.size(); }
inline void TrackerHit::clear_cov() { cov_.Clear(); }
inline double TrackerHit::cov(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.cov)
    return cov_.Get(index);
}
inline void TrackerHit::set_cov(int index, double value) {
    cov_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.cov)
}
inline void TrackerHit::add_cov(double value) {
    cov_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHit.cov)
}
inline const ::google::protobuf::RepeatedField<double>& TrackerHit::cov() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHit.cov)
    return cov_;
}
inline ::google::protobuf::RepeatedField<double>* TrackerHit::mutable_cov() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHit.cov)
    return &cov_;
}

// float EDep = 7;
inline void TrackerHit::clear_edep() { edep_ = 0; }
inline float TrackerHit::edep() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.EDep)
    return edep_;
}
inline void TrackerHit::set_edep(float value) {
    edep_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.EDep)
}

// float EDepErr = 8;
inline void TrackerHit::clear_edeperr() { edeperr_ = 0; }
inline float TrackerHit::edeperr() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.EDepErr)
    return edeperr_;
}
inline void TrackerHit::set_edeperr(float value) {
    edeperr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.EDepErr)
}

// float time = 9;
inline void TrackerHit::clear_time() { time_ = 0; }
inline float TrackerHit::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.time)
    return time_;
}
inline void TrackerHit::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.time)
}

// int32 quality = 10;
inline void TrackerHit::clear_quality() { quality_ = 0; }
inline ::google::protobuf::int32 TrackerHit::quality() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.quality)
    return quality_;
}
inline void TrackerHit::set_quality(::google::protobuf::int32 value) {
    quality_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.quality)
}

// repeated .eicio.model.Reference rawHits = 11;
inline int TrackerHit::rawhits_size() const { return rawhits_.size(); }
inline void TrackerHit::clear_rawhits() { rawhits_.Clear(); }
inline const ::eicio::model::Reference& TrackerHit::rawhits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.rawHits)
    return rawhits_.Get(index);
}
inline ::eicio::model::Reference* TrackerHit::mutable_rawhits(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHit.rawHits)
    return rawhits_.Mutable(index);
}
inline ::eicio::model::Reference* TrackerHit::add_rawhits() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHit.rawHits)
    return rawhits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* TrackerHit::mutable_rawhits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHit.rawHits)
    return &rawhits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& TrackerHit::rawhits() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHit.rawHits)
    return rawhits_;
}

// -------------------------------------------------------------------

// TrackerHitCollection

// uint32 id = 1;
inline void TrackerHitCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerHitCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitCollection.id)
    return id_;
}
inline void TrackerHitCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitCollection.id)
}

// uint32 flags = 2;
inline void TrackerHitCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 TrackerHitCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitCollection.flags)
    return flags_;
}
inline void TrackerHitCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool TrackerHitCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerHitCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& TrackerHitCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* TrackerHitCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitCollection.params)
    return params_;
}
inline ::eicio::model::Params* TrackerHitCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerHitCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void TrackerHitCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerHitCollection.params)
}

// repeated .eicio.model.TrackerHit entries = 4;
inline int TrackerHitCollection::entries_size() const { return entries_.size(); }
inline void TrackerHitCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::TrackerHit& TrackerHitCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::TrackerHit* TrackerHitCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::TrackerHit* TrackerHitCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHit>*
TrackerHitCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHit>&
TrackerHitCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// TrackerPulse

// uint32 id = 1;
inline void TrackerPulse::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerPulse::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.id)
    return id_;
}
inline void TrackerPulse::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.id)
}

// int32 cellID0 = 2;
inline void TrackerPulse::clear_cellid0() { cellid0_ = 0; }
inline ::google::protobuf::int32 TrackerPulse::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.cellID0)
    return cellid0_;
}
inline void TrackerPulse::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerPulse::clear_cellid1() { cellid1_ = 0; }
inline ::google::protobuf::int32 TrackerPulse::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.cellID1)
    return cellid1_;
}
inline void TrackerPulse::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.cellID1)
}

// float time = 4;
inline void TrackerPulse::clear_time() { time_ = 0; }
inline float TrackerPulse::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.time)
    return time_;
}
inline void TrackerPulse::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.time)
}

// float charge = 5;
inline void TrackerPulse::clear_charge() { charge_ = 0; }
inline float TrackerPulse::charge() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.charge)
    return charge_;
}
inline void TrackerPulse::set_charge(float value) {
    charge_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.charge)
}

// repeated float cov = 6;
inline int TrackerPulse::cov_size() const { return cov_.size(); }
inline void TrackerPulse::clear_cov() { cov_.Clear(); }
inline float TrackerPulse::cov(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.cov)
    return cov_.Get(index);
}
inline void TrackerPulse::set_cov(int index, float value) {
    cov_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.cov)
}
inline void TrackerPulse::add_cov(float value) {
    cov_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerPulse.cov)
}
inline const ::google::protobuf::RepeatedField<float>& TrackerPulse::cov() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerPulse.cov)
    return cov_;
}
inline ::google::protobuf::RepeatedField<float>* TrackerPulse::mutable_cov() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerPulse.cov)
    return &cov_;
}

// int32 quality = 7;
inline void TrackerPulse::clear_quality() { quality_ = 0; }
inline ::google::protobuf::int32 TrackerPulse::quality() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.quality)
    return quality_;
}
inline void TrackerPulse::set_quality(::google::protobuf::int32 value) {
    quality_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.quality)
}

// .eicio.model.Reference TPC = 8;
inline bool TrackerPulse::has_tpc() const { return this != internal_default_instance() && tpc_ != NULL; }
inline void TrackerPulse::clear_tpc() {
    if (GetArenaNoVirtual() == NULL && tpc_ != NULL) delete tpc_;
    tpc_ = NULL;
}
inline const ::eicio::model::Reference& TrackerPulse::tpc() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.TPC)
    return tpc_ != NULL ? *tpc_ : *::eicio::model::Reference::internal_default_instance();
}
inline ::eicio::model::Reference* TrackerPulse::mutable_tpc() {
    if (tpc_ == NULL) {
        tpc_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerPulse.TPC)
    return tpc_;
}
inline ::eicio::model::Reference* TrackerPulse::release_tpc() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerPulse.TPC)

    ::eicio::model::Reference* temp = tpc_;
    tpc_ = NULL;
    return temp;
}
inline void TrackerPulse::set_allocated_tpc(::eicio::model::Reference* tpc) {
    delete tpc_;
    tpc_ = tpc;
    if (tpc) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerPulse.TPC)
}

// -------------------------------------------------------------------

// TrackerPulseCollection

// uint32 id = 1;
inline void TrackerPulseCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerPulseCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulseCollection.id)
    return id_;
}
inline void TrackerPulseCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulseCollection.id)
}

// uint32 flags = 2;
inline void TrackerPulseCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 TrackerPulseCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulseCollection.flags)
    return flags_;
}
inline void TrackerPulseCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulseCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool TrackerPulseCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerPulseCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& TrackerPulseCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulseCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* TrackerPulseCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerPulseCollection.params)
    return params_;
}
inline ::eicio::model::Params* TrackerPulseCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerPulseCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void TrackerPulseCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerPulseCollection.params)
}

// repeated .eicio.model.TrackerPulse entries = 4;
inline int TrackerPulseCollection::entries_size() const { return entries_.size(); }
inline void TrackerPulseCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::TrackerPulse& TrackerPulseCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulseCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::TrackerPulse* TrackerPulseCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerPulseCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::TrackerPulse* TrackerPulseCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerPulseCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerPulse>*
TrackerPulseCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerPulseCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerPulse>&
TrackerPulseCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerPulseCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// TrackerHitPlane

// uint32 id = 1;
inline void TrackerHitPlane::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerHitPlane::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.id)
    return id_;
}
inline void TrackerHitPlane::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.id)
}

// int32 cellID0 = 2;
inline void TrackerHitPlane::clear_cellid0() { cellid0_ = 0; }
inline ::google::protobuf::int32 TrackerHitPlane::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.cellID0)
    return cellid0_;
}
inline void TrackerHitPlane::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerHitPlane::clear_cellid1() { cellid1_ = 0; }
inline ::google::protobuf::int32 TrackerHitPlane::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.cellID1)
    return cellid1_;
}
inline void TrackerHitPlane::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.cellID1)
}

// int32 type = 4;
inline void TrackerHitPlane::clear_type() { type_ = 0; }
inline ::google::protobuf::int32 TrackerHitPlane::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.type)
    return type_;
}
inline void TrackerHitPlane::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.type)
}

// repeated double pos = 5;
inline int TrackerHitPlane::pos_size() const { return pos_.size(); }
inline void TrackerHitPlane::clear_pos() { pos_.Clear(); }
inline double TrackerHitPlane::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.pos)
    return pos_.Get(index);
}
inline void TrackerHitPlane::set_pos(int index, double value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.pos)
}
inline void TrackerHitPlane::add_pos(double value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitPlane.pos)
}
inline const ::google::protobuf::RepeatedField<double>& TrackerHitPlane::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitPlane.pos)
    return pos_;
}
inline ::google::protobuf::RepeatedField<double>* TrackerHitPlane::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitPlane.pos)
    return &pos_;
}

// repeated float U = 6;
inline int TrackerHitPlane::u_size() const { return u_.size(); }
inline void TrackerHitPlane::clear_u() { u_.Clear(); }
inline float TrackerHitPlane::u(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.U)
    return u_.Get(index);
}
inline void TrackerHitPlane::set_u(int index, float value) {
    u_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.U)
}
inline void TrackerHitPlane::add_u(float value) {
    u_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitPlane.U)
}
inline const ::google::protobuf::RepeatedField<float>& TrackerHitPlane::u() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitPlane.U)
    return u_;
}
inline ::google::protobuf::RepeatedField<float>* TrackerHitPlane::mutable_u() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitPlane.U)
    return &u_;
}

// repeated float V = 7;
inline int TrackerHitPlane::v_size() const { return v_.size(); }
inline void TrackerHitPlane::clear_v() { v_.Clear(); }
inline float TrackerHitPlane::v(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.V)
    return v_.Get(index);
}
inline void TrackerHitPlane::set_v(int index, float value) {
    v_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.V)
}
inline void TrackerHitPlane::add_v(float value) {
    v_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitPlane.V)
}
inline const ::google::protobuf::RepeatedField<float>& TrackerHitPlane::v() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitPlane.V)
    return v_;
}
inline ::google::protobuf::RepeatedField<float>* TrackerHitPlane::mutable_v() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitPlane.V)
    return &v_;
}

// float dU = 8;
inline void TrackerHitPlane::clear_du() { du_ = 0; }
inline float TrackerHitPlane::du() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.dU)
    return du_;
}
inline void TrackerHitPlane::set_du(float value) {
    du_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.dU)
}

// float dV = 9;
inline void TrackerHitPlane::clear_dv() { dv_ = 0; }
inline float TrackerHitPlane::dv() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.dV)
    return dv_;
}
inline void TrackerHitPlane::set_dv(float value) {
    dv_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.dV)
}

// float EDep = 10;
inline void TrackerHitPlane::clear_edep() { edep_ = 0; }
inline float TrackerHitPlane::edep() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.EDep)
    return edep_;
}
inline void TrackerHitPlane::set_edep(float value) {
    edep_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.EDep)
}

// float EDepErr = 11;
inline void TrackerHitPlane::clear_edeperr() { edeperr_ = 0; }
inline float TrackerHitPlane::edeperr() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.EDepErr)
    return edeperr_;
}
inline void TrackerHitPlane::set_edeperr(float value) {
    edeperr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.EDepErr)
}

// float time = 12;
inline void TrackerHitPlane::clear_time() { time_ = 0; }
inline float TrackerHitPlane::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.time)
    return time_;
}
inline void TrackerHitPlane::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.time)
}

// int32 quality = 13;
inline void TrackerHitPlane::clear_quality() { quality_ = 0; }
inline ::google::protobuf::int32 TrackerHitPlane::quality() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.quality)
    return quality_;
}
inline void TrackerHitPlane::set_quality(::google::protobuf::int32 value) {
    quality_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.quality)
}

// repeated .eicio.model.Reference rawHits = 14;
inline int TrackerHitPlane::rawhits_size() const { return rawhits_.size(); }
inline void TrackerHitPlane::clear_rawhits() { rawhits_.Clear(); }
inline const ::eicio::model::Reference& TrackerHitPlane::rawhits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.rawHits)
    return rawhits_.Get(index);
}
inline ::eicio::model::Reference* TrackerHitPlane::mutable_rawhits(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitPlane.rawHits)
    return rawhits_.Mutable(index);
}
inline ::eicio::model::Reference* TrackerHitPlane::add_rawhits() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitPlane.rawHits)
    return rawhits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* TrackerHitPlane::mutable_rawhits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitPlane.rawHits)
    return &rawhits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& TrackerHitPlane::rawhits()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitPlane.rawHits)
    return rawhits_;
}

// -------------------------------------------------------------------

// TrackerHitPlaneCollection

// uint32 id = 1;
inline void TrackerHitPlaneCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerHitPlaneCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlaneCollection.id)
    return id_;
}
inline void TrackerHitPlaneCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlaneCollection.id)
}

// uint32 flags = 2;
inline void TrackerHitPlaneCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 TrackerHitPlaneCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlaneCollection.flags)
    return flags_;
}
inline void TrackerHitPlaneCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlaneCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool TrackerHitPlaneCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerHitPlaneCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& TrackerHitPlaneCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlaneCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* TrackerHitPlaneCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitPlaneCollection.params)
    return params_;
}
inline ::eicio::model::Params* TrackerHitPlaneCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerHitPlaneCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void TrackerHitPlaneCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerHitPlaneCollection.params)
}

// repeated .eicio.model.TrackerHitPlane entries = 4;
inline int TrackerHitPlaneCollection::entries_size() const { return entries_.size(); }
inline void TrackerHitPlaneCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::TrackerHitPlane& TrackerHitPlaneCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlaneCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::TrackerHitPlane* TrackerHitPlaneCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitPlaneCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::TrackerHitPlane* TrackerHitPlaneCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitPlaneCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitPlane>*
TrackerHitPlaneCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitPlaneCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitPlane>&
TrackerHitPlaneCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitPlaneCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// TrackerHitZCylinder

// uint32 id = 1;
inline void TrackerHitZCylinder::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerHitZCylinder::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.id)
    return id_;
}
inline void TrackerHitZCylinder::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.id)
}

// int32 cellID0 = 2;
inline void TrackerHitZCylinder::clear_cellid0() { cellid0_ = 0; }
inline ::google::protobuf::int32 TrackerHitZCylinder::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.cellID0)
    return cellid0_;
}
inline void TrackerHitZCylinder::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerHitZCylinder::clear_cellid1() { cellid1_ = 0; }
inline ::google::protobuf::int32 TrackerHitZCylinder::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.cellID1)
    return cellid1_;
}
inline void TrackerHitZCylinder::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.cellID1)
}

// int32 type = 4;
inline void TrackerHitZCylinder::clear_type() { type_ = 0; }
inline ::google::protobuf::int32 TrackerHitZCylinder::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.type)
    return type_;
}
inline void TrackerHitZCylinder::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.type)
}

// repeated double pos = 5;
inline int TrackerHitZCylinder::pos_size() const { return pos_.size(); }
inline void TrackerHitZCylinder::clear_pos() { pos_.Clear(); }
inline double TrackerHitZCylinder::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.pos)
    return pos_.Get(index);
}
inline void TrackerHitZCylinder::set_pos(int index, double value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.pos)
}
inline void TrackerHitZCylinder::add_pos(double value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitZCylinder.pos)
}
inline const ::google::protobuf::RepeatedField<double>& TrackerHitZCylinder::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitZCylinder.pos)
    return pos_;
}
inline ::google::protobuf::RepeatedField<double>* TrackerHitZCylinder::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitZCylinder.pos)
    return &pos_;
}

// repeated float center = 6;
inline int TrackerHitZCylinder::center_size() const { return center_.size(); }
inline void TrackerHitZCylinder::clear_center() { center_.Clear(); }
inline float TrackerHitZCylinder::center(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.center)
    return center_.Get(index);
}
inline void TrackerHitZCylinder::set_center(int index, float value) {
    center_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.center)
}
inline void TrackerHitZCylinder::add_center(float value) {
    center_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitZCylinder.center)
}
inline const ::google::protobuf::RepeatedField<float>& TrackerHitZCylinder::center() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitZCylinder.center)
    return center_;
}
inline ::google::protobuf::RepeatedField<float>* TrackerHitZCylinder::mutable_center() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitZCylinder.center)
    return &center_;
}

// float dRPhi = 7;
inline void TrackerHitZCylinder::clear_drphi() { drphi_ = 0; }
inline float TrackerHitZCylinder::drphi() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.dRPhi)
    return drphi_;
}
inline void TrackerHitZCylinder::set_drphi(float value) {
    drphi_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.dRPhi)
}

// float dZ = 8;
inline void TrackerHitZCylinder::clear_dz() { dz_ = 0; }
inline float TrackerHitZCylinder::dz() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.dZ)
    return dz_;
}
inline void TrackerHitZCylinder::set_dz(float value) {
    dz_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.dZ)
}

// float EDep = 9;
inline void TrackerHitZCylinder::clear_edep() { edep_ = 0; }
inline float TrackerHitZCylinder::edep() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.EDep)
    return edep_;
}
inline void TrackerHitZCylinder::set_edep(float value) {
    edep_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.EDep)
}

// float EDepErr = 10;
inline void TrackerHitZCylinder::clear_edeperr() { edeperr_ = 0; }
inline float TrackerHitZCylinder::edeperr() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.EDepErr)
    return edeperr_;
}
inline void TrackerHitZCylinder::set_edeperr(float value) {
    edeperr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.EDepErr)
}

// float time = 11;
inline void TrackerHitZCylinder::clear_time() { time_ = 0; }
inline float TrackerHitZCylinder::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.time)
    return time_;
}
inline void TrackerHitZCylinder::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.time)
}

// int32 quality = 12;
inline void TrackerHitZCylinder::clear_quality() { quality_ = 0; }
inline ::google::protobuf::int32 TrackerHitZCylinder::quality() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.quality)
    return quality_;
}
inline void TrackerHitZCylinder::set_quality(::google::protobuf::int32 value) {
    quality_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.quality)
}

// repeated .eicio.model.Reference rawHits = 13;
inline int TrackerHitZCylinder::rawhits_size() const { return rawhits_.size(); }
inline void TrackerHitZCylinder::clear_rawhits() { rawhits_.Clear(); }
inline const ::eicio::model::Reference& TrackerHitZCylinder::rawhits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.rawHits)
    return rawhits_.Get(index);
}
inline ::eicio::model::Reference* TrackerHitZCylinder::mutable_rawhits(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitZCylinder.rawHits)
    return rawhits_.Mutable(index);
}
inline ::eicio::model::Reference* TrackerHitZCylinder::add_rawhits() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitZCylinder.rawHits)
    return rawhits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>*
TrackerHitZCylinder::mutable_rawhits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitZCylinder.rawHits)
    return &rawhits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& TrackerHitZCylinder::rawhits()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitZCylinder.rawHits)
    return rawhits_;
}

// -------------------------------------------------------------------

// TrackerHitZCylinderCollection

// uint32 id = 1;
inline void TrackerHitZCylinderCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackerHitZCylinderCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinderCollection.id)
    return id_;
}
inline void TrackerHitZCylinderCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinderCollection.id)
}

// uint32 flags = 2;
inline void TrackerHitZCylinderCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 TrackerHitZCylinderCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinderCollection.flags)
    return flags_;
}
inline void TrackerHitZCylinderCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinderCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool TrackerHitZCylinderCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerHitZCylinderCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& TrackerHitZCylinderCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinderCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* TrackerHitZCylinderCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitZCylinderCollection.params)
    return params_;
}
inline ::eicio::model::Params* TrackerHitZCylinderCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerHitZCylinderCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void TrackerHitZCylinderCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerHitZCylinderCollection.params)
}

// repeated .eicio.model.TrackerHitZCylinder entries = 4;
inline int TrackerHitZCylinderCollection::entries_size() const { return entries_.size(); }
inline void TrackerHitZCylinderCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::TrackerHitZCylinder& TrackerHitZCylinderCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinderCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::TrackerHitZCylinder* TrackerHitZCylinderCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitZCylinderCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::TrackerHitZCylinder* TrackerHitZCylinderCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitZCylinderCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitZCylinder>*
TrackerHitZCylinderCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitZCylinderCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitZCylinder>&
TrackerHitZCylinderCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitZCylinderCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// Track_TrackState

// int32 loc = 1;
inline void Track_TrackState::clear_loc() { loc_ = 0; }
inline ::google::protobuf::int32 Track_TrackState::loc() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.loc)
    return loc_;
}
inline void Track_TrackState::set_loc(::google::protobuf::int32 value) {
    loc_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.loc)
}

// float d0 = 2;
inline void Track_TrackState::clear_d0() { d0_ = 0; }
inline float Track_TrackState::d0() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.d0)
    return d0_;
}
inline void Track_TrackState::set_d0(float value) {
    d0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.d0)
}

// float phi = 3;
inline void Track_TrackState::clear_phi() { phi_ = 0; }
inline float Track_TrackState::phi() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.phi)
    return phi_;
}
inline void Track_TrackState::set_phi(float value) {
    phi_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.phi)
}

// float omega = 4;
inline void Track_TrackState::clear_omega() { omega_ = 0; }
inline float Track_TrackState::omega() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.omega)
    return omega_;
}
inline void Track_TrackState::set_omega(float value) {
    omega_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.omega)
}

// float z0 = 5;
inline void Track_TrackState::clear_z0() { z0_ = 0; }
inline float Track_TrackState::z0() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.z0)
    return z0_;
}
inline void Track_TrackState::set_z0(float value) {
    z0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.z0)
}

// float tanL = 6;
inline void Track_TrackState::clear_tanl() { tanl_ = 0; }
inline float Track_TrackState::tanl() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.tanL)
    return tanl_;
}
inline void Track_TrackState::set_tanl(float value) {
    tanl_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.tanL)
}

// repeated float cov = 7;
inline int Track_TrackState::cov_size() const { return cov_.size(); }
inline void Track_TrackState::clear_cov() { cov_.Clear(); }
inline float Track_TrackState::cov(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.cov)
    return cov_.Get(index);
}
inline void Track_TrackState::set_cov(int index, float value) {
    cov_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.cov)
}
inline void Track_TrackState::add_cov(float value) {
    cov_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Track.TrackState.cov)
}
inline const ::google::protobuf::RepeatedField<float>& Track_TrackState::cov() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.TrackState.cov)
    return cov_;
}
inline ::google::protobuf::RepeatedField<float>* Track_TrackState::mutable_cov() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.TrackState.cov)
    return &cov_;
}

// repeated float ref = 8;
inline int Track_TrackState::ref_size() const { return ref_.size(); }
inline void Track_TrackState::clear_ref() { ref_.Clear(); }
inline float Track_TrackState::ref(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.ref)
    return ref_.Get(index);
}
inline void Track_TrackState::set_ref(int index, float value) {
    ref_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.ref)
}
inline void Track_TrackState::add_ref(float value) {
    ref_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Track.TrackState.ref)
}
inline const ::google::protobuf::RepeatedField<float>& Track_TrackState::ref() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.TrackState.ref)
    return ref_;
}
inline ::google::protobuf::RepeatedField<float>* Track_TrackState::mutable_ref() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.TrackState.ref)
    return &ref_;
}

// -------------------------------------------------------------------

// Track

// uint32 id = 1;
inline void Track::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 Track::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.id)
    return id_;
}
inline void Track::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.id)
}

// int32 type = 2;
inline void Track::clear_type() { type_ = 0; }
inline ::google::protobuf::int32 Track::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.type)
    return type_;
}
inline void Track::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.type)
}

// float chi2 = 3;
inline void Track::clear_chi2() { chi2_ = 0; }
inline float Track::chi2() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.chi2)
    return chi2_;
}
inline void Track::set_chi2(float value) {
    chi2_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.chi2)
}

// int32 NDF = 4;
inline void Track::clear_ndf() { ndf_ = 0; }
inline ::google::protobuf::int32 Track::ndf() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.NDF)
    return ndf_;
}
inline void Track::set_ndf(::google::protobuf::int32 value) {
    ndf_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.NDF)
}

// float dEdx = 5;
inline void Track::clear_dedx() { dedx_ = 0; }
inline float Track::dedx() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.dEdx)
    return dedx_;
}
inline void Track::set_dedx(float value) {
    dedx_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.dEdx)
}

// float dEdxErr = 6;
inline void Track::clear_dedxerr() { dedxerr_ = 0; }
inline float Track::dedxerr() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.dEdxErr)
    return dedxerr_;
}
inline void Track::set_dedxerr(float value) {
    dedxerr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.dEdxErr)
}

// float radius = 7;
inline void Track::clear_radius() { radius_ = 0; }
inline float Track::radius() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.radius)
    return radius_;
}
inline void Track::set_radius(float value) {
    radius_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.radius)
}

// repeated int32 subDetHits = 8;
inline int Track::subdethits_size() const { return subdethits_.size(); }
inline void Track::clear_subdethits() { subdethits_.Clear(); }
inline ::google::protobuf::int32 Track::subdethits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.subDetHits)
    return subdethits_.Get(index);
}
inline void Track::set_subdethits(int index, ::google::protobuf::int32 value) {
    subdethits_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Track.subDetHits)
}
inline void Track::add_subdethits(::google::protobuf::int32 value) {
    subdethits_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Track.subDetHits)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32>& Track::subdethits() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.subDetHits)
    return subdethits_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32>* Track::mutable_subdethits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.subDetHits)
    return &subdethits_;
}

// repeated .eicio.model.Track.TrackState states = 9;
inline int Track::states_size() const { return states_.size(); }
inline void Track::clear_states() { states_.Clear(); }
inline const ::eicio::model::Track_TrackState& Track::states(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.states)
    return states_.Get(index);
}
inline ::eicio::model::Track_TrackState* Track::mutable_states(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Track.states)
    return states_.Mutable(index);
}
inline ::eicio::model::Track_TrackState* Track::add_states() {
    // @@protoc_insertion_point(field_add:eicio.model.Track.states)
    return states_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Track_TrackState>* Track::mutable_states() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.states)
    return &states_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Track_TrackState>& Track::states() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.states)
    return states_;
}

// repeated .eicio.model.Reference hits = 10;
inline int Track::hits_size() const { return hits_.size(); }
inline void Track::clear_hits() { hits_.Clear(); }
inline const ::eicio::model::Reference& Track::hits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.hits)
    return hits_.Get(index);
}
inline ::eicio::model::Reference* Track::mutable_hits(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Track.hits)
    return hits_.Mutable(index);
}
inline ::eicio::model::Reference* Track::add_hits() {
    // @@protoc_insertion_point(field_add:eicio.model.Track.hits)
    return hits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* Track::mutable_hits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.hits)
    return &hits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& Track::hits() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.hits)
    return hits_;
}

// repeated .eicio.model.Reference tracks = 11;
inline int Track::tracks_size() const { return tracks_.size(); }
inline void Track::clear_tracks() { tracks_.Clear(); }
inline const ::eicio::model::Reference& Track::tracks(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.tracks)
    return tracks_.Get(index);
}
inline ::eicio::model::Reference* Track::mutable_tracks(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Track.tracks)
    return tracks_.Mutable(index);
}
inline ::eicio::model::Reference* Track::add_tracks() {
    // @@protoc_insertion_point(field_add:eicio.model.Track.tracks)
    return tracks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* Track::mutable_tracks() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.tracks)
    return &tracks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& Track::tracks() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.tracks)
    return tracks_;
}

// -------------------------------------------------------------------

// TrackCollection

// uint32 id = 1;
inline void TrackCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 TrackCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackCollection.id)
    return id_;
}
inline void TrackCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackCollection.id)
}

// uint32 flags = 2;
inline void TrackCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 TrackCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackCollection.flags)
    return flags_;
}
inline void TrackCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool TrackCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void TrackCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& TrackCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* TrackCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackCollection.params)
    return params_;
}
inline ::eicio::model::Params* TrackCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void TrackCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackCollection.params)
}

// repeated .eicio.model.Track entries = 4;
inline int TrackCollection::entries_size() const { return entries_.size(); }
inline void TrackCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::Track& TrackCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::Track* TrackCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::Track* TrackCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Track>* TrackCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Track>& TrackCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// SimCalorimeterHit_Contrib

// .eicio.model.Reference MCParticle = 1;
inline bool SimCalorimeterHit_Contrib::has_mcparticle() const {
    return this != internal_default_instance() && mcparticle_ != NULL;
}
inline void SimCalorimeterHit_Contrib::clear_mcparticle() {
    if (GetArenaNoVirtual() == NULL && mcparticle_ != NULL) delete mcparticle_;
    mcparticle_ = NULL;
}
inline const ::eicio::model::Reference& SimCalorimeterHit_Contrib::mcparticle() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.Contrib.MCParticle)
    return mcparticle_ != NULL ? *mcparticle_ : *::eicio::model::Reference::internal_default_instance();
}
inline ::eicio::model::Reference* SimCalorimeterHit_Contrib::mutable_mcparticle() {
    if (mcparticle_ == NULL) {
        mcparticle_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.SimCalorimeterHit.Contrib.MCParticle)
    return mcparticle_;
}
inline ::eicio::model::Reference* SimCalorimeterHit_Contrib::release_mcparticle() {
    // @@protoc_insertion_point(field_release:eicio.model.SimCalorimeterHit.Contrib.MCParticle)

    ::eicio::model::Reference* temp = mcparticle_;
    mcparticle_ = NULL;
    return temp;
}
inline void SimCalorimeterHit_Contrib::set_allocated_mcparticle(::eicio::model::Reference* mcparticle) {
    delete mcparticle_;
    mcparticle_ = mcparticle;
    if (mcparticle) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.SimCalorimeterHit.Contrib.MCParticle)
}

// float energy = 2;
inline void SimCalorimeterHit_Contrib::clear_energy() { energy_ = 0; }
inline float SimCalorimeterHit_Contrib::energy() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.Contrib.energy)
    return energy_;
}
inline void SimCalorimeterHit_Contrib::set_energy(float value) {
    energy_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.Contrib.energy)
}

// float time = 3;
inline void SimCalorimeterHit_Contrib::clear_time() { time_ = 0; }
inline float SimCalorimeterHit_Contrib::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.Contrib.time)
    return time_;
}
inline void SimCalorimeterHit_Contrib::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.Contrib.time)
}

// int32 PDG = 4;
inline void SimCalorimeterHit_Contrib::clear_pdg() { pdg_ = 0; }
inline ::google::protobuf::int32 SimCalorimeterHit_Contrib::pdg() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.Contrib.PDG)
    return pdg_;
}
inline void SimCalorimeterHit_Contrib::set_pdg(::google::protobuf::int32 value) {
    pdg_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.Contrib.PDG)
}

// repeated float stepPos = 5;
inline int SimCalorimeterHit_Contrib::steppos_size() const { return steppos_.size(); }
inline void SimCalorimeterHit_Contrib::clear_steppos() { steppos_.Clear(); }
inline float SimCalorimeterHit_Contrib::steppos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.Contrib.stepPos)
    return steppos_.Get(index);
}
inline void SimCalorimeterHit_Contrib::set_steppos(int index, float value) {
    steppos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.Contrib.stepPos)
}
inline void SimCalorimeterHit_Contrib::add_steppos(float value) {
    steppos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.SimCalorimeterHit.Contrib.stepPos)
}
inline const ::google::protobuf::RepeatedField<float>& SimCalorimeterHit_Contrib::steppos() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimCalorimeterHit.Contrib.stepPos)
    return steppos_;
}
inline ::google::protobuf::RepeatedField<float>* SimCalorimeterHit_Contrib::mutable_steppos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimCalorimeterHit.Contrib.stepPos)
    return &steppos_;
}

// -------------------------------------------------------------------

// SimCalorimeterHit

// uint32 id = 1;
inline void SimCalorimeterHit::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 SimCalorimeterHit::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.id)
    return id_;
}
inline void SimCalorimeterHit::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.id)
}

// .eicio.model.Params params = 2;
inline bool SimCalorimeterHit::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void SimCalorimeterHit::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& SimCalorimeterHit::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* SimCalorimeterHit::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.SimCalorimeterHit.params)
    return params_;
}
inline ::eicio::model::Params* SimCalorimeterHit::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.SimCalorimeterHit.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void SimCalorimeterHit::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.SimCalorimeterHit.params)
}

// int32 cellID0 = 3;
inline void SimCalorimeterHit::clear_cellid0() { cellid0_ = 0; }
inline ::google::protobuf::int32 SimCalorimeterHit::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.cellID0)
    return cellid0_;
}
inline void SimCalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.cellID0)
}

// int32 cellID1 = 4;
inline void SimCalorimeterHit::clear_cellid1() { cellid1_ = 0; }
inline ::google::protobuf::int32 SimCalorimeterHit::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.cellID1)
    return cellid1_;
}
inline void SimCalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.cellID1)
}

// float energy = 5;
inline void SimCalorimeterHit::clear_energy() { energy_ = 0; }
inline float SimCalorimeterHit::energy() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.energy)
    return energy_;
}
inline void SimCalorimeterHit::set_energy(float value) {
    energy_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.energy)
}

// repeated float pos = 6;
inline int SimCalorimeterHit::pos_size() const { return pos_.size(); }
inline void SimCalorimeterHit::clear_pos() { pos_.Clear(); }
inline float SimCalorimeterHit::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.pos)
    return pos_.Get(index);
}
inline void SimCalorimeterHit::set_pos(int index, float value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.pos)
}
inline void SimCalorimeterHit::add_pos(float value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.SimCalorimeterHit.pos)
}
inline const ::google::protobuf::RepeatedField<float>& SimCalorimeterHit::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimCalorimeterHit.pos)
    return pos_;
}
inline ::google::protobuf::RepeatedField<float>* SimCalorimeterHit::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimCalorimeterHit.pos)
    return &pos_;
}

// repeated .eicio.model.SimCalorimeterHit.Contrib contributions = 7;
inline int SimCalorimeterHit::contributions_size() const { return contributions_.size(); }
inline void SimCalorimeterHit::clear_contributions() { contributions_.Clear(); }
inline const ::eicio::model::SimCalorimeterHit_Contrib& SimCalorimeterHit::contributions(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.contributions)
    return contributions_.Get(index);
}
inline ::eicio::model::SimCalorimeterHit_Contrib* SimCalorimeterHit::mutable_contributions(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.SimCalorimeterHit.contributions)
    return contributions_.Mutable(index);
}
inline ::eicio::model::SimCalorimeterHit_Contrib* SimCalorimeterHit::add_contributions() {
    // @@protoc_insertion_point(field_add:eicio.model.SimCalorimeterHit.contributions)
    return contributions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit_Contrib>*
SimCalorimeterHit::mutable_contributions() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimCalorimeterHit.contributions)
    return &contributions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit_Contrib>&
SimCalorimeterHit::contributions() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimCalorimeterHit.contributions)
    return contributions_;
}

// -------------------------------------------------------------------

// SimCalorimeterHitCollection

// uint32 id = 1;
inline void SimCalorimeterHitCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 SimCalorimeterHitCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHitCollection.id)
    return id_;
}
inline void SimCalorimeterHitCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHitCollection.id)
}

// uint32 flags = 2;
inline void SimCalorimeterHitCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 SimCalorimeterHitCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHitCollection.flags)
    return flags_;
}
inline void SimCalorimeterHitCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHitCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool SimCalorimeterHitCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void SimCalorimeterHitCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& SimCalorimeterHitCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHitCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* SimCalorimeterHitCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.SimCalorimeterHitCollection.params)
    return params_;
}
inline ::eicio::model::Params* SimCalorimeterHitCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.SimCalorimeterHitCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void SimCalorimeterHitCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.SimCalorimeterHitCollection.params)
}

// repeated .eicio.model.SimCalorimeterHit entries = 4;
inline int SimCalorimeterHitCollection::entries_size() const { return entries_.size(); }
inline void SimCalorimeterHitCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::SimCalorimeterHit& SimCalorimeterHitCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHitCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::SimCalorimeterHit* SimCalorimeterHitCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.SimCalorimeterHitCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::SimCalorimeterHit* SimCalorimeterHitCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.SimCalorimeterHitCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit>*
SimCalorimeterHitCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimCalorimeterHitCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit>&
SimCalorimeterHitCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimCalorimeterHitCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// RawCalorimeterHit

// uint32 id = 1;
inline void RawCalorimeterHit::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 RawCalorimeterHit::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHit.id)
    return id_;
}
inline void RawCalorimeterHit::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHit.id)
}

// int32 cellID0 = 2;
inline void RawCalorimeterHit::clear_cellid0() { cellid0_ = 0; }
inline ::google::protobuf::int32 RawCalorimeterHit::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHit.cellID0)
    return cellid0_;
}
inline void RawCalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHit.cellID0)
}

// int32 cellID1 = 3;
inline void RawCalorimeterHit::clear_cellid1() { cellid1_ = 0; }
inline ::google::protobuf::int32 RawCalorimeterHit::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHit.cellID1)
    return cellid1_;
}
inline void RawCalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHit.cellID1)
}

// int32 amplitude = 4;
inline void RawCalorimeterHit::clear_amplitude() { amplitude_ = 0; }
inline ::google::protobuf::int32 RawCalorimeterHit::amplitude() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHit.amplitude)
    return amplitude_;
}
inline void RawCalorimeterHit::set_amplitude(::google::protobuf::int32 value) {
    amplitude_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHit.amplitude)
}

// int32 timeStamp = 5;
inline void RawCalorimeterHit::clear_timestamp() { timestamp_ = 0; }
inline ::google::protobuf::int32 RawCalorimeterHit::timestamp() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHit.timeStamp)
    return timestamp_;
}
inline void RawCalorimeterHit::set_timestamp(::google::protobuf::int32 value) {
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHit.timeStamp)
}

// -------------------------------------------------------------------

// RawCalorimeterHitCollection

// uint32 id = 1;
inline void RawCalorimeterHitCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 RawCalorimeterHitCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHitCollection.id)
    return id_;
}
inline void RawCalorimeterHitCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHitCollection.id)
}

// uint32 flags = 2;
inline void RawCalorimeterHitCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 RawCalorimeterHitCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHitCollection.flags)
    return flags_;
}
inline void RawCalorimeterHitCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHitCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool RawCalorimeterHitCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void RawCalorimeterHitCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& RawCalorimeterHitCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHitCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* RawCalorimeterHitCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.RawCalorimeterHitCollection.params)
    return params_;
}
inline ::eicio::model::Params* RawCalorimeterHitCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.RawCalorimeterHitCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void RawCalorimeterHitCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.RawCalorimeterHitCollection.params)
}

// repeated .eicio.model.RawCalorimeterHit entries = 4;
inline int RawCalorimeterHitCollection::entries_size() const { return entries_.size(); }
inline void RawCalorimeterHitCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::RawCalorimeterHit& RawCalorimeterHitCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHitCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::RawCalorimeterHit* RawCalorimeterHitCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RawCalorimeterHitCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::RawCalorimeterHit* RawCalorimeterHitCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.RawCalorimeterHitCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::RawCalorimeterHit>*
RawCalorimeterHitCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RawCalorimeterHitCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::RawCalorimeterHit>&
RawCalorimeterHitCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.RawCalorimeterHitCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// CalorimeterHit

// uint32 id = 1;
inline void CalorimeterHit::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 CalorimeterHit::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.id)
    return id_;
}
inline void CalorimeterHit::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.id)
}

// int32 cellID0 = 2;
inline void CalorimeterHit::clear_cellid0() { cellid0_ = 0; }
inline ::google::protobuf::int32 CalorimeterHit::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.cellID0)
    return cellid0_;
}
inline void CalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.cellID0)
}

// int32 cellID1 = 3;
inline void CalorimeterHit::clear_cellid1() { cellid1_ = 0; }
inline ::google::protobuf::int32 CalorimeterHit::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.cellID1)
    return cellid1_;
}
inline void CalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.cellID1)
}

// float energy = 4;
inline void CalorimeterHit::clear_energy() { energy_ = 0; }
inline float CalorimeterHit::energy() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.energy)
    return energy_;
}
inline void CalorimeterHit::set_energy(float value) {
    energy_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.energy)
}

// float energyErr = 5;
inline void CalorimeterHit::clear_energyerr() { energyerr_ = 0; }
inline float CalorimeterHit::energyerr() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.energyErr)
    return energyerr_;
}
inline void CalorimeterHit::set_energyerr(float value) {
    energyerr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.energyErr)
}

// float time = 6;
inline void CalorimeterHit::clear_time() { time_ = 0; }
inline float CalorimeterHit::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.time)
    return time_;
}
inline void CalorimeterHit::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.time)
}

// repeated float pos = 7;
inline int CalorimeterHit::pos_size() const { return pos_.size(); }
inline void CalorimeterHit::clear_pos() { pos_.Clear(); }
inline float CalorimeterHit::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.pos)
    return pos_.Get(index);
}
inline void CalorimeterHit::set_pos(int index, float value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.pos)
}
inline void CalorimeterHit::add_pos(float value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.CalorimeterHit.pos)
}
inline const ::google::protobuf::RepeatedField<float>& CalorimeterHit::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.CalorimeterHit.pos)
    return pos_;
}
inline ::google::protobuf::RepeatedField<float>* CalorimeterHit::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.CalorimeterHit.pos)
    return &pos_;
}

// int32 type = 8;
inline void CalorimeterHit::clear_type() { type_ = 0; }
inline ::google::protobuf::int32 CalorimeterHit::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.type)
    return type_;
}
inline void CalorimeterHit::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.type)
}

// .eicio.model.Reference raw = 9;
inline bool CalorimeterHit::has_raw() const { return this != internal_default_instance() && raw_ != NULL; }
inline void CalorimeterHit::clear_raw() {
    if (GetArenaNoVirtual() == NULL && raw_ != NULL) delete raw_;
    raw_ = NULL;
}
inline const ::eicio::model::Reference& CalorimeterHit::raw() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.raw)
    return raw_ != NULL ? *raw_ : *::eicio::model::Reference::internal_default_instance();
}
inline ::eicio::model::Reference* CalorimeterHit::mutable_raw() {
    if (raw_ == NULL) {
        raw_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.CalorimeterHit.raw)
    return raw_;
}
inline ::eicio::model::Reference* CalorimeterHit::release_raw() {
    // @@protoc_insertion_point(field_release:eicio.model.CalorimeterHit.raw)

    ::eicio::model::Reference* temp = raw_;
    raw_ = NULL;
    return temp;
}
inline void CalorimeterHit::set_allocated_raw(::eicio::model::Reference* raw) {
    delete raw_;
    raw_ = raw;
    if (raw) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.CalorimeterHit.raw)
}

// -------------------------------------------------------------------

// CalorimeterHitCollection

// uint32 id = 1;
inline void CalorimeterHitCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 CalorimeterHitCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHitCollection.id)
    return id_;
}
inline void CalorimeterHitCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHitCollection.id)
}

// uint32 flags = 2;
inline void CalorimeterHitCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 CalorimeterHitCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHitCollection.flags)
    return flags_;
}
inline void CalorimeterHitCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHitCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool CalorimeterHitCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void CalorimeterHitCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& CalorimeterHitCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHitCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* CalorimeterHitCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.CalorimeterHitCollection.params)
    return params_;
}
inline ::eicio::model::Params* CalorimeterHitCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.CalorimeterHitCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void CalorimeterHitCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.CalorimeterHitCollection.params)
}

// repeated .eicio.model.CalorimeterHit entries = 4;
inline int CalorimeterHitCollection::entries_size() const { return entries_.size(); }
inline void CalorimeterHitCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::CalorimeterHit& CalorimeterHitCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHitCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::CalorimeterHit* CalorimeterHitCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.CalorimeterHitCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::CalorimeterHit* CalorimeterHitCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.CalorimeterHitCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::CalorimeterHit>*
CalorimeterHitCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.CalorimeterHitCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::CalorimeterHit>&
CalorimeterHitCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.CalorimeterHitCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// Cluster

// uint32 id = 1;
inline void Cluster::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 Cluster::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.id)
    return id_;
}
inline void Cluster::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.id)
}

// int32 type = 2;
inline void Cluster::clear_type() { type_ = 0; }
inline ::google::protobuf::int32 Cluster::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.type)
    return type_;
}
inline void Cluster::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.type)
}

// float energy = 3;
inline void Cluster::clear_energy() { energy_ = 0; }
inline float Cluster::energy() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.energy)
    return energy_;
}
inline void Cluster::set_energy(float value) {
    energy_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.energy)
}

// float energyErr = 4;
inline void Cluster::clear_energyerr() { energyerr_ = 0; }
inline float Cluster::energyerr() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.energyErr)
    return energyerr_;
}
inline void Cluster::set_energyerr(float value) {
    energyerr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.energyErr)
}

// repeated float pos = 5;
inline int Cluster::pos_size() const { return pos_.size(); }
inline void Cluster::clear_pos() { pos_.Clear(); }
inline float Cluster::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.pos)
    return pos_.Get(index);
}
inline void Cluster::set_pos(int index, float value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.pos)
}
inline void Cluster::add_pos(float value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.pos)
}
inline const ::google::protobuf::RepeatedField<float>& Cluster::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.pos)
    return pos_;
}
inline ::google::protobuf::RepeatedField<float>* Cluster::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.pos)
    return &pos_;
}

// repeated float posErr = 6;
inline int Cluster::poserr_size() const { return poserr_.size(); }
inline void Cluster::clear_poserr() { poserr_.Clear(); }
inline float Cluster::poserr(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.posErr)
    return poserr_.Get(index);
}
inline void Cluster::set_poserr(int index, float value) {
    poserr_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.posErr)
}
inline void Cluster::add_poserr(float value) {
    poserr_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.posErr)
}
inline const ::google::protobuf::RepeatedField<float>& Cluster::poserr() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.posErr)
    return poserr_;
}
inline ::google::protobuf::RepeatedField<float>* Cluster::mutable_poserr() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.posErr)
    return &poserr_;
}

// float theta = 7;
inline void Cluster::clear_theta() { theta_ = 0; }
inline float Cluster::theta() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.theta)
    return theta_;
}
inline void Cluster::set_theta(float value) {
    theta_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.theta)
}

// float phi = 8;
inline void Cluster::clear_phi() { phi_ = 0; }
inline float Cluster::phi() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.phi)
    return phi_;
}
inline void Cluster::set_phi(float value) {
    phi_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.phi)
}

// repeated float dirErr = 9;
inline int Cluster::direrr_size() const { return direrr_.size(); }
inline void Cluster::clear_direrr() { direrr_.Clear(); }
inline float Cluster::direrr(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.dirErr)
    return direrr_.Get(index);
}
inline void Cluster::set_direrr(int index, float value) {
    direrr_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.dirErr)
}
inline void Cluster::add_direrr(float value) {
    direrr_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.dirErr)
}
inline const ::google::protobuf::RepeatedField<float>& Cluster::direrr() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.dirErr)
    return direrr_;
}
inline ::google::protobuf::RepeatedField<float>* Cluster::mutable_direrr() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.dirErr)
    return &direrr_;
}

// repeated float shape = 10;
inline int Cluster::shape_size() const { return shape_.size(); }
inline void Cluster::clear_shape() { shape_.Clear(); }
inline float Cluster::shape(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.shape)
    return shape_.Get(index);
}
inline void Cluster::set_shape(int index, float value) {
    shape_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.shape)
}
inline void Cluster::add_shape(float value) {
    shape_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.shape)
}
inline const ::google::protobuf::RepeatedField<float>& Cluster::shape() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.shape)
    return shape_;
}
inline ::google::protobuf::RepeatedField<float>* Cluster::mutable_shape() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.shape)
    return &shape_;
}

// repeated .eicio.model.ParticleID PIDs = 11;
inline int Cluster::pids_size() const { return pids_.size(); }
inline void Cluster::clear_pids() { pids_.Clear(); }
inline const ::eicio::model::ParticleID& Cluster::pids(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.PIDs)
    return pids_.Get(index);
}
inline ::eicio::model::ParticleID* Cluster::mutable_pids(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Cluster.PIDs)
    return pids_.Mutable(index);
}
inline ::eicio::model::ParticleID* Cluster::add_pids() {
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.PIDs)
    return pids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>* Cluster::mutable_pids() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.PIDs)
    return &pids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>& Cluster::pids() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.PIDs)
    return pids_;
}

// repeated .eicio.model.Reference clusters = 12;
inline int Cluster::clusters_size() const { return clusters_.size(); }
inline void Cluster::clear_clusters() { clusters_.Clear(); }
inline const ::eicio::model::Reference& Cluster::clusters(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.clusters)
    return clusters_.Get(index);
}
inline ::eicio::model::Reference* Cluster::mutable_clusters(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Cluster.clusters)
    return clusters_.Mutable(index);
}
inline ::eicio::model::Reference* Cluster::add_clusters() {
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.clusters)
    return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* Cluster::mutable_clusters() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.clusters)
    return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& Cluster::clusters() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.clusters)
    return clusters_;
}

// repeated .eicio.model.Reference hits = 13;
inline int Cluster::hits_size() const { return hits_.size(); }
inline void Cluster::clear_hits() { hits_.Clear(); }
inline const ::eicio::model::Reference& Cluster::hits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.hits)
    return hits_.Get(index);
}
inline ::eicio::model::Reference* Cluster::mutable_hits(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Cluster.hits)
    return hits_.Mutable(index);
}
inline ::eicio::model::Reference* Cluster::add_hits() {
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.hits)
    return hits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* Cluster::mutable_hits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.hits)
    return &hits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& Cluster::hits() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.hits)
    return hits_;
}

// repeated float weights = 14;
inline int Cluster::weights_size() const { return weights_.size(); }
inline void Cluster::clear_weights() { weights_.Clear(); }
inline float Cluster::weights(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.weights)
    return weights_.Get(index);
}
inline void Cluster::set_weights(int index, float value) {
    weights_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.weights)
}
inline void Cluster::add_weights(float value) {
    weights_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.weights)
}
inline const ::google::protobuf::RepeatedField<float>& Cluster::weights() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.weights)
    return weights_;
}
inline ::google::protobuf::RepeatedField<float>* Cluster::mutable_weights() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.weights)
    return &weights_;
}

// repeated float subDetEnes = 15;
inline int Cluster::subdetenes_size() const { return subdetenes_.size(); }
inline void Cluster::clear_subdetenes() { subdetenes_.Clear(); }
inline float Cluster::subdetenes(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.subDetEnes)
    return subdetenes_.Get(index);
}
inline void Cluster::set_subdetenes(int index, float value) {
    subdetenes_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.subDetEnes)
}
inline void Cluster::add_subdetenes(float value) {
    subdetenes_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.subDetEnes)
}
inline const ::google::protobuf::RepeatedField<float>& Cluster::subdetenes() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.subDetEnes)
    return subdetenes_;
}
inline ::google::protobuf::RepeatedField<float>* Cluster::mutable_subdetenes() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.subDetEnes)
    return &subdetenes_;
}

// -------------------------------------------------------------------

// ClusterCollection

// uint32 id = 1;
inline void ClusterCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 ClusterCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.ClusterCollection.id)
    return id_;
}
inline void ClusterCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ClusterCollection.id)
}

// uint32 flags = 2;
inline void ClusterCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 ClusterCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.ClusterCollection.flags)
    return flags_;
}
inline void ClusterCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ClusterCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool ClusterCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void ClusterCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& ClusterCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.ClusterCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* ClusterCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.ClusterCollection.params)
    return params_;
}
inline ::eicio::model::Params* ClusterCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.ClusterCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void ClusterCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.ClusterCollection.params)
}

// repeated .eicio.model.Cluster entries = 4;
inline int ClusterCollection::entries_size() const { return entries_.size(); }
inline void ClusterCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::Cluster& ClusterCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.ClusterCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::Cluster* ClusterCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.ClusterCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::Cluster* ClusterCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.ClusterCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Cluster>* ClusterCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.ClusterCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Cluster>& ClusterCollection::entries()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.ClusterCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// RecParticle

// uint32 id = 1;
inline void RecParticle::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 RecParticle::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.id)
    return id_;
}
inline void RecParticle::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.id)
}

// int32 type = 2;
inline void RecParticle::clear_type() { type_ = 0; }
inline ::google::protobuf::int32 RecParticle::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.type)
    return type_;
}
inline void RecParticle::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.type)
}

// repeated float p = 3;
inline int RecParticle::p_size() const { return p_.size(); }
inline void RecParticle::clear_p() { p_.Clear(); }
inline float RecParticle::p(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.p)
    return p_.Get(index);
}
inline void RecParticle::set_p(int index, float value) {
    p_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.p)
}
inline void RecParticle::add_p(float value) {
    p_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.p)
}
inline const ::google::protobuf::RepeatedField<float>& RecParticle::p() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.p)
    return p_;
}
inline ::google::protobuf::RepeatedField<float>* RecParticle::mutable_p() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.p)
    return &p_;
}

// float energy = 4;
inline void RecParticle::clear_energy() { energy_ = 0; }
inline float RecParticle::energy() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.energy)
    return energy_;
}
inline void RecParticle::set_energy(float value) {
    energy_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.energy)
}

// repeated float cov = 5;
inline int RecParticle::cov_size() const { return cov_.size(); }
inline void RecParticle::clear_cov() { cov_.Clear(); }
inline float RecParticle::cov(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.cov)
    return cov_.Get(index);
}
inline void RecParticle::set_cov(int index, float value) {
    cov_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.cov)
}
inline void RecParticle::add_cov(float value) {
    cov_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.cov)
}
inline const ::google::protobuf::RepeatedField<float>& RecParticle::cov() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.cov)
    return cov_;
}
inline ::google::protobuf::RepeatedField<float>* RecParticle::mutable_cov() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.cov)
    return &cov_;
}

// float mass = 6;
inline void RecParticle::clear_mass() { mass_ = 0; }
inline float RecParticle::mass() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.mass)
    return mass_;
}
inline void RecParticle::set_mass(float value) {
    mass_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.mass)
}

// float charge = 7;
inline void RecParticle::clear_charge() { charge_ = 0; }
inline float RecParticle::charge() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.charge)
    return charge_;
}
inline void RecParticle::set_charge(float value) {
    charge_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.charge)
}

// repeated float ref = 8;
inline int RecParticle::ref_size() const { return ref_.size(); }
inline void RecParticle::clear_ref() { ref_.Clear(); }
inline float RecParticle::ref(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.ref)
    return ref_.Get(index);
}
inline void RecParticle::set_ref(int index, float value) {
    ref_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.ref)
}
inline void RecParticle::add_ref(float value) {
    ref_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.ref)
}
inline const ::google::protobuf::RepeatedField<float>& RecParticle::ref() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.ref)
    return ref_;
}
inline ::google::protobuf::RepeatedField<float>* RecParticle::mutable_ref() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.ref)
    return &ref_;
}

// repeated .eicio.model.ParticleID PIDs = 9;
inline int RecParticle::pids_size() const { return pids_.size(); }
inline void RecParticle::clear_pids() { pids_.Clear(); }
inline const ::eicio::model::ParticleID& RecParticle::pids(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.PIDs)
    return pids_.Get(index);
}
inline ::eicio::model::ParticleID* RecParticle::mutable_pids(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticle.PIDs)
    return pids_.Mutable(index);
}
inline ::eicio::model::ParticleID* RecParticle::add_pids() {
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.PIDs)
    return pids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>* RecParticle::mutable_pids() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.PIDs)
    return &pids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>& RecParticle::pids() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.PIDs)
    return pids_;
}

// int32 PIDUsed = 10;
inline void RecParticle::clear_pidused() { pidused_ = 0; }
inline ::google::protobuf::int32 RecParticle::pidused() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.PIDUsed)
    return pidused_;
}
inline void RecParticle::set_pidused(::google::protobuf::int32 value) {
    pidused_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.PIDUsed)
}

// float goodnessOfPID = 11;
inline void RecParticle::clear_goodnessofpid() { goodnessofpid_ = 0; }
inline float RecParticle::goodnessofpid() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.goodnessOfPID)
    return goodnessofpid_;
}
inline void RecParticle::set_goodnessofpid(float value) {
    goodnessofpid_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.goodnessOfPID)
}

// repeated .eicio.model.Reference recs = 12;
inline int RecParticle::recs_size() const { return recs_.size(); }
inline void RecParticle::clear_recs() { recs_.Clear(); }
inline const ::eicio::model::Reference& RecParticle::recs(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.recs)
    return recs_.Get(index);
}
inline ::eicio::model::Reference* RecParticle::mutable_recs(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticle.recs)
    return recs_.Mutable(index);
}
inline ::eicio::model::Reference* RecParticle::add_recs() {
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.recs)
    return recs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* RecParticle::mutable_recs() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.recs)
    return &recs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& RecParticle::recs() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.recs)
    return recs_;
}

// repeated .eicio.model.Reference tracks = 13;
inline int RecParticle::tracks_size() const { return tracks_.size(); }
inline void RecParticle::clear_tracks() { tracks_.Clear(); }
inline const ::eicio::model::Reference& RecParticle::tracks(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.tracks)
    return tracks_.Get(index);
}
inline ::eicio::model::Reference* RecParticle::mutable_tracks(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticle.tracks)
    return tracks_.Mutable(index);
}
inline ::eicio::model::Reference* RecParticle::add_tracks() {
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.tracks)
    return tracks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* RecParticle::mutable_tracks() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.tracks)
    return &tracks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& RecParticle::tracks() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.tracks)
    return tracks_;
}

// repeated .eicio.model.Reference clusters = 14;
inline int RecParticle::clusters_size() const { return clusters_.size(); }
inline void RecParticle::clear_clusters() { clusters_.Clear(); }
inline const ::eicio::model::Reference& RecParticle::clusters(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.clusters)
    return clusters_.Get(index);
}
inline ::eicio::model::Reference* RecParticle::mutable_clusters(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticle.clusters)
    return clusters_.Mutable(index);
}
inline ::eicio::model::Reference* RecParticle::add_clusters() {
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.clusters)
    return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* RecParticle::mutable_clusters() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.clusters)
    return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& RecParticle::clusters() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.clusters)
    return clusters_;
}

// .eicio.model.Reference startVtx = 15;
inline bool RecParticle::has_startvtx() const {
    return this != internal_default_instance() && startvtx_ != NULL;
}
inline void RecParticle::clear_startvtx() {
    if (GetArenaNoVirtual() == NULL && startvtx_ != NULL) delete startvtx_;
    startvtx_ = NULL;
}
inline const ::eicio::model::Reference& RecParticle::startvtx() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.startVtx)
    return startvtx_ != NULL ? *startvtx_ : *::eicio::model::Reference::internal_default_instance();
}
inline ::eicio::model::Reference* RecParticle::mutable_startvtx() {
    if (startvtx_ == NULL) {
        startvtx_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticle.startVtx)
    return startvtx_;
}
inline ::eicio::model::Reference* RecParticle::release_startvtx() {
    // @@protoc_insertion_point(field_release:eicio.model.RecParticle.startVtx)

    ::eicio::model::Reference* temp = startvtx_;
    startvtx_ = NULL;
    return temp;
}
inline void RecParticle::set_allocated_startvtx(::eicio::model::Reference* startvtx) {
    delete startvtx_;
    startvtx_ = startvtx;
    if (startvtx) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.RecParticle.startVtx)
}

// -------------------------------------------------------------------

// RecParticleCollection

// uint32 id = 1;
inline void RecParticleCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 RecParticleCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticleCollection.id)
    return id_;
}
inline void RecParticleCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticleCollection.id)
}

// uint32 flags = 2;
inline void RecParticleCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 RecParticleCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticleCollection.flags)
    return flags_;
}
inline void RecParticleCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticleCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool RecParticleCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void RecParticleCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& RecParticleCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticleCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* RecParticleCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticleCollection.params)
    return params_;
}
inline ::eicio::model::Params* RecParticleCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.RecParticleCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void RecParticleCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.RecParticleCollection.params)
}

// repeated .eicio.model.RecParticle entries = 4;
inline int RecParticleCollection::entries_size() const { return entries_.size(); }
inline void RecParticleCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::RecParticle& RecParticleCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticleCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::RecParticle* RecParticleCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticleCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::RecParticle* RecParticleCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.RecParticleCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::RecParticle>*
RecParticleCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticleCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::RecParticle>&
RecParticleCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticleCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// Vertex

// uint32 id = 1;
inline void Vertex::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 Vertex::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.id)
    return id_;
}
inline void Vertex::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.id)
}

// int32 primary = 2;
inline void Vertex::clear_primary() { primary_ = 0; }
inline ::google::protobuf::int32 Vertex::primary() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.primary)
    return primary_;
}
inline void Vertex::set_primary(::google::protobuf::int32 value) {
    primary_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.primary)
}

// int32 algType = 3;
inline void Vertex::clear_algtype() { algtype_ = 0; }
inline ::google::protobuf::int32 Vertex::algtype() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.algType)
    return algtype_;
}
inline void Vertex::set_algtype(::google::protobuf::int32 value) {
    algtype_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.algType)
}

// float chi2 = 4;
inline void Vertex::clear_chi2() { chi2_ = 0; }
inline float Vertex::chi2() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.chi2)
    return chi2_;
}
inline void Vertex::set_chi2(float value) {
    chi2_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.chi2)
}

// float prob = 5;
inline void Vertex::clear_prob() { prob_ = 0; }
inline float Vertex::prob() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.prob)
    return prob_;
}
inline void Vertex::set_prob(float value) {
    prob_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.prob)
}

// repeated float pos = 6;
inline int Vertex::pos_size() const { return pos_.size(); }
inline void Vertex::clear_pos() { pos_.Clear(); }
inline float Vertex::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.pos)
    return pos_.Get(index);
}
inline void Vertex::set_pos(int index, float value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.pos)
}
inline void Vertex::add_pos(float value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Vertex.pos)
}
inline const ::google::protobuf::RepeatedField<float>& Vertex::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.Vertex.pos)
    return pos_;
}
inline ::google::protobuf::RepeatedField<float>* Vertex::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Vertex.pos)
    return &pos_;
}

// repeated float cov = 7;
inline int Vertex::cov_size() const { return cov_.size(); }
inline void Vertex::clear_cov() { cov_.Clear(); }
inline float Vertex::cov(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.cov)
    return cov_.Get(index);
}
inline void Vertex::set_cov(int index, float value) {
    cov_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.cov)
}
inline void Vertex::add_cov(float value) {
    cov_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Vertex.cov)
}
inline const ::google::protobuf::RepeatedField<float>& Vertex::cov() const {
    // @@protoc_insertion_point(field_list:eicio.model.Vertex.cov)
    return cov_;
}
inline ::google::protobuf::RepeatedField<float>* Vertex::mutable_cov() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Vertex.cov)
    return &cov_;
}

// repeated float params = 8;
inline int Vertex::params_size() const { return params_.size(); }
inline void Vertex::clear_params() { params_.Clear(); }
inline float Vertex::params(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.params)
    return params_.Get(index);
}
inline void Vertex::set_params(int index, float value) {
    params_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.params)
}
inline void Vertex::add_params(float value) {
    params_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Vertex.params)
}
inline const ::google::protobuf::RepeatedField<float>& Vertex::params() const {
    // @@protoc_insertion_point(field_list:eicio.model.Vertex.params)
    return params_;
}
inline ::google::protobuf::RepeatedField<float>* Vertex::mutable_params() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Vertex.params)
    return &params_;
}

// .eicio.model.Reference recPart = 9;
inline bool Vertex::has_recpart() const { return this != internal_default_instance() && recpart_ != NULL; }
inline void Vertex::clear_recpart() {
    if (GetArenaNoVirtual() == NULL && recpart_ != NULL) delete recpart_;
    recpart_ = NULL;
}
inline const ::eicio::model::Reference& Vertex::recpart() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.recPart)
    return recpart_ != NULL ? *recpart_ : *::eicio::model::Reference::internal_default_instance();
}
inline ::eicio::model::Reference* Vertex::mutable_recpart() {
    if (recpart_ == NULL) {
        recpart_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.Vertex.recPart)
    return recpart_;
}
inline ::eicio::model::Reference* Vertex::release_recpart() {
    // @@protoc_insertion_point(field_release:eicio.model.Vertex.recPart)

    ::eicio::model::Reference* temp = recpart_;
    recpart_ = NULL;
    return temp;
}
inline void Vertex::set_allocated_recpart(::eicio::model::Reference* recpart) {
    delete recpart_;
    recpart_ = recpart;
    if (recpart) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.Vertex.recPart)
}

// -------------------------------------------------------------------

// VertexCollection

// uint32 id = 1;
inline void VertexCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 VertexCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.VertexCollection.id)
    return id_;
}
inline void VertexCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.VertexCollection.id)
}

// uint32 flags = 2;
inline void VertexCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 VertexCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.VertexCollection.flags)
    return flags_;
}
inline void VertexCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.VertexCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool VertexCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void VertexCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& VertexCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.VertexCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* VertexCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.VertexCollection.params)
    return params_;
}
inline ::eicio::model::Params* VertexCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.VertexCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void VertexCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.VertexCollection.params)
}

// repeated .eicio.model.Vertex entries = 4;
inline int VertexCollection::entries_size() const { return entries_.size(); }
inline void VertexCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::Vertex& VertexCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.VertexCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::Vertex* VertexCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.VertexCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::Vertex* VertexCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.VertexCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Vertex>* VertexCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.VertexCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Vertex>& VertexCollection::entries()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.VertexCollection.entries)
    return entries_;
}

// -------------------------------------------------------------------

// Relation

// uint32 id = 1;
inline void Relation::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 Relation::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.Relation.id)
    return id_;
}
inline void Relation::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Relation.id)
}

// .eicio.model.Reference from = 2;
inline bool Relation::has_from() const { return this != internal_default_instance() && from_ != NULL; }
inline void Relation::clear_from() {
    if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
    from_ = NULL;
}
inline const ::eicio::model::Reference& Relation::from() const {
    // @@protoc_insertion_point(field_get:eicio.model.Relation.from)
    return from_ != NULL ? *from_ : *::eicio::model::Reference::internal_default_instance();
}
inline ::eicio::model::Reference* Relation::mutable_from() {
    if (from_ == NULL) {
        from_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.Relation.from)
    return from_;
}
inline ::eicio::model::Reference* Relation::release_from() {
    // @@protoc_insertion_point(field_release:eicio.model.Relation.from)

    ::eicio::model::Reference* temp = from_;
    from_ = NULL;
    return temp;
}
inline void Relation::set_allocated_from(::eicio::model::Reference* from) {
    delete from_;
    from_ = from;
    if (from) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.Relation.from)
}

// .eicio.model.Reference to = 3;
inline bool Relation::has_to() const { return this != internal_default_instance() && to_ != NULL; }
inline void Relation::clear_to() {
    if (GetArenaNoVirtual() == NULL && to_ != NULL) delete to_;
    to_ = NULL;
}
inline const ::eicio::model::Reference& Relation::to() const {
    // @@protoc_insertion_point(field_get:eicio.model.Relation.to)
    return to_ != NULL ? *to_ : *::eicio::model::Reference::internal_default_instance();
}
inline ::eicio::model::Reference* Relation::mutable_to() {
    if (to_ == NULL) {
        to_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.Relation.to)
    return to_;
}
inline ::eicio::model::Reference* Relation::release_to() {
    // @@protoc_insertion_point(field_release:eicio.model.Relation.to)

    ::eicio::model::Reference* temp = to_;
    to_ = NULL;
    return temp;
}
inline void Relation::set_allocated_to(::eicio::model::Reference* to) {
    delete to_;
    to_ = to;
    if (to) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.Relation.to)
}

// float weight = 4;
inline void Relation::clear_weight() { weight_ = 0; }
inline float Relation::weight() const {
    // @@protoc_insertion_point(field_get:eicio.model.Relation.weight)
    return weight_;
}
inline void Relation::set_weight(float value) {
    weight_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Relation.weight)
}

// -------------------------------------------------------------------

// RelationCollection

// uint32 id = 1;
inline void RelationCollection::clear_id() { id_ = 0u; }
inline ::google::protobuf::uint32 RelationCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.RelationCollection.id)
    return id_;
}
inline void RelationCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RelationCollection.id)
}

// uint32 flags = 2;
inline void RelationCollection::clear_flags() { flags_ = 0u; }
inline ::google::protobuf::uint32 RelationCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.RelationCollection.flags)
    return flags_;
}
inline void RelationCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RelationCollection.flags)
}

// .eicio.model.Params params = 3;
inline bool RelationCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
inline void RelationCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
inline const ::eicio::model::Params& RelationCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.RelationCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
inline ::eicio::model::Params* RelationCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.RelationCollection.params)
    return params_;
}
inline ::eicio::model::Params* RelationCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.RelationCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
inline void RelationCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.RelationCollection.params)
}

// repeated .eicio.model.Relation entries = 4;
inline int RelationCollection::entries_size() const { return entries_.size(); }
inline void RelationCollection::clear_entries() { entries_.Clear(); }
inline const ::eicio::model::Relation& RelationCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RelationCollection.entries)
    return entries_.Get(index);
}
inline ::eicio::model::Relation* RelationCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RelationCollection.entries)
    return entries_.Mutable(index);
}
inline ::eicio::model::Relation* RelationCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.RelationCollection.entries)
    return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::model::Relation>*
RelationCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RelationCollection.entries)
    return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::model::Relation>& RelationCollection::entries()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.RelationCollection.entries)
    return entries_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace eicio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_eicio_2eproto__INCLUDED
