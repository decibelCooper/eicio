// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eicio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "eicio.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace eicio {
namespace model {
class EventHeader_CollectionHeaderDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<EventHeader_CollectionHeader> {
} _EventHeader_CollectionHeader_default_instance_;
class EventHeaderDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<EventHeader> {
} _EventHeader_default_instance_;
class IntParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IntParams> {
} _IntParams_default_instance_;
class FloatParamsDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<FloatParams> {
} _FloatParams_default_instance_;
class StringParamsDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<StringParams> {
} _StringParams_default_instance_;
class Params_IntsEntryDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<Params::Params_IntsEntry> {
} _Params_IntsEntry_default_instance_;
class Params_FloatsEntryDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<Params::Params_FloatsEntry> {
} _Params_FloatsEntry_default_instance_;
class Params_StringsEntryDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<Params::Params_StringsEntry> {
} _Params_StringsEntry_default_instance_;
class ParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Params> {
} _Params_default_instance_;
class ReferenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Reference> {
} _Reference_default_instance_;
class ParticleIDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ParticleID> {
} _ParticleID_default_instance_;
class MCParticleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MCParticle> {
} _MCParticle_default_instance_;
class MCParticleCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<MCParticleCollection> {
} _MCParticleCollection_default_instance_;
class SimTrackerHitDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<SimTrackerHit> {
} _SimTrackerHit_default_instance_;
class SimTrackerHitCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<SimTrackerHitCollection> {
} _SimTrackerHitCollection_default_instance_;
class TrackerRawDataDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerRawData> {
} _TrackerRawData_default_instance_;
class TrackerRawDataCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerRawDataCollection> {
} _TrackerRawDataCollection_default_instance_;
class TrackerDataDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerData> {
} _TrackerData_default_instance_;
class TrackerDataCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerDataCollection> {
} _TrackerDataCollection_default_instance_;
class TrackerHitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerHit> {
} _TrackerHit_default_instance_;
class TrackerHitCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerHitCollection> {
} _TrackerHitCollection_default_instance_;
class TrackerPulseDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerPulse> {
} _TrackerPulse_default_instance_;
class TrackerPulseCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerPulseCollection> {
} _TrackerPulseCollection_default_instance_;
class TrackerHitPlaneDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerHitPlane> {
} _TrackerHitPlane_default_instance_;
class TrackerHitPlaneCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerHitPlaneCollection> {
} _TrackerHitPlaneCollection_default_instance_;
class TrackerHitZCylinderDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerHitZCylinder> {
} _TrackerHitZCylinder_default_instance_;
class TrackerHitZCylinderCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackerHitZCylinderCollection> {
} _TrackerHitZCylinderCollection_default_instance_;
class Track_TrackStateDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<Track_TrackState> {
} _Track_TrackState_default_instance_;
class TrackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Track> {
} _Track_default_instance_;
class TrackCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<TrackCollection> {
} _TrackCollection_default_instance_;
class SimCalorimeterHit_ContribDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<SimCalorimeterHit_Contrib> {
} _SimCalorimeterHit_Contrib_default_instance_;
class SimCalorimeterHitDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<SimCalorimeterHit> {
} _SimCalorimeterHit_default_instance_;
class SimCalorimeterHitCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<SimCalorimeterHitCollection> {
} _SimCalorimeterHitCollection_default_instance_;
class RawCalorimeterHitDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<RawCalorimeterHit> {
} _RawCalorimeterHit_default_instance_;
class RawCalorimeterHitCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<RawCalorimeterHitCollection> {
} _RawCalorimeterHitCollection_default_instance_;
class CalorimeterHitDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<CalorimeterHit> {
} _CalorimeterHit_default_instance_;
class CalorimeterHitCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<CalorimeterHitCollection> {
} _CalorimeterHitCollection_default_instance_;
class ClusterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cluster> {
} _Cluster_default_instance_;
class ClusterCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterCollection> {
} _ClusterCollection_default_instance_;
class RecParticleDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<RecParticle> {
} _RecParticle_default_instance_;
class RecParticleCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<RecParticleCollection> {
} _RecParticleCollection_default_instance_;
class VertexDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vertex> {
} _Vertex_default_instance_;
class VertexCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<VertexCollection> {
} _VertexCollection_default_instance_;
class RelationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Relation> {
} _Relation_default_instance_;
class RelationCollectionDefaultTypeInternal
    : public ::google::protobuf::internal::ExplicitlyConstructed<RelationCollection> {
} _RelationCollection_default_instance_;

namespace protobuf_eicio_2eproto {

namespace {

::google::protobuf::Metadata file_level_metadata[45];

}  // namespace

PROTOBUF_CONSTEXPR_VAR::google::protobuf::internal::ParseTableField const TableStruct::entries[] = {
    {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR::google::protobuf::internal::AuxillaryParseTableField const TableStruct::aux[] = {
    ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR::google::protobuf::internal::ParseTable const TableStruct::schema[] = {
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
    {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false}, {NULL, NULL, 0, -1, -1, false},
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, payloadsize_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, runnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, eventnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, detector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, payloadcollections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, nuniqueids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, description_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntParams, array_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatParams, array_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringParams, array_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, ints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, floats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Params, strings_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, collid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, entryid_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticleID, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticleID, likelihood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticleID, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticleID, pdg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticleID, algtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticleID, params_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, parents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, pdg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, vertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, pendpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, spin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, colorflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, genstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, simstatus_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticleCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticleCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticleCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticleCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticleCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, cellid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, cellid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, edep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, mc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, pathlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, quality_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHitCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHitCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHitCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHitCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHitCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawData, cellid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawData, cellid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawData, adcs_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawDataCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawDataCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawDataCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawDataCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerRawDataCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerData, cellid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerData, cellid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerData, charges_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerDataCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerDataCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerDataCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerDataCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerDataCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, cellid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, cellid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, cov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, edep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, edeperr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHit, rawhits_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulse, cellid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulse, cellid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulse, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulse, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulse, cov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulse, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulse, tpc_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulseCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulseCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulseCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulseCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerPulseCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, cellid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, cellid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, du_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, dv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, edep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, edeperr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlane, rawhits_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlaneCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlaneCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlaneCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlaneCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitPlaneCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, cellid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, cellid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, drphi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, dz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, edep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, edeperr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinder, rawhits_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinderCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinderCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinderCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinderCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerHitZCylinderCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track_TrackState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track_TrackState, loc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track_TrackState, d0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track_TrackState, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track_TrackState, omega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track_TrackState, z0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track_TrackState, tanl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track_TrackState, cov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track_TrackState, ref_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, chi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, ndf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, dedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, dedxerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, subdethits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, tracks_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit_Contrib, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit_Contrib, mcparticle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit_Contrib, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit_Contrib, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit_Contrib, pdg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit_Contrib, steppos_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit, cellid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit, cellid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHit, contributions_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHitCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHitCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHitCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHitCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimCalorimeterHitCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHit, cellid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHit, cellid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHit, amplitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHit, timestamp_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHitCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHitCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHitCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHitCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCalorimeterHitCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHit, cellid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHit, cellid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHit, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHit, energyerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHit, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHit, raw_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHitCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHitCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHitCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHitCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalorimeterHitCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, energyerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, poserr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, direrr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, pids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, clusters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, subdetenes_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, cov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, pids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, pidused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, goodnessofpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, recs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, tracks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, clusters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticle, startvtx_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticleCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticleCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticleCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticleCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParticleCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, primary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, algtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, chi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, cov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, recpart_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexCollection, entries_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, weight_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationCollection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationCollection, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationCollection, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationCollection, entries_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
    {0, -1, sizeof(EventHeader_CollectionHeader)},
    {9, -1, sizeof(EventHeader)},
    {23, -1, sizeof(IntParams)},
    {29, -1, sizeof(FloatParams)},
    {35, -1, sizeof(StringParams)},
    {41, -1, sizeof(Params)},
    {49, -1, sizeof(Reference)},
    {56, -1, sizeof(ParticleID)},
    {66, -1, sizeof(MCParticle)},
    {85, -1, sizeof(MCParticleCollection)},
    {94, -1, sizeof(SimTrackerHit)},
    {109, -1, sizeof(SimTrackerHitCollection)},
    {118, -1, sizeof(TrackerRawData)},
    {128, -1, sizeof(TrackerRawDataCollection)},
    {137, -1, sizeof(TrackerData)},
    {147, -1, sizeof(TrackerDataCollection)},
    {156, -1, sizeof(TrackerHit)},
    {172, -1, sizeof(TrackerHitCollection)},
    {181, -1, sizeof(TrackerPulse)},
    {194, -1, sizeof(TrackerPulseCollection)},
    {203, -1, sizeof(TrackerHitPlane)},
    {222, -1, sizeof(TrackerHitPlaneCollection)},
    {231, -1, sizeof(TrackerHitZCylinder)},
    {249, -1, sizeof(TrackerHitZCylinderCollection)},
    {258, -1, sizeof(Track_TrackState)},
    {271, -1, sizeof(Track)},
    {287, -1, sizeof(TrackCollection)},
    {296, -1, sizeof(SimCalorimeterHit_Contrib)},
    {306, -1, sizeof(SimCalorimeterHit)},
    {318, -1, sizeof(SimCalorimeterHitCollection)},
    {327, -1, sizeof(RawCalorimeterHit)},
    {337, -1, sizeof(RawCalorimeterHitCollection)},
    {346, -1, sizeof(CalorimeterHit)},
    {360, -1, sizeof(CalorimeterHitCollection)},
    {369, -1, sizeof(Cluster)},
    {389, -1, sizeof(ClusterCollection)},
    {398, -1, sizeof(RecParticle)},
    {418, -1, sizeof(RecParticleCollection)},
    {427, -1, sizeof(Vertex)},
    {441, -1, sizeof(VertexCollection)},
    {450, -1, sizeof(Relation)},
    {459, -1, sizeof(RelationCollection)},
};

static ::google::protobuf::Message const* const file_default_instances[] = {
    reinterpret_cast<const ::google::protobuf::Message*>(&_EventHeader_CollectionHeader_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_EventHeader_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_IntParams_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_FloatParams_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_StringParams_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_Params_IntsEntry_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_Params_FloatsEntry_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_Params_StringsEntry_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_Params_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_Reference_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_ParticleID_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_MCParticle_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_MCParticleCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_SimTrackerHit_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_SimTrackerHitCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerRawData_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerRawDataCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerData_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerDataCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerHit_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerHitCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerPulse_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerPulseCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerHitPlane_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerHitPlaneCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerHitZCylinder_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackerHitZCylinderCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_Track_TrackState_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_Track_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_TrackCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_SimCalorimeterHit_Contrib_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_SimCalorimeterHit_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_SimCalorimeterHitCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_RawCalorimeterHit_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_RawCalorimeterHitCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_CalorimeterHit_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_CalorimeterHitCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_Cluster_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_RecParticle_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_RecParticleCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_Vertex_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_VertexCollection_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_Relation_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_RelationCollection_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
    AddDescriptors();
    ::google::protobuf::MessageFactory* factory = NULL;
    AssignDescriptors("eicio.proto", schemas, file_default_instances, TableStruct::offsets, factory,
                      file_level_metadata, NULL, NULL);
    file_level_metadata[5].reflection = Params::Params_IntsEntry::CreateReflection(
        file_level_metadata[5].descriptor, _Params_IntsEntry_default_instance_.get_mutable());
    file_level_metadata[6].reflection = Params::Params_FloatsEntry::CreateReflection(
        file_level_metadata[6].descriptor, _Params_FloatsEntry_default_instance_.get_mutable());
    file_level_metadata[7].reflection = Params::Params_StringsEntry::CreateReflection(
        file_level_metadata[7].descriptor, _Params_StringsEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 45);
}

}  // namespace

void TableStruct::Shutdown() {
    _EventHeader_CollectionHeader_default_instance_.Shutdown();
    delete file_level_metadata[0].reflection;
    _EventHeader_default_instance_.Shutdown();
    delete file_level_metadata[1].reflection;
    _IntParams_default_instance_.Shutdown();
    delete file_level_metadata[2].reflection;
    _FloatParams_default_instance_.Shutdown();
    delete file_level_metadata[3].reflection;
    _StringParams_default_instance_.Shutdown();
    delete file_level_metadata[4].reflection;
    _Params_default_instance_.Shutdown();
    delete file_level_metadata[8].reflection;
    _Reference_default_instance_.Shutdown();
    delete file_level_metadata[9].reflection;
    _ParticleID_default_instance_.Shutdown();
    delete file_level_metadata[10].reflection;
    _MCParticle_default_instance_.Shutdown();
    delete file_level_metadata[11].reflection;
    _MCParticleCollection_default_instance_.Shutdown();
    delete file_level_metadata[12].reflection;
    _SimTrackerHit_default_instance_.Shutdown();
    delete file_level_metadata[13].reflection;
    _SimTrackerHitCollection_default_instance_.Shutdown();
    delete file_level_metadata[14].reflection;
    _TrackerRawData_default_instance_.Shutdown();
    delete file_level_metadata[15].reflection;
    _TrackerRawDataCollection_default_instance_.Shutdown();
    delete file_level_metadata[16].reflection;
    _TrackerData_default_instance_.Shutdown();
    delete file_level_metadata[17].reflection;
    _TrackerDataCollection_default_instance_.Shutdown();
    delete file_level_metadata[18].reflection;
    _TrackerHit_default_instance_.Shutdown();
    delete file_level_metadata[19].reflection;
    _TrackerHitCollection_default_instance_.Shutdown();
    delete file_level_metadata[20].reflection;
    _TrackerPulse_default_instance_.Shutdown();
    delete file_level_metadata[21].reflection;
    _TrackerPulseCollection_default_instance_.Shutdown();
    delete file_level_metadata[22].reflection;
    _TrackerHitPlane_default_instance_.Shutdown();
    delete file_level_metadata[23].reflection;
    _TrackerHitPlaneCollection_default_instance_.Shutdown();
    delete file_level_metadata[24].reflection;
    _TrackerHitZCylinder_default_instance_.Shutdown();
    delete file_level_metadata[25].reflection;
    _TrackerHitZCylinderCollection_default_instance_.Shutdown();
    delete file_level_metadata[26].reflection;
    _Track_TrackState_default_instance_.Shutdown();
    delete file_level_metadata[27].reflection;
    _Track_default_instance_.Shutdown();
    delete file_level_metadata[28].reflection;
    _TrackCollection_default_instance_.Shutdown();
    delete file_level_metadata[29].reflection;
    _SimCalorimeterHit_Contrib_default_instance_.Shutdown();
    delete file_level_metadata[30].reflection;
    _SimCalorimeterHit_default_instance_.Shutdown();
    delete file_level_metadata[31].reflection;
    _SimCalorimeterHitCollection_default_instance_.Shutdown();
    delete file_level_metadata[32].reflection;
    _RawCalorimeterHit_default_instance_.Shutdown();
    delete file_level_metadata[33].reflection;
    _RawCalorimeterHitCollection_default_instance_.Shutdown();
    delete file_level_metadata[34].reflection;
    _CalorimeterHit_default_instance_.Shutdown();
    delete file_level_metadata[35].reflection;
    _CalorimeterHitCollection_default_instance_.Shutdown();
    delete file_level_metadata[36].reflection;
    _Cluster_default_instance_.Shutdown();
    delete file_level_metadata[37].reflection;
    _ClusterCollection_default_instance_.Shutdown();
    delete file_level_metadata[38].reflection;
    _RecParticle_default_instance_.Shutdown();
    delete file_level_metadata[39].reflection;
    _RecParticleCollection_default_instance_.Shutdown();
    delete file_level_metadata[40].reflection;
    _Vertex_default_instance_.Shutdown();
    delete file_level_metadata[41].reflection;
    _VertexCollection_default_instance_.Shutdown();
    delete file_level_metadata[42].reflection;
    _Relation_default_instance_.Shutdown();
    delete file_level_metadata[43].reflection;
    _RelationCollection_default_instance_.Shutdown();
    delete file_level_metadata[44].reflection;
    delete file_level_metadata[5].reflection;
    delete file_level_metadata[6].reflection;
    delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::internal::InitProtobufDefaults();
    _EventHeader_CollectionHeader_default_instance_.DefaultConstruct();
    _EventHeader_default_instance_.DefaultConstruct();
    _IntParams_default_instance_.DefaultConstruct();
    _FloatParams_default_instance_.DefaultConstruct();
    _StringParams_default_instance_.DefaultConstruct();
    _Params_IntsEntry_default_instance_.DefaultConstruct();
    _Params_FloatsEntry_default_instance_.DefaultConstruct();
    _Params_StringsEntry_default_instance_.DefaultConstruct();
    _Params_default_instance_.DefaultConstruct();
    _Reference_default_instance_.DefaultConstruct();
    _ParticleID_default_instance_.DefaultConstruct();
    _MCParticle_default_instance_.DefaultConstruct();
    _MCParticleCollection_default_instance_.DefaultConstruct();
    _SimTrackerHit_default_instance_.DefaultConstruct();
    _SimTrackerHitCollection_default_instance_.DefaultConstruct();
    _TrackerRawData_default_instance_.DefaultConstruct();
    _TrackerRawDataCollection_default_instance_.DefaultConstruct();
    _TrackerData_default_instance_.DefaultConstruct();
    _TrackerDataCollection_default_instance_.DefaultConstruct();
    _TrackerHit_default_instance_.DefaultConstruct();
    _TrackerHitCollection_default_instance_.DefaultConstruct();
    _TrackerPulse_default_instance_.DefaultConstruct();
    _TrackerPulseCollection_default_instance_.DefaultConstruct();
    _TrackerHitPlane_default_instance_.DefaultConstruct();
    _TrackerHitPlaneCollection_default_instance_.DefaultConstruct();
    _TrackerHitZCylinder_default_instance_.DefaultConstruct();
    _TrackerHitZCylinderCollection_default_instance_.DefaultConstruct();
    _Track_TrackState_default_instance_.DefaultConstruct();
    _Track_default_instance_.DefaultConstruct();
    _TrackCollection_default_instance_.DefaultConstruct();
    _SimCalorimeterHit_Contrib_default_instance_.DefaultConstruct();
    _SimCalorimeterHit_default_instance_.DefaultConstruct();
    _SimCalorimeterHitCollection_default_instance_.DefaultConstruct();
    _RawCalorimeterHit_default_instance_.DefaultConstruct();
    _RawCalorimeterHitCollection_default_instance_.DefaultConstruct();
    _CalorimeterHit_default_instance_.DefaultConstruct();
    _CalorimeterHitCollection_default_instance_.DefaultConstruct();
    _Cluster_default_instance_.DefaultConstruct();
    _ClusterCollection_default_instance_.DefaultConstruct();
    _RecParticle_default_instance_.DefaultConstruct();
    _RecParticleCollection_default_instance_.DefaultConstruct();
    _Vertex_default_instance_.DefaultConstruct();
    _VertexCollection_default_instance_.DefaultConstruct();
    _Relation_default_instance_.DefaultConstruct();
    _RelationCollection_default_instance_.DefaultConstruct();
    _EventHeader_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _Params_IntsEntry_default_instance_.get_mutable()->set_default_instance(
        _Params_IntsEntry_default_instance_.get_mutable());
    _Params_IntsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
    _Params_FloatsEntry_default_instance_.get_mutable()->set_default_instance(
        _Params_FloatsEntry_default_instance_.get_mutable());
    _Params_FloatsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
    _Params_StringsEntry_default_instance_.get_mutable()->set_default_instance(
        _Params_StringsEntry_default_instance_.get_mutable());
    _Params_StringsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
    _MCParticleCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _SimTrackerHit_default_instance_.get_mutable()->mc_ =
        const_cast< ::eicio::model::Reference*>(::eicio::model::Reference::internal_default_instance());
    _SimTrackerHitCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _TrackerRawDataCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _TrackerDataCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _TrackerHitCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _TrackerPulse_default_instance_.get_mutable()->tpc_ =
        const_cast< ::eicio::model::Reference*>(::eicio::model::Reference::internal_default_instance());
    _TrackerPulseCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _TrackerHitPlaneCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _TrackerHitZCylinderCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _TrackCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _SimCalorimeterHit_Contrib_default_instance_.get_mutable()->mcparticle_ =
        const_cast< ::eicio::model::Reference*>(::eicio::model::Reference::internal_default_instance());
    _SimCalorimeterHit_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _SimCalorimeterHitCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _RawCalorimeterHitCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _CalorimeterHit_default_instance_.get_mutable()->raw_ =
        const_cast< ::eicio::model::Reference*>(::eicio::model::Reference::internal_default_instance());
    _CalorimeterHitCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _ClusterCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _RecParticle_default_instance_.get_mutable()->startvtx_ =
        const_cast< ::eicio::model::Reference*>(::eicio::model::Reference::internal_default_instance());
    _RecParticleCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _Vertex_default_instance_.get_mutable()->recpart_ =
        const_cast< ::eicio::model::Reference*>(::eicio::model::Reference::internal_default_instance());
    _VertexCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
    _Relation_default_instance_.get_mutable()->from_ =
        const_cast< ::eicio::model::Reference*>(::eicio::model::Reference::internal_default_instance());
    _Relation_default_instance_.get_mutable()->to_ =
        const_cast< ::eicio::model::Reference*>(::eicio::model::Reference::internal_default_instance());
    _RelationCollection_default_instance_.get_mutable()->params_ =
        const_cast< ::eicio::model::Params*>(::eicio::model::Params::internal_default_instance());
}

void InitDefaults() {
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
    InitDefaults();
    static const char descriptor[] = {
        "\n\013eicio.proto\022\013eicio.model\"\321\002\n\013EventHead"
        "er\022\017\n\007version\030\001 \001(\r\022\021\n\trunNumber\030\002 \001(\004\022\023"
        "\n\013eventNumber\030\003 \001(\004\022\021\n\ttimeStamp\030\004 \001(\004\022\020"
        "\n\010detector\030\005 \001(\t\022#\n\006params\030\006 \001(\0132\023.eicio"
        ".model.Params\022E\n\022payloadCollections\030\007 \003("
        "\0132).eicio.model.EventHeader.CollectionHe"
        "ader\022\022\n\nnUniqueIDs\030\010 \001(\r\022\023\n\013description\030"
        "\020 \001(\t\032O\n\020CollectionHeader\022\014\n\004name\030\001 \001(\t\022"
        "\n\n\002id\030\002 \001(\r\022\014\n\004type\030\003 \001(\t\022\023\n\013payloadSize"
        "\030\004 \001(\r\"\032\n\tIntParams\022\r\n\005array\030\001 \003(\005\"\034\n\013Fl"
        "oatParams\022\r\n\005array\030\001 \003(\002\"\035\n\014StringParams"
        "\022\r\n\005array\030\001 \003(\t\"\362\002\n\006Params\022+\n\004ints\030\001 \003(\013"
        "2\035.eicio.model.Params.IntsEntry\022/\n\006float"
        "s\030\002 \003(\0132\037.eicio.model.Params.FloatsEntry"
        "\0221\n\007strings\030\003 \003(\0132 .eicio.model.Params.S"
        "tringsEntry\032C\n\tIntsEntry\022\013\n\003key\030\001 \001(\t\022%\n"
        "\005value\030\002 \001(\0132\026.eicio.model.IntParams:\0028\001"
        "\032G\n\013FloatsEntry\022\013\n\003key\030\001 \001(\t\022\'\n\005value\030\002 "
        "\001(\0132\030.eicio.model.FloatParams:\0028\001\032I\n\014Str"
        "ingsEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002 \001(\0132\031."
        "eicio.model.StringParams:\0028\001\",\n\tReferenc"
        "e\022\016\n\006collID\030\001 \001(\r\022\017\n\007entryID\030\002 \001(\r\"\\\n\nPa"
        "rticleID\022\022\n\nlikelihood\030\001 \001(\002\022\014\n\004type\030\002 \001"
        "(\005\022\013\n\003PDG\030\003 \001(\005\022\017\n\007algType\030\004 \001(\005\022\016\n\006para"
        "ms\030\005 \003(\002\"\231\002\n\nMCParticle\022\n\n\002id\030\001 \001(\r\022\'\n\007p"
        "arents\030\002 \003(\0132\026.eicio.model.Reference\022(\n\010"
        "children\030\003 \003(\0132\026.eicio.model.Reference\022\013"
        "\n\003PDG\030\004 \001(\005\022\016\n\006vertex\030\005 \003(\001\022\014\n\004time\030\006 \001("
        "\002\022\t\n\001p\030\007 \003(\001\022\014\n\004mass\030\010 \001(\001\022\016\n\006charge\030\t "
        "\001"
        "(\002\022\021\n\tPEndPoint\030\n \003(\001\022\014\n\004spin\030\013 \003(\002\022\021\n\tc"
        "olorFlow\030\014 \003(\005\022\021\n\tgenStatus\030\r \001(\005\022\021\n\tsim"
        "Status\030\016 \001(\r\"\200\001\n\024MCParticleCollection\022\n\n"
        "\002id\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\022#\n\006params\030\003 \001(\013"
        "2\023.eicio.model.Params\022(\n\007entries\030\004 \003(\0132\027"
        ".eicio.model.MCParticle\"\272\001\n\rSimTrackerHi"
        "t\022\n\n\002id\030\001 \001(\r\022\017\n\007cellID0\030\002 \001(\005\022\017\n\007cellID"
        "1\030\003 \001(\005\022\013\n\003pos\030\004 \003(\001\022\014\n\004EDep\030\005 "
        "\001(\002\022\014\n\004ti"
        "me\030\006 \001(\002\022\"\n\002mc\030\007 \001(\0132\026.eicio.model.Refer"
        "ence\022\t\n\001p\030\010 \003(\002\022\022\n\npathLength\030\t \001(\002\022\017\n\007q"
        "uality\030\n \001(\005\"\206\001\n\027SimTrackerHitCollection"
        "\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\022#\n\006params\030\003 "
        "\001(\0132\023.eicio.model.Params\022+\n\007entries\030\004 \003("
        "\0132\032.eicio.model.SimTrackerHit\"Z\n\016Tracker"
        "RawData\022\n\n\002id\030\001 \001(\r\022\017\n\007cellID0\030\002 \001(\005\022\017\n\007"
        "cellID1\030\003 \001(\005\022\014\n\004time\030\004 \001(\005\022\014\n\004ADCs\030\005 \003("
        "\r\"\210\001\n\030TrackerRawDataCollection\022\n\n\002id\030\001 \001"
        "(\r\022\r\n\005flags\030\002 \001(\r\022#\n\006params\030\003 \001(\0132\023.eici"
        "o.model.Params\022,\n\007entries\030\004 \003(\0132\033.eicio."
        "model.TrackerRawData\"Z\n\013TrackerData\022\n\n\002i"
        "d\030\001 \001(\r\022\017\n\007cellID0\030\002 \001(\005\022\017\n\007cellID1\030\003 \001("
        "\005\022\014\n\004time\030\004 \001(\002\022\017\n\007charges\030\005 \003(\002\"\202\001\n\025Tra"
        "ckerDataCollection\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030"
        "\002 \001(\r\022#\n\006params\030\003 \001(\0132\023.eicio.model.Para"
        "ms\022)\n\007entries\030\004 \003(\0132\030.eicio.model.Tracke"
        "rData\"\311\001\n\nTrackerHit\022\n\n\002id\030\001 \001(\r\022\017\n\007cell"
        "ID0\030\002 \001(\005\022\017\n\007cellID1\030\003 \001(\005\022\014\n\004type\030\004 \001(\005"
        "\022\013\n\003pos\030\005 \003(\001\022\013\n\003cov\030\006 \003(\001\022\014\n\004EDep\030\007 "
        "\001(\002"
        "\022\017\n\007EDepErr\030\010 \001(\002\022\014\n\004time\030\t \001(\002\022\017\n\007quali"
        "ty\030\n \001(\005\022\'\n\007rawHits\030\013 \003(\0132\026.eicio.model."
        "Reference\"\200\001\n\024TrackerHitCollection\022\n\n\002id"
        "\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\022#\n\006params\030\003 \001(\0132\023."
        "eicio.model.Params\022(\n\007entries\030\004 \003(\0132\027.ei"
        "cio.model.TrackerHit\"\235\001\n\014TrackerPulse\022\n\n"
        "\002id\030\001 \001(\r\022\017\n\007cellID0\030\002 \001(\005\022\017\n\007cellID1\030\003 "
        "\001(\005\022\014\n\004time\030\004 \001(\002\022\016\n\006charge\030\005 \001(\002\022\013\n\003cov"
        "\030\006 \003(\002\022\017\n\007quality\030\007 \001(\005\022#\n\003TPC\030\010 \001(\0132\026.e"
        "icio.model.Reference\"\204\001\n\026TrackerPulseCol"
        "lection\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\022#\n\006pa"
        "rams\030\003 \001(\0132\023.eicio.model.Params\022*\n\007entri"
        "es\030\004 \003(\0132\031.eicio.model.TrackerPulse\"\357\001\n\017"
        "TrackerHitPlane\022\n\n\002id\030\001 \001(\r\022\017\n\007cellID0\030\002"
        " \001(\005\022\017\n\007cellID1\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022\013\n\003p"
        "os\030\005 \003(\001\022\t\n\001U\030\006 \003(\002\022\t\n\001V\030\007 "
        "\003(\002\022\n\n\002dU\030\010 \001"
        "(\002\022\n\n\002dV\030\t \001(\002\022\014\n\004EDep\030\n \001(\002\022\017\n\007EDepErr\030"
        "\013 \001(\002\022\014\n\004time\030\014 \001(\002\022\017\n\007quality\030\r \001(\005\022\'\n\007"
        "rawHits\030\016 \003(\0132\026.eicio.model.Reference\"\212\001"
        "\n\031TrackerHitPlaneCollection\022\n\n\002id\030\001 \001(\r\022"
        "\r\n\005flags\030\002 \001(\r\022#\n\006params\030\003 \001(\0132\023.eicio.m"
        "odel.Params\022-\n\007entries\030\004 \003(\0132\034.eicio.mod"
        "el.TrackerHitPlane\"\360\001\n\023TrackerHitZCylind"
        "er\022\n\n\002id\030\001 \001(\r\022\017\n\007cellID0\030\002 \001(\005\022\017\n\007cellI"
        "D1\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022\013\n\003pos\030\005 "
        "\003(\001\022\016\n\006c"
        "enter\030\006 \003(\002\022\r\n\005dRPhi\030\007 \001(\002\022\n\n\002dZ\030\010 \001(\002\022\014"
        "\n\004EDep\030\t \001(\002\022\017\n\007EDepErr\030\n \001(\002\022\014\n\004time\030\013 "
        "\001(\002\022\017\n\007quality\030\014 \001(\005\022\'\n\007rawHits\030\r \003(\0132\026."
        "eicio.model.Reference\"\222\001\n\035TrackerHitZCyl"
        "inderCollection\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030\002 \001"
        "(\r\022#\n\006params\030\003 \001(\0132\023.eicio.model.Params\022"
        "1\n\007entries\030\004 \003(\0132 .eicio.model.TrackerHi"
        "tZCylinder\"\363\002\n\005Track\022\n\n\002id\030\001 \001(\r\022\014\n\004type"
        "\030\002 \001(\005\022\014\n\004chi2\030\003 \001(\002\022\013\n\003NDF\030\004 "
        "\001(\005\022\014\n\004dEd"
        "x\030\005 \001(\002\022\017\n\007dEdxErr\030\006 \001(\002\022\016\n\006radius\030\007 \001(\002"
        "\022\022\n\nsubDetHits\030\010 \003(\005\022-\n\006states\030\t \003(\0132\035.e"
        "icio.model.Track.TrackState\022$\n\004hits\030\n \003("
        "\0132\026.eicio.model.Reference\022&\n\006tracks\030\013 \003("
        "\0132\026.eicio.model.Reference\032u\n\nTrackState\022"
        "\013\n\003loc\030\001 \001(\005\022\n\n\002d0\030\002 \001(\002\022\013\n\003phi\030\003 "
        "\001(\002\022\r\n"
        "\005omega\030\004 \001(\002\022\n\n\002z0\030\005 \001(\002\022\014\n\004tanL\030\006 "
        "\001(\002\022\013"
        "\n\003cov\030\007 \003(\002\022\013\n\003ref\030\010 \003(\002\"v\n\017TrackCollect"
        "ion\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\022#\n\006params"
        "\030\003 \001(\0132\023.eicio.model.Params\022#\n\007entries\030\004"
        " \003(\0132\022.eicio.model.Track\"\265\002\n\021SimCalorime"
        "terHit\022\n\n\002id\030\001 \001(\r\022#\n\006params\030\002 \001(\0132\023.eic"
        "io.model.Params\022\017\n\007cellID0\030\003 \001(\005\022\017\n\007cell"
        "ID1\030\004 \001(\005\022\016\n\006energy\030\005 \001(\002\022\013\n\003pos\030\006 \003(\002\022="
        "\n\rcontributions\030\007 \003(\0132&.eicio.model.SimC"
        "alorimeterHit.Contrib\032q\n\007Contrib\022*\n\nMCPa"
        "rticle\030\001 \001(\0132\026.eicio.model.Reference\022\016\n\006"
        "energy\030\002 \001(\002\022\014\n\004time\030\003 \001(\002\022\013\n\003PDG\030\004 \001(\005\022"
        "\017\n\007stepPos\030\005 \003(\002\"\216\001\n\033SimCalorimeterHitCo"
        "llection\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\022#\n\006p"
        "arams\030\003 \001(\0132\023.eicio.model.Params\022/\n\007entr"
        "ies\030\004 \003(\0132\036.eicio.model.SimCalorimeterHi"
        "t\"g\n\021RawCalorimeterHit\022\n\n\002id\030\001 \001(\r\022\017\n\007ce"
        "llID0\030\002 \001(\005\022\017\n\007cellID1\030\003 \001(\005\022\021\n\tamplitud"
        "e\030\004 \001(\005\022\021\n\ttimeStamp\030\005 \001(\005\"\216\001\n\033RawCalori"
        "meterHitCollection\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030"
        "\002 \001(\r\022#\n\006params\030\003 \001(\0132\023.eicio.model.Para"
        "ms\022/\n\007entries\030\004 \003(\0132\036.eicio.model.RawCal"
        "orimeterHit\"\257\001\n\016CalorimeterHit\022\n\n\002id\030\001 \001"
        "(\r\022\017\n\007cellID0\030\002 \001(\005\022\017\n\007cellID1\030\003 \001(\005\022\016\n\006"
        "energy\030\004 \001(\002\022\021\n\tenergyErr\030\005 \001(\002\022\014\n\004time\030"
        "\006 \001(\002\022\013\n\003pos\030\007 \003(\002\022\014\n\004type\030\010 "
        "\001(\005\022#\n\003raw\030"
        "\t \001(\0132\026.eicio.model.Reference\"\210\001\n\030Calori"
        "meterHitCollection\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030"
        "\002 \001(\r\022#\n\006params\030\003 \001(\0132\023.eicio.model.Para"
        "ms\022,\n\007entries\030\004 \003(\0132\033.eicio.model.Calori"
        "meterHit\"\272\002\n\007Cluster\022\n\n\002id\030\001 \001(\r\022\014\n\004type"
        "\030\002 \001(\005\022\016\n\006energy\030\003 \001(\002\022\021\n\tenergyErr\030\004 \001("
        "\002\022\013\n\003pos\030\005 \003(\002\022\016\n\006posErr\030\006 \003(\002\022\r\n\005theta\030"
        "\007 \001(\002\022\013\n\003phi\030\010 \001(\002\022\016\n\006dirErr\030\t \003(\002\022\r\n\005sh"
        "ape\030\n \003(\002\022%\n\004PIDs\030\013 \003(\0132\027.eicio.model.Pa"
        "rticleID\022(\n\010clusters\030\014 \003(\0132\026.eicio.model"
        ".Reference\022$\n\004hits\030\r \003(\0132\026.eicio.model.R"
        "eference\022\017\n\007weights\030\016 \003(\002\022\022\n\nsubDetEnes\030"
        "\017 \003(\002\"z\n\021ClusterCollection\022\n\n\002id\030\001 \001(\r\022\r"
        "\n\005flags\030\002 \001(\r\022#\n\006params\030\003 \001(\0132\023.eicio.mo"
        "del.Params\022%\n\007entries\030\004 \003(\0132\024.eicio.mode"
        "l.Cluster\"\353\002\n\013RecParticle\022\n\n\002id\030\001 \001(\r\022\014\n"
        "\004type\030\002 \001(\005\022\t\n\001p\030\003 \003(\002\022\016\n\006energy\030\004 "
        "\001(\002\022\013"
        "\n\003cov\030\005 \003(\002\022\014\n\004mass\030\006 \001(\002\022\016\n\006charge\030\007 \001("
        "\002\022\013\n\003ref\030\010 \003(\002\022%\n\004PIDs\030\t \003(\0132\027.eicio.mod"
        "el.ParticleID\022\017\n\007PIDUsed\030\n \001(\005\022\025\n\rgoodne"
        "ssOfPID\030\013 \001(\002\022$\n\004recs\030\014 \003(\0132\026.eicio.mode"
        "l.Reference\022&\n\006tracks\030\r \003(\0132\026.eicio.mode"
        "l.Reference\022(\n\010clusters\030\016 \003(\0132\026.eicio.mo"
        "del.Reference\022(\n\010startVtx\030\017 \001(\0132\026.eicio."
        "model.Reference\"\202\001\n\025RecParticleCollectio"
        "n\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\022#\n\006params\030\003"
        " \001(\0132\023.eicio.model.Params\022)\n\007entries\030\004 \003"
        "(\0132\030.eicio.model.RecParticle\"\245\001\n\006Vertex\022"
        "\n\n\002id\030\001 \001(\r\022\017\n\007primary\030\002 \001(\005\022\017\n\007algType\030"
        "\003 \001(\005\022\014\n\004chi2\030\004 \001(\002\022\014\n\004prob\030\005 "
        "\001(\002\022\013\n\003pos"
        "\030\006 \003(\002\022\013\n\003cov\030\007 \003(\002\022\016\n\006params\030\010 "
        "\003(\002\022\'\n\007r"
        "ecPart\030\t \001(\0132\026.eicio.model.Reference\"x\n\020"
        "VertexCollection\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030\002 "
        "\001(\r\022#\n\006params\030\003 \001(\0132\023.eicio.model.Params"
        "\022$\n\007entries\030\004 \003(\0132\023.eicio.model.Vertex\"p"
        "\n\010Relation\022\n\n\002id\030\001 \001(\r\022$\n\004from\030\002 \001(\0132\026.e"
        "icio.model.Reference\022\"\n\002to\030\003 \001(\0132\026.eicio"
        ".model.Reference\022\016\n\006weight\030\004 \001(\002\"|\n\022Rela"
        "tionCollection\022\n\n\002id\030\001 \001(\r\022\r\n\005flags\030\002 \001("
        "\r\022#\n\006params\030\003 \001(\0132\023.eicio.model.Params\022&"
        "\n\007entries\030\004 \003(\0132\025.eicio.model.RelationB\007"
        "Z\005modelb\006proto3"};
    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(descriptor, 6575);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("eicio.proto", &protobuf_RegisterTypes);
    ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
    StaticDescriptorInitializer() { AddDescriptors(); }
} static_descriptor_initializer;

}  // namespace protobuf_eicio_2eproto

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventHeader_CollectionHeader::kNameFieldNumber;
const int EventHeader_CollectionHeader::kIdFieldNumber;
const int EventHeader_CollectionHeader::kTypeFieldNumber;
const int EventHeader_CollectionHeader::kPayloadSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventHeader_CollectionHeader::EventHeader_CollectionHeader()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.EventHeader.CollectionHeader)
}
EventHeader_CollectionHeader::EventHeader_CollectionHeader(const EventHeader_CollectionHeader& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.name().size() > 0) {
        name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.type().size() > 0) {
        type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&payloadsize_) - reinterpret_cast<char*>(&id_) + sizeof(payloadsize_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.EventHeader.CollectionHeader)
}

void EventHeader_CollectionHeader::SharedCtor() {
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&id_, 0,
             reinterpret_cast<char*>(&payloadsize_) - reinterpret_cast<char*>(&id_) + sizeof(payloadsize_));
    _cached_size_ = 0;
}

EventHeader_CollectionHeader::~EventHeader_CollectionHeader() {
    // @@protoc_insertion_point(destructor:eicio.model.EventHeader.CollectionHeader)
    SharedDtor();
}

void EventHeader_CollectionHeader::SharedDtor() {
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventHeader_CollectionHeader::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventHeader_CollectionHeader::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventHeader_CollectionHeader& EventHeader_CollectionHeader::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

EventHeader_CollectionHeader* EventHeader_CollectionHeader::New(::google::protobuf::Arena* arena) const {
    EventHeader_CollectionHeader* n = new EventHeader_CollectionHeader;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void EventHeader_CollectionHeader::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.EventHeader.CollectionHeader)
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&id_, 0,
             reinterpret_cast<char*>(&payloadsize_) - reinterpret_cast<char*>(&id_) + sizeof(payloadsize_));
}

bool EventHeader_CollectionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.EventHeader.CollectionHeader)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // string name = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(10u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                                 this->mutable_name()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->name().data(), this->name().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "eicio.model.EventHeader.CollectionHeader.name"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 id = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // string type = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                                 this->mutable_type()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->type().data(), this->type().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "eicio.model.EventHeader.CollectionHeader.type"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 payloadSize = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &payloadsize_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.EventHeader.CollectionHeader)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.EventHeader.CollectionHeader)
    return false;
#undef DO_
}

void EventHeader_CollectionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.EventHeader.CollectionHeader)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string name = 1;
    if (this->name().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "eicio.model.EventHeader.CollectionHeader.name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, this->name(), output);
    }

    // uint32 id = 2;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
    }

    // string type = 3;
    if (this->type().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "eicio.model.EventHeader.CollectionHeader.type");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3, this->type(), output);
    }

    // uint32 payloadSize = 4;
    if (this->payloadsize() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->payloadsize(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.EventHeader.CollectionHeader)
}

::google::protobuf::uint8* EventHeader_CollectionHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.EventHeader.CollectionHeader)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string name = 1;
    if (this->name().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "eicio.model.EventHeader.CollectionHeader.name");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(1, this->name(), target);
    }

    // uint32 id = 2;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
    }

    // string type = 3;
    if (this->type().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "eicio.model.EventHeader.CollectionHeader.type");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(3, this->type(), target);
    }

    // uint32 payloadSize = 4;
    if (this->payloadsize() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->payloadsize(), target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.EventHeader.CollectionHeader)
    return target;
}

size_t EventHeader_CollectionHeader::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.EventHeader.CollectionHeader)
    size_t total_size = 0;

    // string name = 1;
    if (this->name().size() > 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
    }

    // string type = 3;
    if (this->type().size() > 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->type());
    }

    // uint32 id = 2;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 payloadSize = 4;
    if (this->payloadsize() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->payloadsize());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void EventHeader_CollectionHeader::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.EventHeader.CollectionHeader)
    GOOGLE_DCHECK_NE(&from, this);
    const EventHeader_CollectionHeader* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const EventHeader_CollectionHeader>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.EventHeader.CollectionHeader)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.EventHeader.CollectionHeader)
        MergeFrom(*source);
    }
}

void EventHeader_CollectionHeader::MergeFrom(const EventHeader_CollectionHeader& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.EventHeader.CollectionHeader)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.name().size() > 0) {
        name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.type().size() > 0) {
        type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.payloadsize() != 0) {
        set_payloadsize(from.payloadsize());
    }
}

void EventHeader_CollectionHeader::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.EventHeader.CollectionHeader)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void EventHeader_CollectionHeader::CopyFrom(const EventHeader_CollectionHeader& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.EventHeader.CollectionHeader)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool EventHeader_CollectionHeader::IsInitialized() const { return true; }

void EventHeader_CollectionHeader::Swap(EventHeader_CollectionHeader* other) {
    if (other == this) return;
    InternalSwap(other);
}
void EventHeader_CollectionHeader::InternalSwap(EventHeader_CollectionHeader* other) {
    name_.Swap(&other->name_);
    type_.Swap(&other->type_);
    std::swap(id_, other->id_);
    std::swap(payloadsize_, other->payloadsize_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventHeader_CollectionHeader::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventHeader_CollectionHeader

// string name = 1;
void EventHeader_CollectionHeader::clear_name() {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventHeader_CollectionHeader::name() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.CollectionHeader.name)
    return name_.GetNoArena();
}
void EventHeader_CollectionHeader::set_name(const ::std::string& value) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.CollectionHeader.name)
}
#if LANG_CXX11
void EventHeader_CollectionHeader::set_name(::std::string&& value) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:eicio.model.EventHeader.CollectionHeader.name)
}
#endif
void EventHeader_CollectionHeader::set_name(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:eicio.model.EventHeader.CollectionHeader.name)
}
void EventHeader_CollectionHeader::set_name(const char* value, size_t size) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:eicio.model.EventHeader.CollectionHeader.name)
}
::std::string* EventHeader_CollectionHeader::mutable_name() {
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.CollectionHeader.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventHeader_CollectionHeader::release_name() {
    // @@protoc_insertion_point(field_release:eicio.model.EventHeader.CollectionHeader.name)

    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventHeader_CollectionHeader::set_allocated_name(::std::string* name) {
    if (name != NULL) {
    } else {
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:eicio.model.EventHeader.CollectionHeader.name)
}

// uint32 id = 2;
void EventHeader_CollectionHeader::clear_id() { id_ = 0u; }
::google::protobuf::uint32 EventHeader_CollectionHeader::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.CollectionHeader.id)
    return id_;
}
void EventHeader_CollectionHeader::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.CollectionHeader.id)
}

// string type = 3;
void EventHeader_CollectionHeader::clear_type() {
    type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventHeader_CollectionHeader::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.CollectionHeader.type)
    return type_.GetNoArena();
}
void EventHeader_CollectionHeader::set_type(const ::std::string& value) {
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.CollectionHeader.type)
}
#if LANG_CXX11
void EventHeader_CollectionHeader::set_type(::std::string&& value) {
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:eicio.model.EventHeader.CollectionHeader.type)
}
#endif
void EventHeader_CollectionHeader::set_type(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:eicio.model.EventHeader.CollectionHeader.type)
}
void EventHeader_CollectionHeader::set_type(const char* value, size_t size) {
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:eicio.model.EventHeader.CollectionHeader.type)
}
::std::string* EventHeader_CollectionHeader::mutable_type() {
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.CollectionHeader.type)
    return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventHeader_CollectionHeader::release_type() {
    // @@protoc_insertion_point(field_release:eicio.model.EventHeader.CollectionHeader.type)

    return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventHeader_CollectionHeader::set_allocated_type(::std::string* type) {
    if (type != NULL) {
    } else {
    }
    type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
    // @@protoc_insertion_point(field_set_allocated:eicio.model.EventHeader.CollectionHeader.type)
}

// uint32 payloadSize = 4;
void EventHeader_CollectionHeader::clear_payloadsize() { payloadsize_ = 0u; }
::google::protobuf::uint32 EventHeader_CollectionHeader::payloadsize() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.CollectionHeader.payloadSize)
    return payloadsize_;
}
void EventHeader_CollectionHeader::set_payloadsize(::google::protobuf::uint32 value) {
    payloadsize_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.CollectionHeader.payloadSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventHeader::kVersionFieldNumber;
const int EventHeader::kRunNumberFieldNumber;
const int EventHeader::kEventNumberFieldNumber;
const int EventHeader::kTimeStampFieldNumber;
const int EventHeader::kDetectorFieldNumber;
const int EventHeader::kParamsFieldNumber;
const int EventHeader::kPayloadCollectionsFieldNumber;
const int EventHeader::kNUniqueIDsFieldNumber;
const int EventHeader::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventHeader::EventHeader() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.EventHeader)
}
EventHeader::EventHeader(const EventHeader& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      payloadcollections_(from.payloadcollections_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    detector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.detector().size() > 0) {
        detector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                    from.detector_);
    }
    description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.description().size() > 0) {
        description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                       from.description_);
    }
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(
        &runnumber_, &from.runnumber_,
        reinterpret_cast<char*>(&nuniqueids_) - reinterpret_cast<char*>(&runnumber_) + sizeof(nuniqueids_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.EventHeader)
}

void EventHeader::SharedCtor() {
    detector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&nuniqueids_) - reinterpret_cast<char*>(&params_) + sizeof(nuniqueids_));
    _cached_size_ = 0;
}

EventHeader::~EventHeader() {
    // @@protoc_insertion_point(destructor:eicio.model.EventHeader)
    SharedDtor();
}

void EventHeader::SharedDtor() {
    detector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void EventHeader::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventHeader::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventHeader& EventHeader::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

EventHeader* EventHeader::New(::google::protobuf::Arena* arena) const {
    EventHeader* n = new EventHeader;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void EventHeader::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.EventHeader)
    payloadcollections_.Clear();
    detector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(
        &runnumber_, 0,
        reinterpret_cast<char*>(&nuniqueids_) - reinterpret_cast<char*>(&runnumber_) + sizeof(nuniqueids_));
}

bool EventHeader::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.EventHeader)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 version = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &version_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint64 runNumber = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(input, &runnumber_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint64 eventNumber = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(input, &eventnumber_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint64 timeStamp = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(input, &timestamp_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // string detector = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                                 this->mutable_detector()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->detector().data(), this->detector().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "eicio.model.EventHeader.detector"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(50u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.EventHeader.CollectionHeader payloadCollections = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(58u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, add_payloadcollections()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 nUniqueIDs = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(64u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &nuniqueids_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // string description = 16;
            case 16: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(130u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_description()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->description().data(), this->description().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "eicio.model.EventHeader.description"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.EventHeader)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.EventHeader)
    return false;
#undef DO_
}

void EventHeader::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.EventHeader)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 version = 1;
    if (this->version() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
    }

    // uint64 runNumber = 2;
    if (this->runnumber() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->runnumber(), output);
    }

    // uint64 eventNumber = 3;
    if (this->eventnumber() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->eventnumber(), output);
    }

    // uint64 timeStamp = 4;
    if (this->timestamp() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
    }

    // string detector = 5;
    if (this->detector().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detector().data(), this->detector().length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE, "eicio.model.EventHeader.detector");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(5, this->detector(), output);
    }

    // .eicio.model.Params params = 6;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(6, *this->params_, output);
    }

    // repeated .eicio.model.EventHeader.CollectionHeader payloadCollections = 7;
    for (unsigned int i = 0, n = this->payloadcollections_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, this->payloadcollections(i),
                                                                               output);
    }

    // uint32 nUniqueIDs = 8;
    if (this->nuniqueids() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nuniqueids(), output);
    }

    // string description = 16;
    if (this->description().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE, "eicio.model.EventHeader.description");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(16, this->description(),
                                                                              output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.EventHeader)
}

::google::protobuf::uint8* EventHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.EventHeader)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 version = 1;
    if (this->version() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
    }

    // uint64 runNumber = 2;
    if (this->runnumber() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->runnumber(), target);
    }

    // uint64 eventNumber = 3;
    if (this->eventnumber() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->eventnumber(), target);
    }

    // uint64 timeStamp = 4;
    if (this->timestamp() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
    }

    // string detector = 5;
    if (this->detector().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detector().data(), this->detector().length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE, "eicio.model.EventHeader.detector");
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(5, this->detector(), target);
    }

    // .eicio.model.Params params = 6;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            6, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.EventHeader.CollectionHeader payloadCollections = 7;
    for (unsigned int i = 0, n = this->payloadcollections_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            7, this->payloadcollections(i), deterministic, target);
    }

    // uint32 nUniqueIDs = 8;
    if (this->nuniqueids() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->nuniqueids(), target);
    }

    // string description = 16;
    if (this->description().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE, "eicio.model.EventHeader.description");
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(16, this->description(), target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.EventHeader)
    return target;
}

size_t EventHeader::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.EventHeader)
    size_t total_size = 0;

    // repeated .eicio.model.EventHeader.CollectionHeader payloadCollections = 7;
    {
        unsigned int count = this->payloadcollections_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                this->payloadcollections(i));
        }
    }

    // string detector = 5;
    if (this->detector().size() > 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->detector());
    }

    // string description = 16;
    if (this->description().size() > 0) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->description());
    }

    // .eicio.model.Params params = 6;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint64 runNumber = 2;
    if (this->runnumber() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->runnumber());
    }

    // uint64 eventNumber = 3;
    if (this->eventnumber() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->eventnumber());
    }

    // uint64 timeStamp = 4;
    if (this->timestamp() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->timestamp());
    }

    // uint32 version = 1;
    if (this->version() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->version());
    }

    // uint32 nUniqueIDs = 8;
    if (this->nuniqueids() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->nuniqueids());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void EventHeader::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.EventHeader)
    GOOGLE_DCHECK_NE(&from, this);
    const EventHeader* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const EventHeader>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.EventHeader)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.EventHeader)
        MergeFrom(*source);
    }
}

void EventHeader::MergeFrom(const EventHeader& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.EventHeader)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    payloadcollections_.MergeFrom(from.payloadcollections_);
    if (from.detector().size() > 0) {
        detector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                    from.detector_);
    }
    if (from.description().size() > 0) {
        description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                       from.description_);
    }
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.runnumber() != 0) {
        set_runnumber(from.runnumber());
    }
    if (from.eventnumber() != 0) {
        set_eventnumber(from.eventnumber());
    }
    if (from.timestamp() != 0) {
        set_timestamp(from.timestamp());
    }
    if (from.version() != 0) {
        set_version(from.version());
    }
    if (from.nuniqueids() != 0) {
        set_nuniqueids(from.nuniqueids());
    }
}

void EventHeader::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.EventHeader)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void EventHeader::CopyFrom(const EventHeader& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.EventHeader)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool EventHeader::IsInitialized() const { return true; }

void EventHeader::Swap(EventHeader* other) {
    if (other == this) return;
    InternalSwap(other);
}
void EventHeader::InternalSwap(EventHeader* other) {
    payloadcollections_.InternalSwap(&other->payloadcollections_);
    detector_.Swap(&other->detector_);
    description_.Swap(&other->description_);
    std::swap(params_, other->params_);
    std::swap(runnumber_, other->runnumber_);
    std::swap(eventnumber_, other->eventnumber_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(version_, other->version_);
    std::swap(nuniqueids_, other->nuniqueids_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventHeader::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventHeader

// uint32 version = 1;
void EventHeader::clear_version() { version_ = 0u; }
::google::protobuf::uint32 EventHeader::version() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.version)
    return version_;
}
void EventHeader::set_version(::google::protobuf::uint32 value) {
    version_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.version)
}

// uint64 runNumber = 2;
void EventHeader::clear_runnumber() { runnumber_ = GOOGLE_ULONGLONG(0); }
::google::protobuf::uint64 EventHeader::runnumber() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.runNumber)
    return runnumber_;
}
void EventHeader::set_runnumber(::google::protobuf::uint64 value) {
    runnumber_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.runNumber)
}

// uint64 eventNumber = 3;
void EventHeader::clear_eventnumber() { eventnumber_ = GOOGLE_ULONGLONG(0); }
::google::protobuf::uint64 EventHeader::eventnumber() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.eventNumber)
    return eventnumber_;
}
void EventHeader::set_eventnumber(::google::protobuf::uint64 value) {
    eventnumber_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.eventNumber)
}

// uint64 timeStamp = 4;
void EventHeader::clear_timestamp() { timestamp_ = GOOGLE_ULONGLONG(0); }
::google::protobuf::uint64 EventHeader::timestamp() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.timeStamp)
    return timestamp_;
}
void EventHeader::set_timestamp(::google::protobuf::uint64 value) {
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.timeStamp)
}

// string detector = 5;
void EventHeader::clear_detector() {
    detector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventHeader::detector() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.detector)
    return detector_.GetNoArena();
}
void EventHeader::set_detector(const ::std::string& value) {
    detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.detector)
}
#if LANG_CXX11
void EventHeader::set_detector(::std::string&& value) {
    detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:eicio.model.EventHeader.detector)
}
#endif
void EventHeader::set_detector(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:eicio.model.EventHeader.detector)
}
void EventHeader::set_detector(const char* value, size_t size) {
    detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:eicio.model.EventHeader.detector)
}
::std::string* EventHeader::mutable_detector() {
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.detector)
    return detector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventHeader::release_detector() {
    // @@protoc_insertion_point(field_release:eicio.model.EventHeader.detector)

    return detector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventHeader::set_allocated_detector(::std::string* detector) {
    if (detector != NULL) {
    } else {
    }
    detector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detector);
    // @@protoc_insertion_point(field_set_allocated:eicio.model.EventHeader.detector)
}

// .eicio.model.Params params = 6;
bool EventHeader::has_params() const { return this != internal_default_instance() && params_ != NULL; }
void EventHeader::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& EventHeader::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* EventHeader::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.params)
    return params_;
}
::eicio::model::Params* EventHeader::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.EventHeader.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void EventHeader::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.EventHeader.params)
}

// repeated .eicio.model.EventHeader.CollectionHeader payloadCollections = 7;
int EventHeader::payloadcollections_size() const { return payloadcollections_.size(); }
void EventHeader::clear_payloadcollections() { payloadcollections_.Clear(); }
const ::eicio::model::EventHeader_CollectionHeader& EventHeader::payloadcollections(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.payloadCollections)
    return payloadcollections_.Get(index);
}
::eicio::model::EventHeader_CollectionHeader* EventHeader::mutable_payloadcollections(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.payloadCollections)
    return payloadcollections_.Mutable(index);
}
::eicio::model::EventHeader_CollectionHeader* EventHeader::add_payloadcollections() {
    // @@protoc_insertion_point(field_add:eicio.model.EventHeader.payloadCollections)
    return payloadcollections_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::EventHeader_CollectionHeader>*
EventHeader::mutable_payloadcollections() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.EventHeader.payloadCollections)
    return &payloadcollections_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::EventHeader_CollectionHeader>&
EventHeader::payloadcollections() const {
    // @@protoc_insertion_point(field_list:eicio.model.EventHeader.payloadCollections)
    return payloadcollections_;
}

// uint32 nUniqueIDs = 8;
void EventHeader::clear_nuniqueids() { nuniqueids_ = 0u; }
::google::protobuf::uint32 EventHeader::nuniqueids() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.nUniqueIDs)
    return nuniqueids_;
}
void EventHeader::set_nuniqueids(::google::protobuf::uint32 value) {
    nuniqueids_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.nUniqueIDs)
}

// string description = 16;
void EventHeader::clear_description() {
    description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventHeader::description() const {
    // @@protoc_insertion_point(field_get:eicio.model.EventHeader.description)
    return description_.GetNoArena();
}
void EventHeader::set_description(const ::std::string& value) {
    description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:eicio.model.EventHeader.description)
}
#if LANG_CXX11
void EventHeader::set_description(::std::string&& value) {
    description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:eicio.model.EventHeader.description)
}
#endif
void EventHeader::set_description(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                            ::std::string(value));
    // @@protoc_insertion_point(field_set_char:eicio.model.EventHeader.description)
}
void EventHeader::set_description(const char* value, size_t size) {
    description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                            ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:eicio.model.EventHeader.description)
}
::std::string* EventHeader::mutable_description() {
    // @@protoc_insertion_point(field_mutable:eicio.model.EventHeader.description)
    return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventHeader::release_description() {
    // @@protoc_insertion_point(field_release:eicio.model.EventHeader.description)

    return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventHeader::set_allocated_description(::std::string* description) {
    if (description != NULL) {
    } else {
    }
    description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                     description);
    // @@protoc_insertion_point(field_set_allocated:eicio.model.EventHeader.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntParams::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntParams::IntParams() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.IntParams)
}
IntParams::IntParams(const IntParams& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), array_(from.array_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:eicio.model.IntParams)
}

void IntParams::SharedCtor() { _cached_size_ = 0; }

IntParams::~IntParams() {
    // @@protoc_insertion_point(destructor:eicio.model.IntParams)
    SharedDtor();
}

void IntParams::SharedDtor() {}

void IntParams::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntParams::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntParams& IntParams::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

IntParams* IntParams::New(::google::protobuf::Arena* arena) const {
    IntParams* n = new IntParams;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void IntParams::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.IntParams)
    array_.Clear();
}

bool IntParams::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.IntParams)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // repeated int32 array = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(10u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, this->mutable_array())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        1, 10u, input, this->mutable_array())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.IntParams)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.IntParams)
    return false;
#undef DO_
}

void IntParams::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.IntParams)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated int32 array = 1;
    if (this->array_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_array_cached_byte_size_);
    }
    for (int i = 0, n = this->array_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(this->array(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.IntParams)
}

::google::protobuf::uint8* IntParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.IntParams)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated int32 array = 1;
    if (this->array_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_array_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32NoTagToArray(this->array_, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.IntParams)
    return target;
}

size_t IntParams::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.IntParams)
    size_t total_size = 0;

    // repeated int32 array = 1;
    {
        size_t data_size = ::google::protobuf::internal::WireFormatLite::Int32Size(this->array_);
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _array_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void IntParams::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.IntParams)
    GOOGLE_DCHECK_NE(&from, this);
    const IntParams* source = ::google::protobuf::internal::DynamicCastToGenerated<const IntParams>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.IntParams)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.IntParams)
        MergeFrom(*source);
    }
}

void IntParams::MergeFrom(const IntParams& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.IntParams)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    array_.MergeFrom(from.array_);
}

void IntParams::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.IntParams)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void IntParams::CopyFrom(const IntParams& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.IntParams)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool IntParams::IsInitialized() const { return true; }

void IntParams::Swap(IntParams* other) {
    if (other == this) return;
    InternalSwap(other);
}
void IntParams::InternalSwap(IntParams* other) {
    array_.InternalSwap(&other->array_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntParams::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IntParams

// repeated int32 array = 1;
int IntParams::array_size() const { return array_.size(); }
void IntParams::clear_array() { array_.Clear(); }
::google::protobuf::int32 IntParams::array(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.IntParams.array)
    return array_.Get(index);
}
void IntParams::set_array(int index, ::google::protobuf::int32 value) {
    array_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.IntParams.array)
}
void IntParams::add_array(::google::protobuf::int32 value) {
    array_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.IntParams.array)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32>& IntParams::array() const {
    // @@protoc_insertion_point(field_list:eicio.model.IntParams.array)
    return array_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32>* IntParams::mutable_array() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.IntParams.array)
    return &array_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatParams::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatParams::FloatParams() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.FloatParams)
}
FloatParams::FloatParams(const FloatParams& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), array_(from.array_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:eicio.model.FloatParams)
}

void FloatParams::SharedCtor() { _cached_size_ = 0; }

FloatParams::~FloatParams() {
    // @@protoc_insertion_point(destructor:eicio.model.FloatParams)
    SharedDtor();
}

void FloatParams::SharedDtor() {}

void FloatParams::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatParams::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FloatParams& FloatParams::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

FloatParams* FloatParams::New(::google::protobuf::Arena* arena) const {
    FloatParams* n = new FloatParams;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void FloatParams::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.FloatParams)
    array_.Clear();
}

bool FloatParams::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.FloatParams)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // repeated float array = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(10u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_array())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(13u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 10u, input, this->mutable_array())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.FloatParams)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.FloatParams)
    return false;
#undef DO_
}

void FloatParams::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.FloatParams)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated float array = 1;
    if (this->array_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_array_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->array().data(),
                                                                      this->array_size(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.FloatParams)
}

::google::protobuf::uint8* FloatParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.FloatParams)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated float array = 1;
    if (this->array_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_array_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->array_, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.FloatParams)
    return target;
}

size_t FloatParams::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.FloatParams)
    size_t total_size = 0;

    // repeated float array = 1;
    {
        unsigned int count = this->array_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _array_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void FloatParams::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.FloatParams)
    GOOGLE_DCHECK_NE(&from, this);
    const FloatParams* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const FloatParams>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.FloatParams)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.FloatParams)
        MergeFrom(*source);
    }
}

void FloatParams::MergeFrom(const FloatParams& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.FloatParams)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    array_.MergeFrom(from.array_);
}

void FloatParams::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.FloatParams)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void FloatParams::CopyFrom(const FloatParams& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.FloatParams)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool FloatParams::IsInitialized() const { return true; }

void FloatParams::Swap(FloatParams* other) {
    if (other == this) return;
    InternalSwap(other);
}
void FloatParams::InternalSwap(FloatParams* other) {
    array_.InternalSwap(&other->array_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FloatParams::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatParams

// repeated float array = 1;
int FloatParams::array_size() const { return array_.size(); }
void FloatParams::clear_array() { array_.Clear(); }
float FloatParams::array(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.FloatParams.array)
    return array_.Get(index);
}
void FloatParams::set_array(int index, float value) {
    array_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.FloatParams.array)
}
void FloatParams::add_array(float value) {
    array_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.FloatParams.array)
}
const ::google::protobuf::RepeatedField<float>& FloatParams::array() const {
    // @@protoc_insertion_point(field_list:eicio.model.FloatParams.array)
    return array_;
}
::google::protobuf::RepeatedField<float>* FloatParams::mutable_array() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.FloatParams.array)
    return &array_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringParams::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringParams::StringParams() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.StringParams)
}
StringParams::StringParams(const StringParams& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), array_(from.array_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:eicio.model.StringParams)
}

void StringParams::SharedCtor() { _cached_size_ = 0; }

StringParams::~StringParams() {
    // @@protoc_insertion_point(destructor:eicio.model.StringParams)
    SharedDtor();
}

void StringParams::SharedDtor() {}

void StringParams::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringParams::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StringParams& StringParams::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

StringParams* StringParams::New(::google::protobuf::Arena* arena) const {
    StringParams* n = new StringParams;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void StringParams::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.StringParams)
    array_.Clear();
}

bool StringParams::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.StringParams)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // repeated string array = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(10u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, this->add_array()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->array(this->array_size() - 1).data(),
                        this->array(this->array_size() - 1).length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "eicio.model.StringParams.array"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.StringParams)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.StringParams)
    return false;
#undef DO_
}

void StringParams::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.StringParams)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated string array = 1;
    for (int i = 0, n = this->array_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->array(i).data(), this->array(i).length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE, "eicio.model.StringParams.array");
        ::google::protobuf::internal::WireFormatLite::WriteString(1, this->array(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.StringParams)
}

::google::protobuf::uint8* StringParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.StringParams)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated string array = 1;
    for (int i = 0, n = this->array_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->array(i).data(), this->array(i).length(),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE, "eicio.model.StringParams.array");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(1, this->array(i), target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.StringParams)
    return target;
}

size_t StringParams::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.StringParams)
    size_t total_size = 0;

    // repeated string array = 1;
    total_size += 1 * ::google::protobuf::internal::FromIntSize(this->array_size());
    for (int i = 0, n = this->array_size(); i < n; i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(this->array(i));
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void StringParams::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.StringParams)
    GOOGLE_DCHECK_NE(&from, this);
    const StringParams* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const StringParams>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.StringParams)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.StringParams)
        MergeFrom(*source);
    }
}

void StringParams::MergeFrom(const StringParams& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.StringParams)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    array_.MergeFrom(from.array_);
}

void StringParams::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.StringParams)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void StringParams::CopyFrom(const StringParams& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.StringParams)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool StringParams::IsInitialized() const { return true; }

void StringParams::Swap(StringParams* other) {
    if (other == this) return;
    InternalSwap(other);
}
void StringParams::InternalSwap(StringParams* other) {
    array_.InternalSwap(&other->array_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringParams::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringParams

// repeated string array = 1;
int StringParams::array_size() const { return array_.size(); }
void StringParams::clear_array() { array_.Clear(); }
const ::std::string& StringParams::array(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.StringParams.array)
    return array_.Get(index);
}
::std::string* StringParams::mutable_array(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.StringParams.array)
    return array_.Mutable(index);
}
void StringParams::set_array(int index, const ::std::string& value) {
    // @@protoc_insertion_point(field_set:eicio.model.StringParams.array)
    array_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void StringParams::set_array(int index, ::std::string&& value) {
    // @@protoc_insertion_point(field_set:eicio.model.StringParams.array)
    array_.Mutable(index)->assign(std::move(value));
}
#endif
void StringParams::set_array(int index, const char* value) {
    GOOGLE_DCHECK(value != NULL);
    array_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:eicio.model.StringParams.array)
}
void StringParams::set_array(int index, const char* value, size_t size) {
    array_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:eicio.model.StringParams.array)
}
::std::string* StringParams::add_array() {
    // @@protoc_insertion_point(field_add_mutable:eicio.model.StringParams.array)
    return array_.Add();
}
void StringParams::add_array(const ::std::string& value) {
    array_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:eicio.model.StringParams.array)
}
#if LANG_CXX11
void StringParams::add_array(::std::string&& value) {
    array_.Add(std::move(value));
    // @@protoc_insertion_point(field_add:eicio.model.StringParams.array)
}
#endif
void StringParams::add_array(const char* value) {
    GOOGLE_DCHECK(value != NULL);
    array_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:eicio.model.StringParams.array)
}
void StringParams::add_array(const char* value, size_t size) {
    array_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:eicio.model.StringParams.array)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>& StringParams::array() const {
    // @@protoc_insertion_point(field_list:eicio.model.StringParams.array)
    return array_;
}
::google::protobuf::RepeatedPtrField< ::std::string>* StringParams::mutable_array() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.StringParams.array)
    return &array_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Params::Params_IntsEntry::Params_IntsEntry() {}
Params::Params_IntsEntry::Params_IntsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Params::Params_IntsEntry::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[5];
}
void Params::Params_IntsEntry::MergeFrom(const ::google::protobuf::Message& other) {
    ::google::protobuf::Message::MergeFrom(other);
}
void Params::Params_IntsEntry::MergeFrom(const Params_IntsEntry& other) { MergeFromInternal(other); }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Params::Params_FloatsEntry::Params_FloatsEntry() {}
Params::Params_FloatsEntry::Params_FloatsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Params::Params_FloatsEntry::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[6];
}
void Params::Params_FloatsEntry::MergeFrom(const ::google::protobuf::Message& other) {
    ::google::protobuf::Message::MergeFrom(other);
}
void Params::Params_FloatsEntry::MergeFrom(const Params_FloatsEntry& other) { MergeFromInternal(other); }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Params::Params_StringsEntry::Params_StringsEntry() {}
Params::Params_StringsEntry::Params_StringsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Params::Params_StringsEntry::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[7];
}
void Params::Params_StringsEntry::MergeFrom(const ::google::protobuf::Message& other) {
    ::google::protobuf::Message::MergeFrom(other);
}
void Params::Params_StringsEntry::MergeFrom(const Params_StringsEntry& other) { MergeFromInternal(other); }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Params::kIntsFieldNumber;
const int Params::kFloatsFieldNumber;
const int Params::kStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Params::Params() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.Params)
}
Params::Params(const Params& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ints_.MergeFrom(from.ints_);
    floats_.MergeFrom(from.floats_);
    strings_.MergeFrom(from.strings_);
    // @@protoc_insertion_point(copy_constructor:eicio.model.Params)
}

void Params::SharedCtor() { _cached_size_ = 0; }

Params::~Params() {
    // @@protoc_insertion_point(destructor:eicio.model.Params)
    SharedDtor();
}

void Params::SharedDtor() {}

void Params::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Params::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Params& Params::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

Params* Params::New(::google::protobuf::Arena* arena) const {
    Params* n = new Params;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Params::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.Params)
    ints_.Clear();
    floats_.Clear();
    strings_.Clear();
}

bool Params::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.Params)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // map<string, .eicio.model.IntParams> ints = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(10u)) {
                    Params_IntsEntry::Parser<
                        ::google::protobuf::internal::MapField<
                            Params_IntsEntry, ::std::string, ::eicio::model::IntParams,
                            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0>,
                        ::google::protobuf::Map< ::std::string, ::eicio::model::IntParams> >
                        parser(&ints_);
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input, &parser));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        parser.key().data(), parser.key().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "eicio.model.Params.IntsEntry.key"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // map<string, .eicio.model.FloatParams> floats = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(18u)) {
                    Params_FloatsEntry::Parser<
                        ::google::protobuf::internal::MapField<
                            Params_FloatsEntry, ::std::string, ::eicio::model::FloatParams,
                            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0>,
                        ::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams> >
                        parser(&floats_);
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input, &parser));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        parser.key().data(), parser.key().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "eicio.model.Params.FloatsEntry.key"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // map<string, .eicio.model.StringParams> strings = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    Params_StringsEntry::Parser<
                        ::google::protobuf::internal::MapField<
                            Params_StringsEntry, ::std::string, ::eicio::model::StringParams,
                            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE, 0>,
                        ::google::protobuf::Map< ::std::string, ::eicio::model::StringParams> >
                        parser(&strings_);
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input, &parser));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        parser.key().data(), parser.key().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "eicio.model.Params.StringsEntry.key"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.Params)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.Params)
    return false;
#undef DO_
}

void Params::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.Params)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // map<string, .eicio.model.IntParams> ints = 1;
    if (!this->ints().empty()) {
        typedef ::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>::const_pointer ConstPtr;
        typedef ConstPtr SortItem;
        typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
        struct Utf8Check {
            static void Check(ConstPtr p) {
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    p->first.data(), p->first.length(),
                    ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                    "eicio.model.Params.IntsEntry.key");
            }
        };

        if (output->IsSerializationDeterministic() && this->ints().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->ints().size()]);
            typedef ::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>::size_type size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>::const_iterator
                     it = this->ints().begin();
                 it != this->ints().end(); ++it, ++n) {
                items[n] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[n], Less());
            ::google::protobuf::scoped_ptr<Params_IntsEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(ints_.NewEntryWrapper(items[i]->first, items[i]->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
                Utf8Check::Check(items[i]);
            }
        } else {
            ::google::protobuf::scoped_ptr<Params_IntsEntry> entry;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>::const_iterator it =
                     this->ints().begin();
                 it != this->ints().end(); ++it) {
                entry.reset(ints_.NewEntryWrapper(it->first, it->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
                Utf8Check::Check(&*it);
            }
        }
    }

    // map<string, .eicio.model.FloatParams> floats = 2;
    if (!this->floats().empty()) {
        typedef ::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>::const_pointer ConstPtr;
        typedef ConstPtr SortItem;
        typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
        struct Utf8Check {
            static void Check(ConstPtr p) {
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    p->first.data(), p->first.length(),
                    ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                    "eicio.model.Params.FloatsEntry.key");
            }
        };

        if (output->IsSerializationDeterministic() && this->floats().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->floats().size()]);
            typedef ::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>::size_type size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>::const_iterator
                     it = this->floats().begin();
                 it != this->floats().end(); ++it, ++n) {
                items[n] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[n], Less());
            ::google::protobuf::scoped_ptr<Params_FloatsEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(floats_.NewEntryWrapper(items[i]->first, items[i]->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
                Utf8Check::Check(items[i]);
            }
        } else {
            ::google::protobuf::scoped_ptr<Params_FloatsEntry> entry;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>::const_iterator it =
                     this->floats().begin();
                 it != this->floats().end(); ++it) {
                entry.reset(floats_.NewEntryWrapper(it->first, it->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
                Utf8Check::Check(&*it);
            }
        }
    }

    // map<string, .eicio.model.StringParams> strings = 3;
    if (!this->strings().empty()) {
        typedef ::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>::const_pointer ConstPtr;
        typedef ConstPtr SortItem;
        typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
        struct Utf8Check {
            static void Check(ConstPtr p) {
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    p->first.data(), p->first.length(),
                    ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                    "eicio.model.Params.StringsEntry.key");
            }
        };

        if (output->IsSerializationDeterministic() && this->strings().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->strings().size()]);
            typedef ::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>::size_type
                size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>::const_iterator
                     it = this->strings().begin();
                 it != this->strings().end(); ++it, ++n) {
                items[n] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[n], Less());
            ::google::protobuf::scoped_ptr<Params_StringsEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(strings_.NewEntryWrapper(items[i]->first, items[i]->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
                Utf8Check::Check(items[i]);
            }
        } else {
            ::google::protobuf::scoped_ptr<Params_StringsEntry> entry;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>::const_iterator it =
                     this->strings().begin();
                 it != this->strings().end(); ++it) {
                entry.reset(strings_.NewEntryWrapper(it->first, it->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
                Utf8Check::Check(&*it);
            }
        }
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.Params)
}

::google::protobuf::uint8* Params::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.Params)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // map<string, .eicio.model.IntParams> ints = 1;
    if (!this->ints().empty()) {
        typedef ::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>::const_pointer ConstPtr;
        typedef ConstPtr SortItem;
        typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
        struct Utf8Check {
            static void Check(ConstPtr p) {
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    p->first.data(), p->first.length(),
                    ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                    "eicio.model.Params.IntsEntry.key");
            }
        };

        if (deterministic && this->ints().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->ints().size()]);
            typedef ::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>::size_type size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>::const_iterator
                     it = this->ints().begin();
                 it != this->ints().end(); ++it, ++n) {
                items[n] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[n], Less());
            ::google::protobuf::scoped_ptr<Params_IntsEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(ints_.NewEntryWrapper(items[i]->first, items[i]->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    1, *entry, deterministic, target);
                ;
                Utf8Check::Check(items[i]);
            }
        } else {
            ::google::protobuf::scoped_ptr<Params_IntsEntry> entry;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>::const_iterator it =
                     this->ints().begin();
                 it != this->ints().end(); ++it) {
                entry.reset(ints_.NewEntryWrapper(it->first, it->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    1, *entry, deterministic, target);
                ;
                Utf8Check::Check(&*it);
            }
        }
    }

    // map<string, .eicio.model.FloatParams> floats = 2;
    if (!this->floats().empty()) {
        typedef ::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>::const_pointer ConstPtr;
        typedef ConstPtr SortItem;
        typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
        struct Utf8Check {
            static void Check(ConstPtr p) {
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    p->first.data(), p->first.length(),
                    ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                    "eicio.model.Params.FloatsEntry.key");
            }
        };

        if (deterministic && this->floats().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->floats().size()]);
            typedef ::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>::size_type size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>::const_iterator
                     it = this->floats().begin();
                 it != this->floats().end(); ++it, ++n) {
                items[n] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[n], Less());
            ::google::protobuf::scoped_ptr<Params_FloatsEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(floats_.NewEntryWrapper(items[i]->first, items[i]->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    2, *entry, deterministic, target);
                ;
                Utf8Check::Check(items[i]);
            }
        } else {
            ::google::protobuf::scoped_ptr<Params_FloatsEntry> entry;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>::const_iterator it =
                     this->floats().begin();
                 it != this->floats().end(); ++it) {
                entry.reset(floats_.NewEntryWrapper(it->first, it->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    2, *entry, deterministic, target);
                ;
                Utf8Check::Check(&*it);
            }
        }
    }

    // map<string, .eicio.model.StringParams> strings = 3;
    if (!this->strings().empty()) {
        typedef ::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>::const_pointer ConstPtr;
        typedef ConstPtr SortItem;
        typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
        struct Utf8Check {
            static void Check(ConstPtr p) {
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    p->first.data(), p->first.length(),
                    ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                    "eicio.model.Params.StringsEntry.key");
            }
        };

        if (deterministic && this->strings().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->strings().size()]);
            typedef ::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>::size_type
                size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>::const_iterator
                     it = this->strings().begin();
                 it != this->strings().end(); ++it, ++n) {
                items[n] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[n], Less());
            ::google::protobuf::scoped_ptr<Params_StringsEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(strings_.NewEntryWrapper(items[i]->first, items[i]->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    3, *entry, deterministic, target);
                ;
                Utf8Check::Check(items[i]);
            }
        } else {
            ::google::protobuf::scoped_ptr<Params_StringsEntry> entry;
            for (::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>::const_iterator it =
                     this->strings().begin();
                 it != this->strings().end(); ++it) {
                entry.reset(strings_.NewEntryWrapper(it->first, it->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    3, *entry, deterministic, target);
                ;
                Utf8Check::Check(&*it);
            }
        }
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.Params)
    return target;
}

size_t Params::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.Params)
    size_t total_size = 0;

    // map<string, .eicio.model.IntParams> ints = 1;
    total_size += 1 * ::google::protobuf::internal::FromIntSize(this->ints_size());
    {
        ::google::protobuf::scoped_ptr<Params_IntsEntry> entry;
        for (::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>::const_iterator it =
                 this->ints().begin();
             it != this->ints().end(); ++it) {
            entry.reset(ints_.NewEntryWrapper(it->first, it->second));
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*entry);
        }
    }

    // map<string, .eicio.model.FloatParams> floats = 2;
    total_size += 1 * ::google::protobuf::internal::FromIntSize(this->floats_size());
    {
        ::google::protobuf::scoped_ptr<Params_FloatsEntry> entry;
        for (::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>::const_iterator it =
                 this->floats().begin();
             it != this->floats().end(); ++it) {
            entry.reset(floats_.NewEntryWrapper(it->first, it->second));
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*entry);
        }
    }

    // map<string, .eicio.model.StringParams> strings = 3;
    total_size += 1 * ::google::protobuf::internal::FromIntSize(this->strings_size());
    {
        ::google::protobuf::scoped_ptr<Params_StringsEntry> entry;
        for (::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>::const_iterator it =
                 this->strings().begin();
             it != this->strings().end(); ++it) {
            entry.reset(strings_.NewEntryWrapper(it->first, it->second));
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*entry);
        }
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Params::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.Params)
    GOOGLE_DCHECK_NE(&from, this);
    const Params* source = ::google::protobuf::internal::DynamicCastToGenerated<const Params>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.Params)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.Params)
        MergeFrom(*source);
    }
}

void Params::MergeFrom(const Params& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.Params)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    ints_.MergeFrom(from.ints_);
    floats_.MergeFrom(from.floats_);
    strings_.MergeFrom(from.strings_);
}

void Params::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.Params)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Params::CopyFrom(const Params& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.Params)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Params::IsInitialized() const { return true; }

void Params::Swap(Params* other) {
    if (other == this) return;
    InternalSwap(other);
}
void Params::InternalSwap(Params* other) {
    ints_.Swap(&other->ints_);
    floats_.Swap(&other->floats_);
    strings_.Swap(&other->strings_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Params::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Params

// map<string, .eicio.model.IntParams> ints = 1;
int Params::ints_size() const { return ints_.size(); }
void Params::clear_ints() { ints_.Clear(); }
const ::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>& Params::ints() const {
    // @@protoc_insertion_point(field_map:eicio.model.Params.ints)
    return ints_.GetMap();
}
::google::protobuf::Map< ::std::string, ::eicio::model::IntParams>* Params::mutable_ints() {
    // @@protoc_insertion_point(field_mutable_map:eicio.model.Params.ints)
    return ints_.MutableMap();
}

// map<string, .eicio.model.FloatParams> floats = 2;
int Params::floats_size() const { return floats_.size(); }
void Params::clear_floats() { floats_.Clear(); }
const ::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>& Params::floats() const {
    // @@protoc_insertion_point(field_map:eicio.model.Params.floats)
    return floats_.GetMap();
}
::google::protobuf::Map< ::std::string, ::eicio::model::FloatParams>* Params::mutable_floats() {
    // @@protoc_insertion_point(field_mutable_map:eicio.model.Params.floats)
    return floats_.MutableMap();
}

// map<string, .eicio.model.StringParams> strings = 3;
int Params::strings_size() const { return strings_.size(); }
void Params::clear_strings() { strings_.Clear(); }
const ::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>& Params::strings() const {
    // @@protoc_insertion_point(field_map:eicio.model.Params.strings)
    return strings_.GetMap();
}
::google::protobuf::Map< ::std::string, ::eicio::model::StringParams>* Params::mutable_strings() {
    // @@protoc_insertion_point(field_mutable_map:eicio.model.Params.strings)
    return strings_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reference::kCollIDFieldNumber;
const int Reference::kEntryIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reference::Reference() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.Reference)
}
Reference::Reference(const Reference& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&collid_, &from.collid_,
             reinterpret_cast<char*>(&entryid_) - reinterpret_cast<char*>(&collid_) + sizeof(entryid_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.Reference)
}

void Reference::SharedCtor() {
    ::memset(&collid_, 0,
             reinterpret_cast<char*>(&entryid_) - reinterpret_cast<char*>(&collid_) + sizeof(entryid_));
    _cached_size_ = 0;
}

Reference::~Reference() {
    // @@protoc_insertion_point(destructor:eicio.model.Reference)
    SharedDtor();
}

void Reference::SharedDtor() {}

void Reference::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reference::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reference& Reference::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

Reference* Reference::New(::google::protobuf::Arena* arena) const {
    Reference* n = new Reference;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Reference::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.Reference)
    ::memset(&collid_, 0,
             reinterpret_cast<char*>(&entryid_) - reinterpret_cast<char*>(&collid_) + sizeof(entryid_));
}

bool Reference::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.Reference)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 collID = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &collid_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 entryID = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &entryid_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.Reference)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.Reference)
    return false;
#undef DO_
}

void Reference::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.Reference)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 collID = 1;
    if (this->collid() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->collid(), output);
    }

    // uint32 entryID = 2;
    if (this->entryid() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entryid(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.Reference)
}

::google::protobuf::uint8* Reference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.Reference)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 collID = 1;
    if (this->collid() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->collid(), target);
    }

    // uint32 entryID = 2;
    if (this->entryid() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entryid(), target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.Reference)
    return target;
}

size_t Reference::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.Reference)
    size_t total_size = 0;

    // uint32 collID = 1;
    if (this->collid() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->collid());
    }

    // uint32 entryID = 2;
    if (this->entryid() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->entryid());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Reference::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.Reference)
    GOOGLE_DCHECK_NE(&from, this);
    const Reference* source = ::google::protobuf::internal::DynamicCastToGenerated<const Reference>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.Reference)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.Reference)
        MergeFrom(*source);
    }
}

void Reference::MergeFrom(const Reference& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.Reference)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.collid() != 0) {
        set_collid(from.collid());
    }
    if (from.entryid() != 0) {
        set_entryid(from.entryid());
    }
}

void Reference::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.Reference)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.Reference)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Reference::IsInitialized() const { return true; }

void Reference::Swap(Reference* other) {
    if (other == this) return;
    InternalSwap(other);
}
void Reference::InternalSwap(Reference* other) {
    std::swap(collid_, other->collid_);
    std::swap(entryid_, other->entryid_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reference::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reference

// uint32 collID = 1;
void Reference::clear_collid() { collid_ = 0u; }
::google::protobuf::uint32 Reference::collid() const {
    // @@protoc_insertion_point(field_get:eicio.model.Reference.collID)
    return collid_;
}
void Reference::set_collid(::google::protobuf::uint32 value) {
    collid_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Reference.collID)
}

// uint32 entryID = 2;
void Reference::clear_entryid() { entryid_ = 0u; }
::google::protobuf::uint32 Reference::entryid() const {
    // @@protoc_insertion_point(field_get:eicio.model.Reference.entryID)
    return entryid_;
}
void Reference::set_entryid(::google::protobuf::uint32 value) {
    entryid_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Reference.entryID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParticleID::kLikelihoodFieldNumber;
const int ParticleID::kTypeFieldNumber;
const int ParticleID::kPDGFieldNumber;
const int ParticleID::kAlgTypeFieldNumber;
const int ParticleID::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParticleID::ParticleID() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.ParticleID)
}
ParticleID::ParticleID(const ParticleID& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), params_(from.params_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&likelihood_, &from.likelihood_,
             reinterpret_cast<char*>(&algtype_) - reinterpret_cast<char*>(&likelihood_) + sizeof(algtype_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.ParticleID)
}

void ParticleID::SharedCtor() {
    ::memset(&likelihood_, 0,
             reinterpret_cast<char*>(&algtype_) - reinterpret_cast<char*>(&likelihood_) + sizeof(algtype_));
    _cached_size_ = 0;
}

ParticleID::~ParticleID() {
    // @@protoc_insertion_point(destructor:eicio.model.ParticleID)
    SharedDtor();
}

void ParticleID::SharedDtor() {}

void ParticleID::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticleID::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParticleID& ParticleID::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

ParticleID* ParticleID::New(::google::protobuf::Arena* arena) const {
    ParticleID* n = new ParticleID;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ParticleID::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.ParticleID)
    params_.Clear();
    ::memset(&likelihood_, 0,
             reinterpret_cast<char*>(&algtype_) - reinterpret_cast<char*>(&likelihood_) + sizeof(algtype_));
}

bool ParticleID::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.ParticleID)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // float likelihood = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(13u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input,
                                                                                          &likelihood_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 type = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &type_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 PDG = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &pdg_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 algType = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &algtype_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float params = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_params())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 42u, input, this->mutable_params())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.ParticleID)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.ParticleID)
    return false;
#undef DO_
}

void ParticleID::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.ParticleID)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // float likelihood = 1;
    if (this->likelihood() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->likelihood(), output);
    }

    // int32 type = 2;
    if (this->type() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
    }

    // int32 PDG = 3;
    if (this->pdg() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pdg(), output);
    }

    // int32 algType = 4;
    if (this->algtype() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->algtype(), output);
    }

    // repeated float params = 5;
    if (this->params_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_params_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->params().data(),
                                                                      this->params_size(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.ParticleID)
}

::google::protobuf::uint8* ParticleID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.ParticleID)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // float likelihood = 1;
    if (this->likelihood() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->likelihood(), target);
    }

    // int32 type = 2;
    if (this->type() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
    }

    // int32 PDG = 3;
    if (this->pdg() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pdg(), target);
    }

    // int32 algType = 4;
    if (this->algtype() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->algtype(), target);
    }

    // repeated float params = 5;
    if (this->params_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_params_cached_byte_size_,
                                                                                 target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->params_, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.ParticleID)
    return target;
}

size_t ParticleID::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.ParticleID)
    size_t total_size = 0;

    // repeated float params = 5;
    {
        unsigned int count = this->params_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _params_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // float likelihood = 1;
    if (this->likelihood() != 0) {
        total_size += 1 + 4;
    }

    // int32 type = 2;
    if (this->type() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->type());
    }

    // int32 PDG = 3;
    if (this->pdg() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->pdg());
    }

    // int32 algType = 4;
    if (this->algtype() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->algtype());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ParticleID::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.ParticleID)
    GOOGLE_DCHECK_NE(&from, this);
    const ParticleID* source = ::google::protobuf::internal::DynamicCastToGenerated<const ParticleID>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.ParticleID)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.ParticleID)
        MergeFrom(*source);
    }
}

void ParticleID::MergeFrom(const ParticleID& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.ParticleID)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    params_.MergeFrom(from.params_);
    if (from.likelihood() != 0) {
        set_likelihood(from.likelihood());
    }
    if (from.type() != 0) {
        set_type(from.type());
    }
    if (from.pdg() != 0) {
        set_pdg(from.pdg());
    }
    if (from.algtype() != 0) {
        set_algtype(from.algtype());
    }
}

void ParticleID::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.ParticleID)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void ParticleID::CopyFrom(const ParticleID& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.ParticleID)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ParticleID::IsInitialized() const { return true; }

void ParticleID::Swap(ParticleID* other) {
    if (other == this) return;
    InternalSwap(other);
}
void ParticleID::InternalSwap(ParticleID* other) {
    params_.InternalSwap(&other->params_);
    std::swap(likelihood_, other->likelihood_);
    std::swap(type_, other->type_);
    std::swap(pdg_, other->pdg_);
    std::swap(algtype_, other->algtype_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParticleID::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParticleID

// float likelihood = 1;
void ParticleID::clear_likelihood() { likelihood_ = 0; }
float ParticleID::likelihood() const {
    // @@protoc_insertion_point(field_get:eicio.model.ParticleID.likelihood)
    return likelihood_;
}
void ParticleID::set_likelihood(float value) {
    likelihood_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ParticleID.likelihood)
}

// int32 type = 2;
void ParticleID::clear_type() { type_ = 0; }
::google::protobuf::int32 ParticleID::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.ParticleID.type)
    return type_;
}
void ParticleID::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ParticleID.type)
}

// int32 PDG = 3;
void ParticleID::clear_pdg() { pdg_ = 0; }
::google::protobuf::int32 ParticleID::pdg() const {
    // @@protoc_insertion_point(field_get:eicio.model.ParticleID.PDG)
    return pdg_;
}
void ParticleID::set_pdg(::google::protobuf::int32 value) {
    pdg_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ParticleID.PDG)
}

// int32 algType = 4;
void ParticleID::clear_algtype() { algtype_ = 0; }
::google::protobuf::int32 ParticleID::algtype() const {
    // @@protoc_insertion_point(field_get:eicio.model.ParticleID.algType)
    return algtype_;
}
void ParticleID::set_algtype(::google::protobuf::int32 value) {
    algtype_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ParticleID.algType)
}

// repeated float params = 5;
int ParticleID::params_size() const { return params_.size(); }
void ParticleID::clear_params() { params_.Clear(); }
float ParticleID::params(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.ParticleID.params)
    return params_.Get(index);
}
void ParticleID::set_params(int index, float value) {
    params_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.ParticleID.params)
}
void ParticleID::add_params(float value) {
    params_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.ParticleID.params)
}
const ::google::protobuf::RepeatedField<float>& ParticleID::params() const {
    // @@protoc_insertion_point(field_list:eicio.model.ParticleID.params)
    return params_;
}
::google::protobuf::RepeatedField<float>* ParticleID::mutable_params() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.ParticleID.params)
    return &params_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MCParticle::kIdFieldNumber;
const int MCParticle::kParentsFieldNumber;
const int MCParticle::kChildrenFieldNumber;
const int MCParticle::kPDGFieldNumber;
const int MCParticle::kVertexFieldNumber;
const int MCParticle::kTimeFieldNumber;
const int MCParticle::kPFieldNumber;
const int MCParticle::kMassFieldNumber;
const int MCParticle::kChargeFieldNumber;
const int MCParticle::kPEndPointFieldNumber;
const int MCParticle::kSpinFieldNumber;
const int MCParticle::kColorFlowFieldNumber;
const int MCParticle::kGenStatusFieldNumber;
const int MCParticle::kSimStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MCParticle::MCParticle() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.MCParticle)
}
MCParticle::MCParticle(const MCParticle& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      parents_(from.parents_),
      children_(from.children_),
      vertex_(from.vertex_),
      p_(from.p_),
      pendpoint_(from.pendpoint_),
      spin_(from.spin_),
      colorflow_(from.colorflow_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&simstatus_) - reinterpret_cast<char*>(&id_) + sizeof(simstatus_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.MCParticle)
}

void MCParticle::SharedCtor() {
    ::memset(&id_, 0,
             reinterpret_cast<char*>(&simstatus_) - reinterpret_cast<char*>(&id_) + sizeof(simstatus_));
    _cached_size_ = 0;
}

MCParticle::~MCParticle() {
    // @@protoc_insertion_point(destructor:eicio.model.MCParticle)
    SharedDtor();
}

void MCParticle::SharedDtor() {}

void MCParticle::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MCParticle::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MCParticle& MCParticle::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

MCParticle* MCParticle::New(::google::protobuf::Arena* arena) const {
    MCParticle* n = new MCParticle;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void MCParticle::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.MCParticle)
    parents_.Clear();
    children_.Clear();
    vertex_.Clear();
    p_.Clear();
    pendpoint_.Clear();
    spin_.Clear();
    colorflow_.Clear();
    ::memset(&id_, 0,
             reinterpret_cast<char*>(&simstatus_) - reinterpret_cast<char*>(&id_) + sizeof(simstatus_));
}

bool MCParticle::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.MCParticle)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference parents = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(18u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_parents()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference children = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_children()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 PDG = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &pdg_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated double vertex = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, this->mutable_vertex())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(41u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        1, 42u, input, this->mutable_vertex())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float time = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &time_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated double p = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(58u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, this->mutable_p())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(57u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        1, 58u, input, this->mutable_p())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // double mass = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(65u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(input, &mass_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float charge = 9;
            case 9: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(77u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &charge_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated double PEndPoint = 10;
            case 10: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(82u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, this->mutable_pendpoint())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(81u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        1, 82u, input, this->mutable_pendpoint())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float spin = 11;
            case 11: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(90u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_spin())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(93u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 90u, input, this->mutable_spin())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated int32 colorFlow = 12;
            case 12: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(98u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, this->mutable_colorflow())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(96u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        1, 98u, input, this->mutable_colorflow())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 genStatus = 13;
            case 13: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(104u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &genstatus_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 simStatus = 14;
            case 14: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(112u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &simstatus_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.MCParticle)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.MCParticle)
    return false;
#undef DO_
}

void MCParticle::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.MCParticle)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // repeated .eicio.model.Reference parents = 2;
    for (unsigned int i = 0, n = this->parents_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, this->parents(i), output);
    }

    // repeated .eicio.model.Reference children = 3;
    for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, this->children(i), output);
    }

    // int32 PDG = 4;
    if (this->pdg() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pdg(), output);
    }

    // repeated double vertex = 5;
    if (this->vertex_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_vertex_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(this->vertex().data(),
                                                                       this->vertex_size(), output);
    }

    // float time = 6;
    if (this->time() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->time(), output);
    }

    // repeated double p = 7;
    if (this->p_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_p_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(this->p().data(), this->p_size(),
                                                                       output);
    }

    // double mass = 8;
    if (this->mass() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->mass(), output);
    }

    // float charge = 9;
    if (this->charge() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->charge(), output);
    }

    // repeated double PEndPoint = 10;
    if (this->pendpoint_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_pendpoint_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(this->pendpoint().data(),
                                                                       this->pendpoint_size(), output);
    }

    // repeated float spin = 11;
    if (this->spin_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_spin_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->spin().data(), this->spin_size(),
                                                                      output);
    }

    // repeated int32 colorFlow = 12;
    if (this->colorflow_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_colorflow_cached_byte_size_);
    }
    for (int i = 0, n = this->colorflow_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(this->colorflow(i), output);
    }

    // int32 genStatus = 13;
    if (this->genstatus() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->genstatus(), output);
    }

    // uint32 simStatus = 14;
    if (this->simstatus() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->simstatus(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.MCParticle)
}

::google::protobuf::uint8* MCParticle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.MCParticle)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // repeated .eicio.model.Reference parents = 2;
    for (unsigned int i = 0, n = this->parents_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            2, this->parents(i), deterministic, target);
    }

    // repeated .eicio.model.Reference children = 3;
    for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, this->children(i), deterministic, target);
    }

    // int32 PDG = 4;
    if (this->pdg() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pdg(), target);
    }

    // repeated double vertex = 5;
    if (this->vertex_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_vertex_cached_byte_size_,
                                                                                 target);
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTagToArray(this->vertex_, target);
    }

    // float time = 6;
    if (this->time() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->time(), target);
    }

    // repeated double p = 7;
    if (this->p_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_p_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTagToArray(this->p_, target);
    }

    // double mass = 8;
    if (this->mass() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->mass(), target);
    }

    // float charge = 9;
    if (this->charge() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->charge(), target);
    }

    // repeated double PEndPoint = 10;
    if (this->pendpoint_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_pendpoint_cached_byte_size_,
                                                                                 target);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTagToArray(this->pendpoint_, target);
    }

    // repeated float spin = 11;
    if (this->spin_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_spin_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->spin_, target);
    }

    // repeated int32 colorFlow = 12;
    if (this->colorflow_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_colorflow_cached_byte_size_,
                                                                                 target);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteInt32NoTagToArray(this->colorflow_, target);
    }

    // int32 genStatus = 13;
    if (this->genstatus() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->genstatus(), target);
    }

    // uint32 simStatus = 14;
    if (this->simstatus() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->simstatus(), target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.MCParticle)
    return target;
}

size_t MCParticle::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.MCParticle)
    size_t total_size = 0;

    // repeated .eicio.model.Reference parents = 2;
    {
        unsigned int count = this->parents_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->parents(i));
        }
    }

    // repeated .eicio.model.Reference children = 3;
    {
        unsigned int count = this->children_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->children(i));
        }
    }

    // repeated double vertex = 5;
    {
        unsigned int count = this->vertex_size();
        size_t data_size = 8UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _vertex_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated double p = 7;
    {
        unsigned int count = this->p_size();
        size_t data_size = 8UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _p_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated double PEndPoint = 10;
    {
        unsigned int count = this->pendpoint_size();
        size_t data_size = 8UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _pendpoint_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float spin = 11;
    {
        unsigned int count = this->spin_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _spin_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated int32 colorFlow = 12;
    {
        size_t data_size = ::google::protobuf::internal::WireFormatLite::Int32Size(this->colorflow_);
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _colorflow_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 PDG = 4;
    if (this->pdg() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->pdg());
    }

    // float time = 6;
    if (this->time() != 0) {
        total_size += 1 + 4;
    }

    // float charge = 9;
    if (this->charge() != 0) {
        total_size += 1 + 4;
    }

    // double mass = 8;
    if (this->mass() != 0) {
        total_size += 1 + 8;
    }

    // int32 genStatus = 13;
    if (this->genstatus() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->genstatus());
    }

    // uint32 simStatus = 14;
    if (this->simstatus() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->simstatus());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void MCParticle::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.MCParticle)
    GOOGLE_DCHECK_NE(&from, this);
    const MCParticle* source = ::google::protobuf::internal::DynamicCastToGenerated<const MCParticle>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.MCParticle)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.MCParticle)
        MergeFrom(*source);
    }
}

void MCParticle::MergeFrom(const MCParticle& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.MCParticle)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    parents_.MergeFrom(from.parents_);
    children_.MergeFrom(from.children_);
    vertex_.MergeFrom(from.vertex_);
    p_.MergeFrom(from.p_);
    pendpoint_.MergeFrom(from.pendpoint_);
    spin_.MergeFrom(from.spin_);
    colorflow_.MergeFrom(from.colorflow_);
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.pdg() != 0) {
        set_pdg(from.pdg());
    }
    if (from.time() != 0) {
        set_time(from.time());
    }
    if (from.charge() != 0) {
        set_charge(from.charge());
    }
    if (from.mass() != 0) {
        set_mass(from.mass());
    }
    if (from.genstatus() != 0) {
        set_genstatus(from.genstatus());
    }
    if (from.simstatus() != 0) {
        set_simstatus(from.simstatus());
    }
}

void MCParticle::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.MCParticle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void MCParticle::CopyFrom(const MCParticle& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.MCParticle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool MCParticle::IsInitialized() const { return true; }

void MCParticle::Swap(MCParticle* other) {
    if (other == this) return;
    InternalSwap(other);
}
void MCParticle::InternalSwap(MCParticle* other) {
    parents_.InternalSwap(&other->parents_);
    children_.InternalSwap(&other->children_);
    vertex_.InternalSwap(&other->vertex_);
    p_.InternalSwap(&other->p_);
    pendpoint_.InternalSwap(&other->pendpoint_);
    spin_.InternalSwap(&other->spin_);
    colorflow_.InternalSwap(&other->colorflow_);
    std::swap(id_, other->id_);
    std::swap(pdg_, other->pdg_);
    std::swap(time_, other->time_);
    std::swap(charge_, other->charge_);
    std::swap(mass_, other->mass_);
    std::swap(genstatus_, other->genstatus_);
    std::swap(simstatus_, other->simstatus_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MCParticle::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MCParticle

// uint32 id = 1;
void MCParticle::clear_id() { id_ = 0u; }
::google::protobuf::uint32 MCParticle::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.id)
    return id_;
}
void MCParticle::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.id)
}

// repeated .eicio.model.Reference parents = 2;
int MCParticle::parents_size() const { return parents_.size(); }
void MCParticle::clear_parents() { parents_.Clear(); }
const ::eicio::model::Reference& MCParticle::parents(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.parents)
    return parents_.Get(index);
}
::eicio::model::Reference* MCParticle::mutable_parents(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.MCParticle.parents)
    return parents_.Mutable(index);
}
::eicio::model::Reference* MCParticle::add_parents() {
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.parents)
    return parents_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* MCParticle::mutable_parents() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.parents)
    return &parents_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& MCParticle::parents() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.parents)
    return parents_;
}

// repeated .eicio.model.Reference children = 3;
int MCParticle::children_size() const { return children_.size(); }
void MCParticle::clear_children() { children_.Clear(); }
const ::eicio::model::Reference& MCParticle::children(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.children)
    return children_.Get(index);
}
::eicio::model::Reference* MCParticle::mutable_children(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.MCParticle.children)
    return children_.Mutable(index);
}
::eicio::model::Reference* MCParticle::add_children() {
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.children)
    return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* MCParticle::mutable_children() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.children)
    return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& MCParticle::children() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.children)
    return children_;
}

// int32 PDG = 4;
void MCParticle::clear_pdg() { pdg_ = 0; }
::google::protobuf::int32 MCParticle::pdg() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.PDG)
    return pdg_;
}
void MCParticle::set_pdg(::google::protobuf::int32 value) {
    pdg_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.PDG)
}

// repeated double vertex = 5;
int MCParticle::vertex_size() const { return vertex_.size(); }
void MCParticle::clear_vertex() { vertex_.Clear(); }
double MCParticle::vertex(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.vertex)
    return vertex_.Get(index);
}
void MCParticle::set_vertex(int index, double value) {
    vertex_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.vertex)
}
void MCParticle::add_vertex(double value) {
    vertex_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.vertex)
}
const ::google::protobuf::RepeatedField<double>& MCParticle::vertex() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.vertex)
    return vertex_;
}
::google::protobuf::RepeatedField<double>* MCParticle::mutable_vertex() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.vertex)
    return &vertex_;
}

// float time = 6;
void MCParticle::clear_time() { time_ = 0; }
float MCParticle::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.time)
    return time_;
}
void MCParticle::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.time)
}

// repeated double p = 7;
int MCParticle::p_size() const { return p_.size(); }
void MCParticle::clear_p() { p_.Clear(); }
double MCParticle::p(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.p)
    return p_.Get(index);
}
void MCParticle::set_p(int index, double value) {
    p_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.p)
}
void MCParticle::add_p(double value) {
    p_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.p)
}
const ::google::protobuf::RepeatedField<double>& MCParticle::p() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.p)
    return p_;
}
::google::protobuf::RepeatedField<double>* MCParticle::mutable_p() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.p)
    return &p_;
}

// double mass = 8;
void MCParticle::clear_mass() { mass_ = 0; }
double MCParticle::mass() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.mass)
    return mass_;
}
void MCParticle::set_mass(double value) {
    mass_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.mass)
}

// float charge = 9;
void MCParticle::clear_charge() { charge_ = 0; }
float MCParticle::charge() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.charge)
    return charge_;
}
void MCParticle::set_charge(float value) {
    charge_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.charge)
}

// repeated double PEndPoint = 10;
int MCParticle::pendpoint_size() const { return pendpoint_.size(); }
void MCParticle::clear_pendpoint() { pendpoint_.Clear(); }
double MCParticle::pendpoint(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.PEndPoint)
    return pendpoint_.Get(index);
}
void MCParticle::set_pendpoint(int index, double value) {
    pendpoint_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.PEndPoint)
}
void MCParticle::add_pendpoint(double value) {
    pendpoint_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.PEndPoint)
}
const ::google::protobuf::RepeatedField<double>& MCParticle::pendpoint() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.PEndPoint)
    return pendpoint_;
}
::google::protobuf::RepeatedField<double>* MCParticle::mutable_pendpoint() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.PEndPoint)
    return &pendpoint_;
}

// repeated float spin = 11;
int MCParticle::spin_size() const { return spin_.size(); }
void MCParticle::clear_spin() { spin_.Clear(); }
float MCParticle::spin(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.spin)
    return spin_.Get(index);
}
void MCParticle::set_spin(int index, float value) {
    spin_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.spin)
}
void MCParticle::add_spin(float value) {
    spin_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.spin)
}
const ::google::protobuf::RepeatedField<float>& MCParticle::spin() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.spin)
    return spin_;
}
::google::protobuf::RepeatedField<float>* MCParticle::mutable_spin() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.spin)
    return &spin_;
}

// repeated int32 colorFlow = 12;
int MCParticle::colorflow_size() const { return colorflow_.size(); }
void MCParticle::clear_colorflow() { colorflow_.Clear(); }
::google::protobuf::int32 MCParticle::colorflow(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.colorFlow)
    return colorflow_.Get(index);
}
void MCParticle::set_colorflow(int index, ::google::protobuf::int32 value) {
    colorflow_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.colorFlow)
}
void MCParticle::add_colorflow(::google::protobuf::int32 value) {
    colorflow_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.MCParticle.colorFlow)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32>& MCParticle::colorflow() const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticle.colorFlow)
    return colorflow_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32>* MCParticle::mutable_colorflow() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticle.colorFlow)
    return &colorflow_;
}

// int32 genStatus = 13;
void MCParticle::clear_genstatus() { genstatus_ = 0; }
::google::protobuf::int32 MCParticle::genstatus() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.genStatus)
    return genstatus_;
}
void MCParticle::set_genstatus(::google::protobuf::int32 value) {
    genstatus_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.genStatus)
}

// uint32 simStatus = 14;
void MCParticle::clear_simstatus() { simstatus_ = 0u; }
::google::protobuf::uint32 MCParticle::simstatus() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticle.simStatus)
    return simstatus_;
}
void MCParticle::set_simstatus(::google::protobuf::uint32 value) {
    simstatus_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticle.simStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MCParticleCollection::kIdFieldNumber;
const int MCParticleCollection::kFlagsFieldNumber;
const int MCParticleCollection::kParamsFieldNumber;
const int MCParticleCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MCParticleCollection::MCParticleCollection() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.MCParticleCollection)
}
MCParticleCollection::MCParticleCollection(const MCParticleCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.MCParticleCollection)
}

void MCParticleCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

MCParticleCollection::~MCParticleCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.MCParticleCollection)
    SharedDtor();
}

void MCParticleCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void MCParticleCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MCParticleCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MCParticleCollection& MCParticleCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

MCParticleCollection* MCParticleCollection::New(::google::protobuf::Arena* arena) const {
    MCParticleCollection* n = new MCParticleCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void MCParticleCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.MCParticleCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool MCParticleCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.MCParticleCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.MCParticle entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.MCParticleCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.MCParticleCollection)
    return false;
#undef DO_
}

void MCParticleCollection::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.MCParticleCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.MCParticle entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.MCParticleCollection)
}

::google::protobuf::uint8* MCParticleCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.MCParticleCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.MCParticle entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.MCParticleCollection)
    return target;
}

size_t MCParticleCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.MCParticleCollection)
    size_t total_size = 0;

    // repeated .eicio.model.MCParticle entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void MCParticleCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.MCParticleCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const MCParticleCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const MCParticleCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.MCParticleCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.MCParticleCollection)
        MergeFrom(*source);
    }
}

void MCParticleCollection::MergeFrom(const MCParticleCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.MCParticleCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void MCParticleCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.MCParticleCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void MCParticleCollection::CopyFrom(const MCParticleCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.MCParticleCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool MCParticleCollection::IsInitialized() const { return true; }

void MCParticleCollection::Swap(MCParticleCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void MCParticleCollection::InternalSwap(MCParticleCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MCParticleCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MCParticleCollection

// uint32 id = 1;
void MCParticleCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 MCParticleCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticleCollection.id)
    return id_;
}
void MCParticleCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticleCollection.id)
}

// uint32 flags = 2;
void MCParticleCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 MCParticleCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticleCollection.flags)
    return flags_;
}
void MCParticleCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.MCParticleCollection.flags)
}

// .eicio.model.Params params = 3;
bool MCParticleCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void MCParticleCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& MCParticleCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticleCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* MCParticleCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.MCParticleCollection.params)
    return params_;
}
::eicio::model::Params* MCParticleCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.MCParticleCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void MCParticleCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.MCParticleCollection.params)
}

// repeated .eicio.model.MCParticle entries = 4;
int MCParticleCollection::entries_size() const { return entries_.size(); }
void MCParticleCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::MCParticle& MCParticleCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.MCParticleCollection.entries)
    return entries_.Get(index);
}
::eicio::model::MCParticle* MCParticleCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.MCParticleCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::MCParticle* MCParticleCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.MCParticleCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::MCParticle>* MCParticleCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.MCParticleCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::MCParticle>& MCParticleCollection::entries()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.MCParticleCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimTrackerHit::kIdFieldNumber;
const int SimTrackerHit::kCellID0FieldNumber;
const int SimTrackerHit::kCellID1FieldNumber;
const int SimTrackerHit::kPosFieldNumber;
const int SimTrackerHit::kEDepFieldNumber;
const int SimTrackerHit::kTimeFieldNumber;
const int SimTrackerHit::kMcFieldNumber;
const int SimTrackerHit::kPFieldNumber;
const int SimTrackerHit::kPathLengthFieldNumber;
const int SimTrackerHit::kQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimTrackerHit::SimTrackerHit() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.SimTrackerHit)
}
SimTrackerHit::SimTrackerHit(const SimTrackerHit& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pos_(from.pos_),
      p_(from.p_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_mc()) {
        mc_ = new ::eicio::model::Reference(*from.mc_);
    } else {
        mc_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.SimTrackerHit)
}

void SimTrackerHit::SharedCtor() {
    ::memset(&mc_, 0, reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&mc_) + sizeof(quality_));
    _cached_size_ = 0;
}

SimTrackerHit::~SimTrackerHit() {
    // @@protoc_insertion_point(destructor:eicio.model.SimTrackerHit)
    SharedDtor();
}

void SimTrackerHit::SharedDtor() {
    if (this != internal_default_instance()) {
        delete mc_;
    }
}

void SimTrackerHit::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimTrackerHit::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimTrackerHit& SimTrackerHit::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

SimTrackerHit* SimTrackerHit::New(::google::protobuf::Arena* arena) const {
    SimTrackerHit* n = new SimTrackerHit;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SimTrackerHit::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.SimTrackerHit)
    pos_.Clear();
    p_.Clear();
    if (GetArenaNoVirtual() == NULL && mc_ != NULL) {
        delete mc_;
    }
    mc_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
}

bool SimTrackerHit::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.SimTrackerHit)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID0 = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID1 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid1_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated double pos = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, this->mutable_pos())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(33u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        1, 34u, input, this->mutable_pos())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float EDep = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &edep_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float time = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &time_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Reference mc = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(58u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_mc()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float p = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(66u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_p())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(69u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 66u, input, this->mutable_p())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float pathLength = 9;
            case 9: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(77u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input,
                                                                                          &pathlength_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 quality = 10;
            case 10: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(80u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &quality_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.SimTrackerHit)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.SimTrackerHit)
    return false;
#undef DO_
}

void SimTrackerHit::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.SimTrackerHit)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid0(), output);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid1(), output);
    }

    // repeated double pos = 4;
    if (this->pos_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_pos_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(this->pos().data(), this->pos_size(),
                                                                       output);
    }

    // float EDep = 5;
    if (this->edep() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->edep(), output);
    }

    // float time = 6;
    if (this->time() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->time(), output);
    }

    // .eicio.model.Reference mc = 7;
    if (this->has_mc()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, *this->mc_, output);
    }

    // repeated float p = 8;
    if (this->p_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_p_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->p().data(), this->p_size(),
                                                                      output);
    }

    // float pathLength = 9;
    if (this->pathlength() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pathlength(), output);
    }

    // int32 quality = 10;
    if (this->quality() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quality(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.SimTrackerHit)
}

::google::protobuf::uint8* SimTrackerHit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.SimTrackerHit)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid0(), target);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid1(), target);
    }

    // repeated double pos = 4;
    if (this->pos_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_pos_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTagToArray(this->pos_, target);
    }

    // float EDep = 5;
    if (this->edep() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->edep(), target);
    }

    // float time = 6;
    if (this->time() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->time(), target);
    }

    // .eicio.model.Reference mc = 7;
    if (this->has_mc()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            7, *this->mc_, deterministic, target);
    }

    // repeated float p = 8;
    if (this->p_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_p_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->p_, target);
    }

    // float pathLength = 9;
    if (this->pathlength() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pathlength(), target);
    }

    // int32 quality = 10;
    if (this->quality() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quality(), target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.SimTrackerHit)
    return target;
}

size_t SimTrackerHit::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.SimTrackerHit)
    size_t total_size = 0;

    // repeated double pos = 4;
    {
        unsigned int count = this->pos_size();
        size_t data_size = 8UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _pos_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float p = 8;
    {
        unsigned int count = this->p_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _p_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // .eicio.model.Reference mc = 7;
    if (this->has_mc()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->mc_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid0());
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid1());
    }

    // float EDep = 5;
    if (this->edep() != 0) {
        total_size += 1 + 4;
    }

    // float time = 6;
    if (this->time() != 0) {
        total_size += 1 + 4;
    }

    // float pathLength = 9;
    if (this->pathlength() != 0) {
        total_size += 1 + 4;
    }

    // int32 quality = 10;
    if (this->quality() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->quality());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SimTrackerHit::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.SimTrackerHit)
    GOOGLE_DCHECK_NE(&from, this);
    const SimTrackerHit* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const SimTrackerHit>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.SimTrackerHit)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.SimTrackerHit)
        MergeFrom(*source);
    }
}

void SimTrackerHit::MergeFrom(const SimTrackerHit& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.SimTrackerHit)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    pos_.MergeFrom(from.pos_);
    p_.MergeFrom(from.p_);
    if (from.has_mc()) {
        mutable_mc()->::eicio::model::Reference::MergeFrom(from.mc());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.cellid0() != 0) {
        set_cellid0(from.cellid0());
    }
    if (from.cellid1() != 0) {
        set_cellid1(from.cellid1());
    }
    if (from.edep() != 0) {
        set_edep(from.edep());
    }
    if (from.time() != 0) {
        set_time(from.time());
    }
    if (from.pathlength() != 0) {
        set_pathlength(from.pathlength());
    }
    if (from.quality() != 0) {
        set_quality(from.quality());
    }
}

void SimTrackerHit::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.SimTrackerHit)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void SimTrackerHit::CopyFrom(const SimTrackerHit& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.SimTrackerHit)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool SimTrackerHit::IsInitialized() const { return true; }

void SimTrackerHit::Swap(SimTrackerHit* other) {
    if (other == this) return;
    InternalSwap(other);
}
void SimTrackerHit::InternalSwap(SimTrackerHit* other) {
    pos_.InternalSwap(&other->pos_);
    p_.InternalSwap(&other->p_);
    std::swap(mc_, other->mc_);
    std::swap(id_, other->id_);
    std::swap(cellid0_, other->cellid0_);
    std::swap(cellid1_, other->cellid1_);
    std::swap(edep_, other->edep_);
    std::swap(time_, other->time_);
    std::swap(pathlength_, other->pathlength_);
    std::swap(quality_, other->quality_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimTrackerHit::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimTrackerHit

// uint32 id = 1;
void SimTrackerHit::clear_id() { id_ = 0u; }
::google::protobuf::uint32 SimTrackerHit::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.id)
    return id_;
}
void SimTrackerHit::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.id)
}

// int32 cellID0 = 2;
void SimTrackerHit::clear_cellid0() { cellid0_ = 0; }
::google::protobuf::int32 SimTrackerHit::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.cellID0)
    return cellid0_;
}
void SimTrackerHit::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.cellID0)
}

// int32 cellID1 = 3;
void SimTrackerHit::clear_cellid1() { cellid1_ = 0; }
::google::protobuf::int32 SimTrackerHit::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.cellID1)
    return cellid1_;
}
void SimTrackerHit::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.cellID1)
}

// repeated double pos = 4;
int SimTrackerHit::pos_size() const { return pos_.size(); }
void SimTrackerHit::clear_pos() { pos_.Clear(); }
double SimTrackerHit::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.pos)
    return pos_.Get(index);
}
void SimTrackerHit::set_pos(int index, double value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.pos)
}
void SimTrackerHit::add_pos(double value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.SimTrackerHit.pos)
}
const ::google::protobuf::RepeatedField<double>& SimTrackerHit::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimTrackerHit.pos)
    return pos_;
}
::google::protobuf::RepeatedField<double>* SimTrackerHit::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimTrackerHit.pos)
    return &pos_;
}

// float EDep = 5;
void SimTrackerHit::clear_edep() { edep_ = 0; }
float SimTrackerHit::edep() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.EDep)
    return edep_;
}
void SimTrackerHit::set_edep(float value) {
    edep_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.EDep)
}

// float time = 6;
void SimTrackerHit::clear_time() { time_ = 0; }
float SimTrackerHit::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.time)
    return time_;
}
void SimTrackerHit::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.time)
}

// .eicio.model.Reference mc = 7;
bool SimTrackerHit::has_mc() const { return this != internal_default_instance() && mc_ != NULL; }
void SimTrackerHit::clear_mc() {
    if (GetArenaNoVirtual() == NULL && mc_ != NULL) delete mc_;
    mc_ = NULL;
}
const ::eicio::model::Reference& SimTrackerHit::mc() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.mc)
    return mc_ != NULL ? *mc_ : *::eicio::model::Reference::internal_default_instance();
}
::eicio::model::Reference* SimTrackerHit::mutable_mc() {
    if (mc_ == NULL) {
        mc_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.SimTrackerHit.mc)
    return mc_;
}
::eicio::model::Reference* SimTrackerHit::release_mc() {
    // @@protoc_insertion_point(field_release:eicio.model.SimTrackerHit.mc)

    ::eicio::model::Reference* temp = mc_;
    mc_ = NULL;
    return temp;
}
void SimTrackerHit::set_allocated_mc(::eicio::model::Reference* mc) {
    delete mc_;
    mc_ = mc;
    if (mc) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.SimTrackerHit.mc)
}

// repeated float p = 8;
int SimTrackerHit::p_size() const { return p_.size(); }
void SimTrackerHit::clear_p() { p_.Clear(); }
float SimTrackerHit::p(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.p)
    return p_.Get(index);
}
void SimTrackerHit::set_p(int index, float value) {
    p_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.p)
}
void SimTrackerHit::add_p(float value) {
    p_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.SimTrackerHit.p)
}
const ::google::protobuf::RepeatedField<float>& SimTrackerHit::p() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimTrackerHit.p)
    return p_;
}
::google::protobuf::RepeatedField<float>* SimTrackerHit::mutable_p() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimTrackerHit.p)
    return &p_;
}

// float pathLength = 9;
void SimTrackerHit::clear_pathlength() { pathlength_ = 0; }
float SimTrackerHit::pathlength() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.pathLength)
    return pathlength_;
}
void SimTrackerHit::set_pathlength(float value) {
    pathlength_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.pathLength)
}

// int32 quality = 10;
void SimTrackerHit::clear_quality() { quality_ = 0; }
::google::protobuf::int32 SimTrackerHit::quality() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHit.quality)
    return quality_;
}
void SimTrackerHit::set_quality(::google::protobuf::int32 value) {
    quality_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHit.quality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimTrackerHitCollection::kIdFieldNumber;
const int SimTrackerHitCollection::kFlagsFieldNumber;
const int SimTrackerHitCollection::kParamsFieldNumber;
const int SimTrackerHitCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimTrackerHitCollection::SimTrackerHitCollection()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.SimTrackerHitCollection)
}
SimTrackerHitCollection::SimTrackerHitCollection(const SimTrackerHitCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.SimTrackerHitCollection)
}

void SimTrackerHitCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

SimTrackerHitCollection::~SimTrackerHitCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.SimTrackerHitCollection)
    SharedDtor();
}

void SimTrackerHitCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void SimTrackerHitCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimTrackerHitCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimTrackerHitCollection& SimTrackerHitCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

SimTrackerHitCollection* SimTrackerHitCollection::New(::google::protobuf::Arena* arena) const {
    SimTrackerHitCollection* n = new SimTrackerHitCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SimTrackerHitCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.SimTrackerHitCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool SimTrackerHitCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.SimTrackerHitCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.SimTrackerHit entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.SimTrackerHitCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.SimTrackerHitCollection)
    return false;
#undef DO_
}

void SimTrackerHitCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.SimTrackerHitCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.SimTrackerHit entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.SimTrackerHitCollection)
}

::google::protobuf::uint8* SimTrackerHitCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.SimTrackerHitCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.SimTrackerHit entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.SimTrackerHitCollection)
    return target;
}

size_t SimTrackerHitCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.SimTrackerHitCollection)
    size_t total_size = 0;

    // repeated .eicio.model.SimTrackerHit entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SimTrackerHitCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.SimTrackerHitCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const SimTrackerHitCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const SimTrackerHitCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.SimTrackerHitCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.SimTrackerHitCollection)
        MergeFrom(*source);
    }
}

void SimTrackerHitCollection::MergeFrom(const SimTrackerHitCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.SimTrackerHitCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void SimTrackerHitCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.SimTrackerHitCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void SimTrackerHitCollection::CopyFrom(const SimTrackerHitCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.SimTrackerHitCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool SimTrackerHitCollection::IsInitialized() const { return true; }

void SimTrackerHitCollection::Swap(SimTrackerHitCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void SimTrackerHitCollection::InternalSwap(SimTrackerHitCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimTrackerHitCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimTrackerHitCollection

// uint32 id = 1;
void SimTrackerHitCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 SimTrackerHitCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHitCollection.id)
    return id_;
}
void SimTrackerHitCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHitCollection.id)
}

// uint32 flags = 2;
void SimTrackerHitCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 SimTrackerHitCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHitCollection.flags)
    return flags_;
}
void SimTrackerHitCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimTrackerHitCollection.flags)
}

// .eicio.model.Params params = 3;
bool SimTrackerHitCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void SimTrackerHitCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& SimTrackerHitCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHitCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* SimTrackerHitCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.SimTrackerHitCollection.params)
    return params_;
}
::eicio::model::Params* SimTrackerHitCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.SimTrackerHitCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void SimTrackerHitCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.SimTrackerHitCollection.params)
}

// repeated .eicio.model.SimTrackerHit entries = 4;
int SimTrackerHitCollection::entries_size() const { return entries_.size(); }
void SimTrackerHitCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::SimTrackerHit& SimTrackerHitCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimTrackerHitCollection.entries)
    return entries_.Get(index);
}
::eicio::model::SimTrackerHit* SimTrackerHitCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.SimTrackerHitCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::SimTrackerHit* SimTrackerHitCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.SimTrackerHitCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::SimTrackerHit>*
SimTrackerHitCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimTrackerHitCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::SimTrackerHit>& SimTrackerHitCollection::entries()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.SimTrackerHitCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerRawData::kIdFieldNumber;
const int TrackerRawData::kCellID0FieldNumber;
const int TrackerRawData::kCellID1FieldNumber;
const int TrackerRawData::kTimeFieldNumber;
const int TrackerRawData::kADCsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerRawData::TrackerRawData() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerRawData)
}
TrackerRawData::TrackerRawData(const TrackerRawData& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), adcs_(from.adcs_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(&id_) + sizeof(time_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerRawData)
}

void TrackerRawData::SharedCtor() {
    ::memset(&id_, 0, reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(&id_) + sizeof(time_));
    _cached_size_ = 0;
}

TrackerRawData::~TrackerRawData() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerRawData)
    SharedDtor();
}

void TrackerRawData::SharedDtor() {}

void TrackerRawData::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerRawData::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerRawData& TrackerRawData::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerRawData* TrackerRawData::New(::google::protobuf::Arena* arena) const {
    TrackerRawData* n = new TrackerRawData;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerRawData::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerRawData)
    adcs_.Clear();
    ::memset(&id_, 0, reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(&id_) + sizeof(time_));
}

bool TrackerRawData::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerRawData)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID0 = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID1 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid1_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 time = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &time_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated uint32 ADCs = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input,
                                                                                    this->mutable_adcs())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(40u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(1, 42u, input,
                                                                                    this->mutable_adcs())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerRawData)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerRawData)
    return false;
#undef DO_
}

void TrackerRawData::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerRawData)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid0(), output);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid1(), output);
    }

    // int32 time = 4;
    if (this->time() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
    }

    // repeated uint32 ADCs = 5;
    if (this->adcs_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_adcs_cached_byte_size_);
    }
    for (int i = 0, n = this->adcs_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(this->adcs(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerRawData)
}

::google::protobuf::uint8* TrackerRawData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerRawData)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid0(), target);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid1(), target);
    }

    // int32 time = 4;
    if (this->time() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
    }

    // repeated uint32 ADCs = 5;
    if (this->adcs_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_adcs_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTagToArray(this->adcs_, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerRawData)
    return target;
}

size_t TrackerRawData::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerRawData)
    size_t total_size = 0;

    // repeated uint32 ADCs = 5;
    {
        size_t data_size = ::google::protobuf::internal::WireFormatLite::UInt32Size(this->adcs_);
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _adcs_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid0());
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid1());
    }

    // int32 time = 4;
    if (this->time() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->time());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerRawData::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerRawData)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerRawData* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerRawData>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerRawData)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerRawData)
        MergeFrom(*source);
    }
}

void TrackerRawData::MergeFrom(const TrackerRawData& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerRawData)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    adcs_.MergeFrom(from.adcs_);
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.cellid0() != 0) {
        set_cellid0(from.cellid0());
    }
    if (from.cellid1() != 0) {
        set_cellid1(from.cellid1());
    }
    if (from.time() != 0) {
        set_time(from.time());
    }
}

void TrackerRawData::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerRawData)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerRawData::CopyFrom(const TrackerRawData& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerRawData)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerRawData::IsInitialized() const { return true; }

void TrackerRawData::Swap(TrackerRawData* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerRawData::InternalSwap(TrackerRawData* other) {
    adcs_.InternalSwap(&other->adcs_);
    std::swap(id_, other->id_);
    std::swap(cellid0_, other->cellid0_);
    std::swap(cellid1_, other->cellid1_);
    std::swap(time_, other->time_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerRawData::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerRawData

// uint32 id = 1;
void TrackerRawData::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerRawData::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawData.id)
    return id_;
}
void TrackerRawData::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawData.id)
}

// int32 cellID0 = 2;
void TrackerRawData::clear_cellid0() { cellid0_ = 0; }
::google::protobuf::int32 TrackerRawData::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawData.cellID0)
    return cellid0_;
}
void TrackerRawData::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawData.cellID0)
}

// int32 cellID1 = 3;
void TrackerRawData::clear_cellid1() { cellid1_ = 0; }
::google::protobuf::int32 TrackerRawData::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawData.cellID1)
    return cellid1_;
}
void TrackerRawData::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawData.cellID1)
}

// int32 time = 4;
void TrackerRawData::clear_time() { time_ = 0; }
::google::protobuf::int32 TrackerRawData::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawData.time)
    return time_;
}
void TrackerRawData::set_time(::google::protobuf::int32 value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawData.time)
}

// repeated uint32 ADCs = 5;
int TrackerRawData::adcs_size() const { return adcs_.size(); }
void TrackerRawData::clear_adcs() { adcs_.Clear(); }
::google::protobuf::uint32 TrackerRawData::adcs(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawData.ADCs)
    return adcs_.Get(index);
}
void TrackerRawData::set_adcs(int index, ::google::protobuf::uint32 value) {
    adcs_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawData.ADCs)
}
void TrackerRawData::add_adcs(::google::protobuf::uint32 value) {
    adcs_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerRawData.ADCs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32>& TrackerRawData::adcs() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerRawData.ADCs)
    return adcs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32>* TrackerRawData::mutable_adcs() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerRawData.ADCs)
    return &adcs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerRawDataCollection::kIdFieldNumber;
const int TrackerRawDataCollection::kFlagsFieldNumber;
const int TrackerRawDataCollection::kParamsFieldNumber;
const int TrackerRawDataCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerRawDataCollection::TrackerRawDataCollection()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerRawDataCollection)
}
TrackerRawDataCollection::TrackerRawDataCollection(const TrackerRawDataCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerRawDataCollection)
}

void TrackerRawDataCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

TrackerRawDataCollection::~TrackerRawDataCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerRawDataCollection)
    SharedDtor();
}

void TrackerRawDataCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void TrackerRawDataCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerRawDataCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerRawDataCollection& TrackerRawDataCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerRawDataCollection* TrackerRawDataCollection::New(::google::protobuf::Arena* arena) const {
    TrackerRawDataCollection* n = new TrackerRawDataCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerRawDataCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerRawDataCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool TrackerRawDataCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerRawDataCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.TrackerRawData entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerRawDataCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerRawDataCollection)
    return false;
#undef DO_
}

void TrackerRawDataCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerRawDataCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.TrackerRawData entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerRawDataCollection)
}

::google::protobuf::uint8* TrackerRawDataCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerRawDataCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.TrackerRawData entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerRawDataCollection)
    return target;
}

size_t TrackerRawDataCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerRawDataCollection)
    size_t total_size = 0;

    // repeated .eicio.model.TrackerRawData entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerRawDataCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerRawDataCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerRawDataCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerRawDataCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerRawDataCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerRawDataCollection)
        MergeFrom(*source);
    }
}

void TrackerRawDataCollection::MergeFrom(const TrackerRawDataCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerRawDataCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void TrackerRawDataCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerRawDataCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerRawDataCollection::CopyFrom(const TrackerRawDataCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerRawDataCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerRawDataCollection::IsInitialized() const { return true; }

void TrackerRawDataCollection::Swap(TrackerRawDataCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerRawDataCollection::InternalSwap(TrackerRawDataCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerRawDataCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerRawDataCollection

// uint32 id = 1;
void TrackerRawDataCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerRawDataCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawDataCollection.id)
    return id_;
}
void TrackerRawDataCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawDataCollection.id)
}

// uint32 flags = 2;
void TrackerRawDataCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 TrackerRawDataCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawDataCollection.flags)
    return flags_;
}
void TrackerRawDataCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerRawDataCollection.flags)
}

// .eicio.model.Params params = 3;
bool TrackerRawDataCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void TrackerRawDataCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& TrackerRawDataCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawDataCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* TrackerRawDataCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerRawDataCollection.params)
    return params_;
}
::eicio::model::Params* TrackerRawDataCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerRawDataCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void TrackerRawDataCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerRawDataCollection.params)
}

// repeated .eicio.model.TrackerRawData entries = 4;
int TrackerRawDataCollection::entries_size() const { return entries_.size(); }
void TrackerRawDataCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::TrackerRawData& TrackerRawDataCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerRawDataCollection.entries)
    return entries_.Get(index);
}
::eicio::model::TrackerRawData* TrackerRawDataCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerRawDataCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::TrackerRawData* TrackerRawDataCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerRawDataCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerRawData>*
TrackerRawDataCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerRawDataCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerRawData>&
TrackerRawDataCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerRawDataCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerData::kIdFieldNumber;
const int TrackerData::kCellID0FieldNumber;
const int TrackerData::kCellID1FieldNumber;
const int TrackerData::kTimeFieldNumber;
const int TrackerData::kChargesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerData::TrackerData() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerData)
}
TrackerData::TrackerData(const TrackerData& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), charges_(from.charges_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(&id_) + sizeof(time_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerData)
}

void TrackerData::SharedCtor() {
    ::memset(&id_, 0, reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(&id_) + sizeof(time_));
    _cached_size_ = 0;
}

TrackerData::~TrackerData() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerData)
    SharedDtor();
}

void TrackerData::SharedDtor() {}

void TrackerData::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerData::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerData& TrackerData::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerData* TrackerData::New(::google::protobuf::Arena* arena) const {
    TrackerData* n = new TrackerData;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerData::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerData)
    charges_.Clear();
    ::memset(&id_, 0, reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(&id_) + sizeof(time_));
}

bool TrackerData::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerData)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID0 = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID1 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid1_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float time = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(37u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &time_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float charges = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_charges())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 42u, input, this->mutable_charges())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerData)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerData)
    return false;
#undef DO_
}

void TrackerData::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerData)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid0(), output);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid1(), output);
    }

    // float time = 4;
    if (this->time() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time(), output);
    }

    // repeated float charges = 5;
    if (this->charges_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_charges_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->charges().data(),
                                                                      this->charges_size(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerData)
}

::google::protobuf::uint8* TrackerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerData)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid0(), target);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid1(), target);
    }

    // float time = 4;
    if (this->time() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time(), target);
    }

    // repeated float charges = 5;
    if (this->charges_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_charges_cached_byte_size_,
                                                                                 target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->charges_, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerData)
    return target;
}

size_t TrackerData::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerData)
    size_t total_size = 0;

    // repeated float charges = 5;
    {
        unsigned int count = this->charges_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _charges_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid0());
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid1());
    }

    // float time = 4;
    if (this->time() != 0) {
        total_size += 1 + 4;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerData::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerData)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerData* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerData>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerData)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerData)
        MergeFrom(*source);
    }
}

void TrackerData::MergeFrom(const TrackerData& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerData)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    charges_.MergeFrom(from.charges_);
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.cellid0() != 0) {
        set_cellid0(from.cellid0());
    }
    if (from.cellid1() != 0) {
        set_cellid1(from.cellid1());
    }
    if (from.time() != 0) {
        set_time(from.time());
    }
}

void TrackerData::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerData)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerData::CopyFrom(const TrackerData& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerData)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerData::IsInitialized() const { return true; }

void TrackerData::Swap(TrackerData* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerData::InternalSwap(TrackerData* other) {
    charges_.InternalSwap(&other->charges_);
    std::swap(id_, other->id_);
    std::swap(cellid0_, other->cellid0_);
    std::swap(cellid1_, other->cellid1_);
    std::swap(time_, other->time_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerData::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerData

// uint32 id = 1;
void TrackerData::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerData::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerData.id)
    return id_;
}
void TrackerData::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerData.id)
}

// int32 cellID0 = 2;
void TrackerData::clear_cellid0() { cellid0_ = 0; }
::google::protobuf::int32 TrackerData::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerData.cellID0)
    return cellid0_;
}
void TrackerData::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerData.cellID0)
}

// int32 cellID1 = 3;
void TrackerData::clear_cellid1() { cellid1_ = 0; }
::google::protobuf::int32 TrackerData::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerData.cellID1)
    return cellid1_;
}
void TrackerData::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerData.cellID1)
}

// float time = 4;
void TrackerData::clear_time() { time_ = 0; }
float TrackerData::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerData.time)
    return time_;
}
void TrackerData::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerData.time)
}

// repeated float charges = 5;
int TrackerData::charges_size() const { return charges_.size(); }
void TrackerData::clear_charges() { charges_.Clear(); }
float TrackerData::charges(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerData.charges)
    return charges_.Get(index);
}
void TrackerData::set_charges(int index, float value) {
    charges_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerData.charges)
}
void TrackerData::add_charges(float value) {
    charges_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerData.charges)
}
const ::google::protobuf::RepeatedField<float>& TrackerData::charges() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerData.charges)
    return charges_;
}
::google::protobuf::RepeatedField<float>* TrackerData::mutable_charges() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerData.charges)
    return &charges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerDataCollection::kIdFieldNumber;
const int TrackerDataCollection::kFlagsFieldNumber;
const int TrackerDataCollection::kParamsFieldNumber;
const int TrackerDataCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerDataCollection::TrackerDataCollection() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerDataCollection)
}
TrackerDataCollection::TrackerDataCollection(const TrackerDataCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerDataCollection)
}

void TrackerDataCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

TrackerDataCollection::~TrackerDataCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerDataCollection)
    SharedDtor();
}

void TrackerDataCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void TrackerDataCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerDataCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerDataCollection& TrackerDataCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerDataCollection* TrackerDataCollection::New(::google::protobuf::Arena* arena) const {
    TrackerDataCollection* n = new TrackerDataCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerDataCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerDataCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool TrackerDataCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerDataCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.TrackerData entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerDataCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerDataCollection)
    return false;
#undef DO_
}

void TrackerDataCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerDataCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.TrackerData entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerDataCollection)
}

::google::protobuf::uint8* TrackerDataCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerDataCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.TrackerData entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerDataCollection)
    return target;
}

size_t TrackerDataCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerDataCollection)
    size_t total_size = 0;

    // repeated .eicio.model.TrackerData entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerDataCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerDataCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerDataCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerDataCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerDataCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerDataCollection)
        MergeFrom(*source);
    }
}

void TrackerDataCollection::MergeFrom(const TrackerDataCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerDataCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void TrackerDataCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerDataCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerDataCollection::CopyFrom(const TrackerDataCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerDataCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerDataCollection::IsInitialized() const { return true; }

void TrackerDataCollection::Swap(TrackerDataCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerDataCollection::InternalSwap(TrackerDataCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerDataCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerDataCollection

// uint32 id = 1;
void TrackerDataCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerDataCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerDataCollection.id)
    return id_;
}
void TrackerDataCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerDataCollection.id)
}

// uint32 flags = 2;
void TrackerDataCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 TrackerDataCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerDataCollection.flags)
    return flags_;
}
void TrackerDataCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerDataCollection.flags)
}

// .eicio.model.Params params = 3;
bool TrackerDataCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void TrackerDataCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& TrackerDataCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerDataCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* TrackerDataCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerDataCollection.params)
    return params_;
}
::eicio::model::Params* TrackerDataCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerDataCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void TrackerDataCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerDataCollection.params)
}

// repeated .eicio.model.TrackerData entries = 4;
int TrackerDataCollection::entries_size() const { return entries_.size(); }
void TrackerDataCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::TrackerData& TrackerDataCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerDataCollection.entries)
    return entries_.Get(index);
}
::eicio::model::TrackerData* TrackerDataCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerDataCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::TrackerData* TrackerDataCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerDataCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerData>* TrackerDataCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerDataCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerData>& TrackerDataCollection::entries()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerDataCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerHit::kIdFieldNumber;
const int TrackerHit::kCellID0FieldNumber;
const int TrackerHit::kCellID1FieldNumber;
const int TrackerHit::kTypeFieldNumber;
const int TrackerHit::kPosFieldNumber;
const int TrackerHit::kCovFieldNumber;
const int TrackerHit::kEDepFieldNumber;
const int TrackerHit::kEDepErrFieldNumber;
const int TrackerHit::kTimeFieldNumber;
const int TrackerHit::kQualityFieldNumber;
const int TrackerHit::kRawHitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerHit::TrackerHit() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerHit)
}
TrackerHit::TrackerHit(const TrackerHit& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pos_(from.pos_),
      cov_(from.cov_),
      rawhits_(from.rawhits_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerHit)
}

void TrackerHit::SharedCtor() {
    ::memset(&id_, 0, reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
    _cached_size_ = 0;
}

TrackerHit::~TrackerHit() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerHit)
    SharedDtor();
}

void TrackerHit::SharedDtor() {}

void TrackerHit::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerHit::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerHit& TrackerHit::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerHit* TrackerHit::New(::google::protobuf::Arena* arena) const {
    TrackerHit* n = new TrackerHit;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerHit::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerHit)
    pos_.Clear();
    cov_.Clear();
    rawhits_.Clear();
    ::memset(&id_, 0, reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
}

bool TrackerHit::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerHit)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID0 = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID1 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid1_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 type = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &type_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated double pos = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, this->mutable_pos())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(41u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        1, 42u, input, this->mutable_pos())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated double cov = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(50u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, this->mutable_cov())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(49u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        1, 50u, input, this->mutable_cov())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float EDep = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(61u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &edep_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float EDepErr = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(69u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &edeperr_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float time = 9;
            case 9: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(77u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &time_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 quality = 10;
            case 10: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(80u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &quality_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference rawHits = 11;
            case 11: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(90u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_rawhits()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerHit)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerHit)
    return false;
#undef DO_
}

void TrackerHit::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerHit)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid0(), output);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid1(), output);
    }

    // int32 type = 4;
    if (this->type() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
    }

    // repeated double pos = 5;
    if (this->pos_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_pos_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(this->pos().data(), this->pos_size(),
                                                                       output);
    }

    // repeated double cov = 6;
    if (this->cov_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_cov_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(this->cov().data(), this->cov_size(),
                                                                       output);
    }

    // float EDep = 7;
    if (this->edep() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->edep(), output);
    }

    // float EDepErr = 8;
    if (this->edeperr() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->edeperr(), output);
    }

    // float time = 9;
    if (this->time() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->time(), output);
    }

    // int32 quality = 10;
    if (this->quality() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quality(), output);
    }

    // repeated .eicio.model.Reference rawHits = 11;
    for (unsigned int i = 0, n = this->rawhits_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, this->rawhits(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerHit)
}

::google::protobuf::uint8* TrackerHit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerHit)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid0(), target);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid1(), target);
    }

    // int32 type = 4;
    if (this->type() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
    }

    // repeated double pos = 5;
    if (this->pos_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_pos_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTagToArray(this->pos_, target);
    }

    // repeated double cov = 6;
    if (this->cov_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_cov_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTagToArray(this->cov_, target);
    }

    // float EDep = 7;
    if (this->edep() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->edep(), target);
    }

    // float EDepErr = 8;
    if (this->edeperr() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->edeperr(), target);
    }

    // float time = 9;
    if (this->time() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->time(), target);
    }

    // int32 quality = 10;
    if (this->quality() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quality(), target);
    }

    // repeated .eicio.model.Reference rawHits = 11;
    for (unsigned int i = 0, n = this->rawhits_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            11, this->rawhits(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerHit)
    return target;
}

size_t TrackerHit::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerHit)
    size_t total_size = 0;

    // repeated double pos = 5;
    {
        unsigned int count = this->pos_size();
        size_t data_size = 8UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _pos_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated double cov = 6;
    {
        unsigned int count = this->cov_size();
        size_t data_size = 8UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cov_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated .eicio.model.Reference rawHits = 11;
    {
        unsigned int count = this->rawhits_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->rawhits(i));
        }
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid0());
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid1());
    }

    // int32 type = 4;
    if (this->type() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->type());
    }

    // float EDep = 7;
    if (this->edep() != 0) {
        total_size += 1 + 4;
    }

    // float EDepErr = 8;
    if (this->edeperr() != 0) {
        total_size += 1 + 4;
    }

    // float time = 9;
    if (this->time() != 0) {
        total_size += 1 + 4;
    }

    // int32 quality = 10;
    if (this->quality() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->quality());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerHit::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerHit)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerHit* source = ::google::protobuf::internal::DynamicCastToGenerated<const TrackerHit>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerHit)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerHit)
        MergeFrom(*source);
    }
}

void TrackerHit::MergeFrom(const TrackerHit& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerHit)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    pos_.MergeFrom(from.pos_);
    cov_.MergeFrom(from.cov_);
    rawhits_.MergeFrom(from.rawhits_);
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.cellid0() != 0) {
        set_cellid0(from.cellid0());
    }
    if (from.cellid1() != 0) {
        set_cellid1(from.cellid1());
    }
    if (from.type() != 0) {
        set_type(from.type());
    }
    if (from.edep() != 0) {
        set_edep(from.edep());
    }
    if (from.edeperr() != 0) {
        set_edeperr(from.edeperr());
    }
    if (from.time() != 0) {
        set_time(from.time());
    }
    if (from.quality() != 0) {
        set_quality(from.quality());
    }
}

void TrackerHit::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerHit)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerHit::CopyFrom(const TrackerHit& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerHit)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerHit::IsInitialized() const { return true; }

void TrackerHit::Swap(TrackerHit* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerHit::InternalSwap(TrackerHit* other) {
    pos_.InternalSwap(&other->pos_);
    cov_.InternalSwap(&other->cov_);
    rawhits_.InternalSwap(&other->rawhits_);
    std::swap(id_, other->id_);
    std::swap(cellid0_, other->cellid0_);
    std::swap(cellid1_, other->cellid1_);
    std::swap(type_, other->type_);
    std::swap(edep_, other->edep_);
    std::swap(edeperr_, other->edeperr_);
    std::swap(time_, other->time_);
    std::swap(quality_, other->quality_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerHit::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerHit

// uint32 id = 1;
void TrackerHit::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerHit::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.id)
    return id_;
}
void TrackerHit::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.id)
}

// int32 cellID0 = 2;
void TrackerHit::clear_cellid0() { cellid0_ = 0; }
::google::protobuf::int32 TrackerHit::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.cellID0)
    return cellid0_;
}
void TrackerHit::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.cellID0)
}

// int32 cellID1 = 3;
void TrackerHit::clear_cellid1() { cellid1_ = 0; }
::google::protobuf::int32 TrackerHit::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.cellID1)
    return cellid1_;
}
void TrackerHit::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.cellID1)
}

// int32 type = 4;
void TrackerHit::clear_type() { type_ = 0; }
::google::protobuf::int32 TrackerHit::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.type)
    return type_;
}
void TrackerHit::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.type)
}

// repeated double pos = 5;
int TrackerHit::pos_size() const { return pos_.size(); }
void TrackerHit::clear_pos() { pos_.Clear(); }
double TrackerHit::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.pos)
    return pos_.Get(index);
}
void TrackerHit::set_pos(int index, double value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.pos)
}
void TrackerHit::add_pos(double value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHit.pos)
}
const ::google::protobuf::RepeatedField<double>& TrackerHit::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHit.pos)
    return pos_;
}
::google::protobuf::RepeatedField<double>* TrackerHit::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHit.pos)
    return &pos_;
}

// repeated double cov = 6;
int TrackerHit::cov_size() const { return cov_.size(); }
void TrackerHit::clear_cov() { cov_.Clear(); }
double TrackerHit::cov(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.cov)
    return cov_.Get(index);
}
void TrackerHit::set_cov(int index, double value) {
    cov_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.cov)
}
void TrackerHit::add_cov(double value) {
    cov_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHit.cov)
}
const ::google::protobuf::RepeatedField<double>& TrackerHit::cov() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHit.cov)
    return cov_;
}
::google::protobuf::RepeatedField<double>* TrackerHit::mutable_cov() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHit.cov)
    return &cov_;
}

// float EDep = 7;
void TrackerHit::clear_edep() { edep_ = 0; }
float TrackerHit::edep() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.EDep)
    return edep_;
}
void TrackerHit::set_edep(float value) {
    edep_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.EDep)
}

// float EDepErr = 8;
void TrackerHit::clear_edeperr() { edeperr_ = 0; }
float TrackerHit::edeperr() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.EDepErr)
    return edeperr_;
}
void TrackerHit::set_edeperr(float value) {
    edeperr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.EDepErr)
}

// float time = 9;
void TrackerHit::clear_time() { time_ = 0; }
float TrackerHit::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.time)
    return time_;
}
void TrackerHit::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.time)
}

// int32 quality = 10;
void TrackerHit::clear_quality() { quality_ = 0; }
::google::protobuf::int32 TrackerHit::quality() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.quality)
    return quality_;
}
void TrackerHit::set_quality(::google::protobuf::int32 value) {
    quality_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHit.quality)
}

// repeated .eicio.model.Reference rawHits = 11;
int TrackerHit::rawhits_size() const { return rawhits_.size(); }
void TrackerHit::clear_rawhits() { rawhits_.Clear(); }
const ::eicio::model::Reference& TrackerHit::rawhits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHit.rawHits)
    return rawhits_.Get(index);
}
::eicio::model::Reference* TrackerHit::mutable_rawhits(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHit.rawHits)
    return rawhits_.Mutable(index);
}
::eicio::model::Reference* TrackerHit::add_rawhits() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHit.rawHits)
    return rawhits_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* TrackerHit::mutable_rawhits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHit.rawHits)
    return &rawhits_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& TrackerHit::rawhits() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHit.rawHits)
    return rawhits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerHitCollection::kIdFieldNumber;
const int TrackerHitCollection::kFlagsFieldNumber;
const int TrackerHitCollection::kParamsFieldNumber;
const int TrackerHitCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerHitCollection::TrackerHitCollection() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerHitCollection)
}
TrackerHitCollection::TrackerHitCollection(const TrackerHitCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerHitCollection)
}

void TrackerHitCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

TrackerHitCollection::~TrackerHitCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerHitCollection)
    SharedDtor();
}

void TrackerHitCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void TrackerHitCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerHitCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerHitCollection& TrackerHitCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerHitCollection* TrackerHitCollection::New(::google::protobuf::Arena* arena) const {
    TrackerHitCollection* n = new TrackerHitCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerHitCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerHitCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool TrackerHitCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerHitCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.TrackerHit entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerHitCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerHitCollection)
    return false;
#undef DO_
}

void TrackerHitCollection::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerHitCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.TrackerHit entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerHitCollection)
}

::google::protobuf::uint8* TrackerHitCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerHitCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.TrackerHit entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerHitCollection)
    return target;
}

size_t TrackerHitCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerHitCollection)
    size_t total_size = 0;

    // repeated .eicio.model.TrackerHit entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerHitCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerHitCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerHitCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerHitCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerHitCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerHitCollection)
        MergeFrom(*source);
    }
}

void TrackerHitCollection::MergeFrom(const TrackerHitCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerHitCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void TrackerHitCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerHitCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerHitCollection::CopyFrom(const TrackerHitCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerHitCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerHitCollection::IsInitialized() const { return true; }

void TrackerHitCollection::Swap(TrackerHitCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerHitCollection::InternalSwap(TrackerHitCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerHitCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerHitCollection

// uint32 id = 1;
void TrackerHitCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerHitCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitCollection.id)
    return id_;
}
void TrackerHitCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitCollection.id)
}

// uint32 flags = 2;
void TrackerHitCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 TrackerHitCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitCollection.flags)
    return flags_;
}
void TrackerHitCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitCollection.flags)
}

// .eicio.model.Params params = 3;
bool TrackerHitCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void TrackerHitCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& TrackerHitCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* TrackerHitCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitCollection.params)
    return params_;
}
::eicio::model::Params* TrackerHitCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerHitCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void TrackerHitCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerHitCollection.params)
}

// repeated .eicio.model.TrackerHit entries = 4;
int TrackerHitCollection::entries_size() const { return entries_.size(); }
void TrackerHitCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::TrackerHit& TrackerHitCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitCollection.entries)
    return entries_.Get(index);
}
::eicio::model::TrackerHit* TrackerHitCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::TrackerHit* TrackerHitCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHit>* TrackerHitCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHit>& TrackerHitCollection::entries()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerPulse::kIdFieldNumber;
const int TrackerPulse::kCellID0FieldNumber;
const int TrackerPulse::kCellID1FieldNumber;
const int TrackerPulse::kTimeFieldNumber;
const int TrackerPulse::kChargeFieldNumber;
const int TrackerPulse::kCovFieldNumber;
const int TrackerPulse::kQualityFieldNumber;
const int TrackerPulse::kTPCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerPulse::TrackerPulse() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerPulse)
}
TrackerPulse::TrackerPulse(const TrackerPulse& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), cov_(from.cov_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_tpc()) {
        tpc_ = new ::eicio::model::Reference(*from.tpc_);
    } else {
        tpc_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerPulse)
}

void TrackerPulse::SharedCtor() {
    ::memset(&tpc_, 0,
             reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&tpc_) + sizeof(quality_));
    _cached_size_ = 0;
}

TrackerPulse::~TrackerPulse() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerPulse)
    SharedDtor();
}

void TrackerPulse::SharedDtor() {
    if (this != internal_default_instance()) {
        delete tpc_;
    }
}

void TrackerPulse::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerPulse::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerPulse& TrackerPulse::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerPulse* TrackerPulse::New(::google::protobuf::Arena* arena) const {
    TrackerPulse* n = new TrackerPulse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerPulse::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerPulse)
    cov_.Clear();
    if (GetArenaNoVirtual() == NULL && tpc_ != NULL) {
        delete tpc_;
    }
    tpc_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
}

bool TrackerPulse::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerPulse)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID0 = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID1 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid1_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float time = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(37u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &time_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float charge = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &charge_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float cov = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(50u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_cov())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 50u, input, this->mutable_cov())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 quality = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(56u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &quality_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Reference TPC = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(66u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_tpc()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerPulse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerPulse)
    return false;
#undef DO_
}

void TrackerPulse::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerPulse)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid0(), output);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid1(), output);
    }

    // float time = 4;
    if (this->time() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time(), output);
    }

    // float charge = 5;
    if (this->charge() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->charge(), output);
    }

    // repeated float cov = 6;
    if (this->cov_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_cov_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->cov().data(), this->cov_size(),
                                                                      output);
    }

    // int32 quality = 7;
    if (this->quality() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
    }

    // .eicio.model.Reference TPC = 8;
    if (this->has_tpc()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(8, *this->tpc_, output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerPulse)
}

::google::protobuf::uint8* TrackerPulse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerPulse)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid0(), target);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid1(), target);
    }

    // float time = 4;
    if (this->time() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time(), target);
    }

    // float charge = 5;
    if (this->charge() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->charge(), target);
    }

    // repeated float cov = 6;
    if (this->cov_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_cov_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->cov_, target);
    }

    // int32 quality = 7;
    if (this->quality() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
    }

    // .eicio.model.Reference TPC = 8;
    if (this->has_tpc()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            8, *this->tpc_, deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerPulse)
    return target;
}

size_t TrackerPulse::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerPulse)
    size_t total_size = 0;

    // repeated float cov = 6;
    {
        unsigned int count = this->cov_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cov_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // .eicio.model.Reference TPC = 8;
    if (this->has_tpc()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->tpc_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid0());
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid1());
    }

    // float time = 4;
    if (this->time() != 0) {
        total_size += 1 + 4;
    }

    // float charge = 5;
    if (this->charge() != 0) {
        total_size += 1 + 4;
    }

    // int32 quality = 7;
    if (this->quality() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->quality());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerPulse::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerPulse)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerPulse* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerPulse>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerPulse)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerPulse)
        MergeFrom(*source);
    }
}

void TrackerPulse::MergeFrom(const TrackerPulse& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerPulse)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    cov_.MergeFrom(from.cov_);
    if (from.has_tpc()) {
        mutable_tpc()->::eicio::model::Reference::MergeFrom(from.tpc());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.cellid0() != 0) {
        set_cellid0(from.cellid0());
    }
    if (from.cellid1() != 0) {
        set_cellid1(from.cellid1());
    }
    if (from.time() != 0) {
        set_time(from.time());
    }
    if (from.charge() != 0) {
        set_charge(from.charge());
    }
    if (from.quality() != 0) {
        set_quality(from.quality());
    }
}

void TrackerPulse::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerPulse)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerPulse::CopyFrom(const TrackerPulse& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerPulse)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerPulse::IsInitialized() const { return true; }

void TrackerPulse::Swap(TrackerPulse* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerPulse::InternalSwap(TrackerPulse* other) {
    cov_.InternalSwap(&other->cov_);
    std::swap(tpc_, other->tpc_);
    std::swap(id_, other->id_);
    std::swap(cellid0_, other->cellid0_);
    std::swap(cellid1_, other->cellid1_);
    std::swap(time_, other->time_);
    std::swap(charge_, other->charge_);
    std::swap(quality_, other->quality_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerPulse::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerPulse

// uint32 id = 1;
void TrackerPulse::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerPulse::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.id)
    return id_;
}
void TrackerPulse::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.id)
}

// int32 cellID0 = 2;
void TrackerPulse::clear_cellid0() { cellid0_ = 0; }
::google::protobuf::int32 TrackerPulse::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.cellID0)
    return cellid0_;
}
void TrackerPulse::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.cellID0)
}

// int32 cellID1 = 3;
void TrackerPulse::clear_cellid1() { cellid1_ = 0; }
::google::protobuf::int32 TrackerPulse::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.cellID1)
    return cellid1_;
}
void TrackerPulse::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.cellID1)
}

// float time = 4;
void TrackerPulse::clear_time() { time_ = 0; }
float TrackerPulse::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.time)
    return time_;
}
void TrackerPulse::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.time)
}

// float charge = 5;
void TrackerPulse::clear_charge() { charge_ = 0; }
float TrackerPulse::charge() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.charge)
    return charge_;
}
void TrackerPulse::set_charge(float value) {
    charge_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.charge)
}

// repeated float cov = 6;
int TrackerPulse::cov_size() const { return cov_.size(); }
void TrackerPulse::clear_cov() { cov_.Clear(); }
float TrackerPulse::cov(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.cov)
    return cov_.Get(index);
}
void TrackerPulse::set_cov(int index, float value) {
    cov_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.cov)
}
void TrackerPulse::add_cov(float value) {
    cov_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerPulse.cov)
}
const ::google::protobuf::RepeatedField<float>& TrackerPulse::cov() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerPulse.cov)
    return cov_;
}
::google::protobuf::RepeatedField<float>* TrackerPulse::mutable_cov() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerPulse.cov)
    return &cov_;
}

// int32 quality = 7;
void TrackerPulse::clear_quality() { quality_ = 0; }
::google::protobuf::int32 TrackerPulse::quality() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.quality)
    return quality_;
}
void TrackerPulse::set_quality(::google::protobuf::int32 value) {
    quality_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulse.quality)
}

// .eicio.model.Reference TPC = 8;
bool TrackerPulse::has_tpc() const { return this != internal_default_instance() && tpc_ != NULL; }
void TrackerPulse::clear_tpc() {
    if (GetArenaNoVirtual() == NULL && tpc_ != NULL) delete tpc_;
    tpc_ = NULL;
}
const ::eicio::model::Reference& TrackerPulse::tpc() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulse.TPC)
    return tpc_ != NULL ? *tpc_ : *::eicio::model::Reference::internal_default_instance();
}
::eicio::model::Reference* TrackerPulse::mutable_tpc() {
    if (tpc_ == NULL) {
        tpc_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerPulse.TPC)
    return tpc_;
}
::eicio::model::Reference* TrackerPulse::release_tpc() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerPulse.TPC)

    ::eicio::model::Reference* temp = tpc_;
    tpc_ = NULL;
    return temp;
}
void TrackerPulse::set_allocated_tpc(::eicio::model::Reference* tpc) {
    delete tpc_;
    tpc_ = tpc;
    if (tpc) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerPulse.TPC)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerPulseCollection::kIdFieldNumber;
const int TrackerPulseCollection::kFlagsFieldNumber;
const int TrackerPulseCollection::kParamsFieldNumber;
const int TrackerPulseCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerPulseCollection::TrackerPulseCollection() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerPulseCollection)
}
TrackerPulseCollection::TrackerPulseCollection(const TrackerPulseCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerPulseCollection)
}

void TrackerPulseCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

TrackerPulseCollection::~TrackerPulseCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerPulseCollection)
    SharedDtor();
}

void TrackerPulseCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void TrackerPulseCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerPulseCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerPulseCollection& TrackerPulseCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerPulseCollection* TrackerPulseCollection::New(::google::protobuf::Arena* arena) const {
    TrackerPulseCollection* n = new TrackerPulseCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerPulseCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerPulseCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool TrackerPulseCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerPulseCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.TrackerPulse entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerPulseCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerPulseCollection)
    return false;
#undef DO_
}

void TrackerPulseCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerPulseCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.TrackerPulse entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerPulseCollection)
}

::google::protobuf::uint8* TrackerPulseCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerPulseCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.TrackerPulse entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerPulseCollection)
    return target;
}

size_t TrackerPulseCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerPulseCollection)
    size_t total_size = 0;

    // repeated .eicio.model.TrackerPulse entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerPulseCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerPulseCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerPulseCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerPulseCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerPulseCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerPulseCollection)
        MergeFrom(*source);
    }
}

void TrackerPulseCollection::MergeFrom(const TrackerPulseCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerPulseCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void TrackerPulseCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerPulseCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerPulseCollection::CopyFrom(const TrackerPulseCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerPulseCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerPulseCollection::IsInitialized() const { return true; }

void TrackerPulseCollection::Swap(TrackerPulseCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerPulseCollection::InternalSwap(TrackerPulseCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerPulseCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerPulseCollection

// uint32 id = 1;
void TrackerPulseCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerPulseCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulseCollection.id)
    return id_;
}
void TrackerPulseCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulseCollection.id)
}

// uint32 flags = 2;
void TrackerPulseCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 TrackerPulseCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulseCollection.flags)
    return flags_;
}
void TrackerPulseCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerPulseCollection.flags)
}

// .eicio.model.Params params = 3;
bool TrackerPulseCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void TrackerPulseCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& TrackerPulseCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulseCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* TrackerPulseCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerPulseCollection.params)
    return params_;
}
::eicio::model::Params* TrackerPulseCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerPulseCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void TrackerPulseCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerPulseCollection.params)
}

// repeated .eicio.model.TrackerPulse entries = 4;
int TrackerPulseCollection::entries_size() const { return entries_.size(); }
void TrackerPulseCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::TrackerPulse& TrackerPulseCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerPulseCollection.entries)
    return entries_.Get(index);
}
::eicio::model::TrackerPulse* TrackerPulseCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerPulseCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::TrackerPulse* TrackerPulseCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerPulseCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerPulse>*
TrackerPulseCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerPulseCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerPulse>& TrackerPulseCollection::entries()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerPulseCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerHitPlane::kIdFieldNumber;
const int TrackerHitPlane::kCellID0FieldNumber;
const int TrackerHitPlane::kCellID1FieldNumber;
const int TrackerHitPlane::kTypeFieldNumber;
const int TrackerHitPlane::kPosFieldNumber;
const int TrackerHitPlane::kUFieldNumber;
const int TrackerHitPlane::kVFieldNumber;
const int TrackerHitPlane::kDUFieldNumber;
const int TrackerHitPlane::kDVFieldNumber;
const int TrackerHitPlane::kEDepFieldNumber;
const int TrackerHitPlane::kEDepErrFieldNumber;
const int TrackerHitPlane::kTimeFieldNumber;
const int TrackerHitPlane::kQualityFieldNumber;
const int TrackerHitPlane::kRawHitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerHitPlane::TrackerHitPlane() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerHitPlane)
}
TrackerHitPlane::TrackerHitPlane(const TrackerHitPlane& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pos_(from.pos_),
      u_(from.u_),
      v_(from.v_),
      rawhits_(from.rawhits_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerHitPlane)
}

void TrackerHitPlane::SharedCtor() {
    ::memset(&id_, 0, reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
    _cached_size_ = 0;
}

TrackerHitPlane::~TrackerHitPlane() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerHitPlane)
    SharedDtor();
}

void TrackerHitPlane::SharedDtor() {}

void TrackerHitPlane::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerHitPlane::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerHitPlane& TrackerHitPlane::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerHitPlane* TrackerHitPlane::New(::google::protobuf::Arena* arena) const {
    TrackerHitPlane* n = new TrackerHitPlane;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerHitPlane::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerHitPlane)
    pos_.Clear();
    u_.Clear();
    v_.Clear();
    rawhits_.Clear();
    ::memset(&id_, 0, reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
}

bool TrackerHitPlane::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerHitPlane)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID0 = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID1 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid1_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 type = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &type_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated double pos = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, this->mutable_pos())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(41u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        1, 42u, input, this->mutable_pos())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float U = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(50u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_u())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 50u, input, this->mutable_u())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float V = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(58u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_v())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(61u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 58u, input, this->mutable_v())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float dU = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(69u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &du_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float dV = 9;
            case 9: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(77u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &dv_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float EDep = 10;
            case 10: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(85u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &edep_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float EDepErr = 11;
            case 11: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(93u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &edeperr_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float time = 12;
            case 12: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(101u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &time_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 quality = 13;
            case 13: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(104u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &quality_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference rawHits = 14;
            case 14: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(114u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_rawhits()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerHitPlane)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerHitPlane)
    return false;
#undef DO_
}

void TrackerHitPlane::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerHitPlane)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid0(), output);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid1(), output);
    }

    // int32 type = 4;
    if (this->type() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
    }

    // repeated double pos = 5;
    if (this->pos_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_pos_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(this->pos().data(), this->pos_size(),
                                                                       output);
    }

    // repeated float U = 6;
    if (this->u_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_u_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->u().data(), this->u_size(),
                                                                      output);
    }

    // repeated float V = 7;
    if (this->v_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_v_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->v().data(), this->v_size(),
                                                                      output);
    }

    // float dU = 8;
    if (this->du() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->du(), output);
    }

    // float dV = 9;
    if (this->dv() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->dv(), output);
    }

    // float EDep = 10;
    if (this->edep() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->edep(), output);
    }

    // float EDepErr = 11;
    if (this->edeperr() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->edeperr(), output);
    }

    // float time = 12;
    if (this->time() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->time(), output);
    }

    // int32 quality = 13;
    if (this->quality() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->quality(), output);
    }

    // repeated .eicio.model.Reference rawHits = 14;
    for (unsigned int i = 0, n = this->rawhits_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(14, this->rawhits(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerHitPlane)
}

::google::protobuf::uint8* TrackerHitPlane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerHitPlane)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid0(), target);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid1(), target);
    }

    // int32 type = 4;
    if (this->type() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
    }

    // repeated double pos = 5;
    if (this->pos_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_pos_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTagToArray(this->pos_, target);
    }

    // repeated float U = 6;
    if (this->u_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_u_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->u_, target);
    }

    // repeated float V = 7;
    if (this->v_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_v_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->v_, target);
    }

    // float dU = 8;
    if (this->du() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->du(), target);
    }

    // float dV = 9;
    if (this->dv() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->dv(), target);
    }

    // float EDep = 10;
    if (this->edep() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->edep(), target);
    }

    // float EDepErr = 11;
    if (this->edeperr() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->edeperr(), target);
    }

    // float time = 12;
    if (this->time() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->time(), target);
    }

    // int32 quality = 13;
    if (this->quality() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->quality(), target);
    }

    // repeated .eicio.model.Reference rawHits = 14;
    for (unsigned int i = 0, n = this->rawhits_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            14, this->rawhits(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerHitPlane)
    return target;
}

size_t TrackerHitPlane::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerHitPlane)
    size_t total_size = 0;

    // repeated double pos = 5;
    {
        unsigned int count = this->pos_size();
        size_t data_size = 8UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _pos_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float U = 6;
    {
        unsigned int count = this->u_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _u_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float V = 7;
    {
        unsigned int count = this->v_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _v_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated .eicio.model.Reference rawHits = 14;
    {
        unsigned int count = this->rawhits_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->rawhits(i));
        }
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid0());
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid1());
    }

    // int32 type = 4;
    if (this->type() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->type());
    }

    // float dU = 8;
    if (this->du() != 0) {
        total_size += 1 + 4;
    }

    // float dV = 9;
    if (this->dv() != 0) {
        total_size += 1 + 4;
    }

    // float EDep = 10;
    if (this->edep() != 0) {
        total_size += 1 + 4;
    }

    // float EDepErr = 11;
    if (this->edeperr() != 0) {
        total_size += 1 + 4;
    }

    // float time = 12;
    if (this->time() != 0) {
        total_size += 1 + 4;
    }

    // int32 quality = 13;
    if (this->quality() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->quality());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerHitPlane::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerHitPlane)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerHitPlane* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerHitPlane>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerHitPlane)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerHitPlane)
        MergeFrom(*source);
    }
}

void TrackerHitPlane::MergeFrom(const TrackerHitPlane& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerHitPlane)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    pos_.MergeFrom(from.pos_);
    u_.MergeFrom(from.u_);
    v_.MergeFrom(from.v_);
    rawhits_.MergeFrom(from.rawhits_);
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.cellid0() != 0) {
        set_cellid0(from.cellid0());
    }
    if (from.cellid1() != 0) {
        set_cellid1(from.cellid1());
    }
    if (from.type() != 0) {
        set_type(from.type());
    }
    if (from.du() != 0) {
        set_du(from.du());
    }
    if (from.dv() != 0) {
        set_dv(from.dv());
    }
    if (from.edep() != 0) {
        set_edep(from.edep());
    }
    if (from.edeperr() != 0) {
        set_edeperr(from.edeperr());
    }
    if (from.time() != 0) {
        set_time(from.time());
    }
    if (from.quality() != 0) {
        set_quality(from.quality());
    }
}

void TrackerHitPlane::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerHitPlane)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerHitPlane::CopyFrom(const TrackerHitPlane& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerHitPlane)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerHitPlane::IsInitialized() const { return true; }

void TrackerHitPlane::Swap(TrackerHitPlane* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerHitPlane::InternalSwap(TrackerHitPlane* other) {
    pos_.InternalSwap(&other->pos_);
    u_.InternalSwap(&other->u_);
    v_.InternalSwap(&other->v_);
    rawhits_.InternalSwap(&other->rawhits_);
    std::swap(id_, other->id_);
    std::swap(cellid0_, other->cellid0_);
    std::swap(cellid1_, other->cellid1_);
    std::swap(type_, other->type_);
    std::swap(du_, other->du_);
    std::swap(dv_, other->dv_);
    std::swap(edep_, other->edep_);
    std::swap(edeperr_, other->edeperr_);
    std::swap(time_, other->time_);
    std::swap(quality_, other->quality_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerHitPlane::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerHitPlane

// uint32 id = 1;
void TrackerHitPlane::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerHitPlane::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.id)
    return id_;
}
void TrackerHitPlane::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.id)
}

// int32 cellID0 = 2;
void TrackerHitPlane::clear_cellid0() { cellid0_ = 0; }
::google::protobuf::int32 TrackerHitPlane::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.cellID0)
    return cellid0_;
}
void TrackerHitPlane::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.cellID0)
}

// int32 cellID1 = 3;
void TrackerHitPlane::clear_cellid1() { cellid1_ = 0; }
::google::protobuf::int32 TrackerHitPlane::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.cellID1)
    return cellid1_;
}
void TrackerHitPlane::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.cellID1)
}

// int32 type = 4;
void TrackerHitPlane::clear_type() { type_ = 0; }
::google::protobuf::int32 TrackerHitPlane::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.type)
    return type_;
}
void TrackerHitPlane::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.type)
}

// repeated double pos = 5;
int TrackerHitPlane::pos_size() const { return pos_.size(); }
void TrackerHitPlane::clear_pos() { pos_.Clear(); }
double TrackerHitPlane::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.pos)
    return pos_.Get(index);
}
void TrackerHitPlane::set_pos(int index, double value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.pos)
}
void TrackerHitPlane::add_pos(double value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitPlane.pos)
}
const ::google::protobuf::RepeatedField<double>& TrackerHitPlane::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitPlane.pos)
    return pos_;
}
::google::protobuf::RepeatedField<double>* TrackerHitPlane::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitPlane.pos)
    return &pos_;
}

// repeated float U = 6;
int TrackerHitPlane::u_size() const { return u_.size(); }
void TrackerHitPlane::clear_u() { u_.Clear(); }
float TrackerHitPlane::u(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.U)
    return u_.Get(index);
}
void TrackerHitPlane::set_u(int index, float value) {
    u_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.U)
}
void TrackerHitPlane::add_u(float value) {
    u_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitPlane.U)
}
const ::google::protobuf::RepeatedField<float>& TrackerHitPlane::u() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitPlane.U)
    return u_;
}
::google::protobuf::RepeatedField<float>* TrackerHitPlane::mutable_u() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitPlane.U)
    return &u_;
}

// repeated float V = 7;
int TrackerHitPlane::v_size() const { return v_.size(); }
void TrackerHitPlane::clear_v() { v_.Clear(); }
float TrackerHitPlane::v(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.V)
    return v_.Get(index);
}
void TrackerHitPlane::set_v(int index, float value) {
    v_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.V)
}
void TrackerHitPlane::add_v(float value) {
    v_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitPlane.V)
}
const ::google::protobuf::RepeatedField<float>& TrackerHitPlane::v() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitPlane.V)
    return v_;
}
::google::protobuf::RepeatedField<float>* TrackerHitPlane::mutable_v() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitPlane.V)
    return &v_;
}

// float dU = 8;
void TrackerHitPlane::clear_du() { du_ = 0; }
float TrackerHitPlane::du() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.dU)
    return du_;
}
void TrackerHitPlane::set_du(float value) {
    du_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.dU)
}

// float dV = 9;
void TrackerHitPlane::clear_dv() { dv_ = 0; }
float TrackerHitPlane::dv() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.dV)
    return dv_;
}
void TrackerHitPlane::set_dv(float value) {
    dv_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.dV)
}

// float EDep = 10;
void TrackerHitPlane::clear_edep() { edep_ = 0; }
float TrackerHitPlane::edep() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.EDep)
    return edep_;
}
void TrackerHitPlane::set_edep(float value) {
    edep_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.EDep)
}

// float EDepErr = 11;
void TrackerHitPlane::clear_edeperr() { edeperr_ = 0; }
float TrackerHitPlane::edeperr() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.EDepErr)
    return edeperr_;
}
void TrackerHitPlane::set_edeperr(float value) {
    edeperr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.EDepErr)
}

// float time = 12;
void TrackerHitPlane::clear_time() { time_ = 0; }
float TrackerHitPlane::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.time)
    return time_;
}
void TrackerHitPlane::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.time)
}

// int32 quality = 13;
void TrackerHitPlane::clear_quality() { quality_ = 0; }
::google::protobuf::int32 TrackerHitPlane::quality() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.quality)
    return quality_;
}
void TrackerHitPlane::set_quality(::google::protobuf::int32 value) {
    quality_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlane.quality)
}

// repeated .eicio.model.Reference rawHits = 14;
int TrackerHitPlane::rawhits_size() const { return rawhits_.size(); }
void TrackerHitPlane::clear_rawhits() { rawhits_.Clear(); }
const ::eicio::model::Reference& TrackerHitPlane::rawhits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlane.rawHits)
    return rawhits_.Get(index);
}
::eicio::model::Reference* TrackerHitPlane::mutable_rawhits(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitPlane.rawHits)
    return rawhits_.Mutable(index);
}
::eicio::model::Reference* TrackerHitPlane::add_rawhits() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitPlane.rawHits)
    return rawhits_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* TrackerHitPlane::mutable_rawhits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitPlane.rawHits)
    return &rawhits_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& TrackerHitPlane::rawhits() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitPlane.rawHits)
    return rawhits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerHitPlaneCollection::kIdFieldNumber;
const int TrackerHitPlaneCollection::kFlagsFieldNumber;
const int TrackerHitPlaneCollection::kParamsFieldNumber;
const int TrackerHitPlaneCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerHitPlaneCollection::TrackerHitPlaneCollection()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerHitPlaneCollection)
}
TrackerHitPlaneCollection::TrackerHitPlaneCollection(const TrackerHitPlaneCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerHitPlaneCollection)
}

void TrackerHitPlaneCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

TrackerHitPlaneCollection::~TrackerHitPlaneCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerHitPlaneCollection)
    SharedDtor();
}

void TrackerHitPlaneCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void TrackerHitPlaneCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerHitPlaneCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerHitPlaneCollection& TrackerHitPlaneCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerHitPlaneCollection* TrackerHitPlaneCollection::New(::google::protobuf::Arena* arena) const {
    TrackerHitPlaneCollection* n = new TrackerHitPlaneCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerHitPlaneCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerHitPlaneCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool TrackerHitPlaneCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerHitPlaneCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.TrackerHitPlane entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerHitPlaneCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerHitPlaneCollection)
    return false;
#undef DO_
}

void TrackerHitPlaneCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerHitPlaneCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.TrackerHitPlane entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerHitPlaneCollection)
}

::google::protobuf::uint8* TrackerHitPlaneCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerHitPlaneCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.TrackerHitPlane entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerHitPlaneCollection)
    return target;
}

size_t TrackerHitPlaneCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerHitPlaneCollection)
    size_t total_size = 0;

    // repeated .eicio.model.TrackerHitPlane entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerHitPlaneCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerHitPlaneCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerHitPlaneCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerHitPlaneCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerHitPlaneCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerHitPlaneCollection)
        MergeFrom(*source);
    }
}

void TrackerHitPlaneCollection::MergeFrom(const TrackerHitPlaneCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerHitPlaneCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void TrackerHitPlaneCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerHitPlaneCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerHitPlaneCollection::CopyFrom(const TrackerHitPlaneCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerHitPlaneCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerHitPlaneCollection::IsInitialized() const { return true; }

void TrackerHitPlaneCollection::Swap(TrackerHitPlaneCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerHitPlaneCollection::InternalSwap(TrackerHitPlaneCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerHitPlaneCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerHitPlaneCollection

// uint32 id = 1;
void TrackerHitPlaneCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerHitPlaneCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlaneCollection.id)
    return id_;
}
void TrackerHitPlaneCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlaneCollection.id)
}

// uint32 flags = 2;
void TrackerHitPlaneCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 TrackerHitPlaneCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlaneCollection.flags)
    return flags_;
}
void TrackerHitPlaneCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitPlaneCollection.flags)
}

// .eicio.model.Params params = 3;
bool TrackerHitPlaneCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void TrackerHitPlaneCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& TrackerHitPlaneCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlaneCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* TrackerHitPlaneCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitPlaneCollection.params)
    return params_;
}
::eicio::model::Params* TrackerHitPlaneCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerHitPlaneCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void TrackerHitPlaneCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerHitPlaneCollection.params)
}

// repeated .eicio.model.TrackerHitPlane entries = 4;
int TrackerHitPlaneCollection::entries_size() const { return entries_.size(); }
void TrackerHitPlaneCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::TrackerHitPlane& TrackerHitPlaneCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitPlaneCollection.entries)
    return entries_.Get(index);
}
::eicio::model::TrackerHitPlane* TrackerHitPlaneCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitPlaneCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::TrackerHitPlane* TrackerHitPlaneCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitPlaneCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitPlane>*
TrackerHitPlaneCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitPlaneCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitPlane>&
TrackerHitPlaneCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitPlaneCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerHitZCylinder::kIdFieldNumber;
const int TrackerHitZCylinder::kCellID0FieldNumber;
const int TrackerHitZCylinder::kCellID1FieldNumber;
const int TrackerHitZCylinder::kTypeFieldNumber;
const int TrackerHitZCylinder::kPosFieldNumber;
const int TrackerHitZCylinder::kCenterFieldNumber;
const int TrackerHitZCylinder::kDRPhiFieldNumber;
const int TrackerHitZCylinder::kDZFieldNumber;
const int TrackerHitZCylinder::kEDepFieldNumber;
const int TrackerHitZCylinder::kEDepErrFieldNumber;
const int TrackerHitZCylinder::kTimeFieldNumber;
const int TrackerHitZCylinder::kQualityFieldNumber;
const int TrackerHitZCylinder::kRawHitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerHitZCylinder::TrackerHitZCylinder() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerHitZCylinder)
}
TrackerHitZCylinder::TrackerHitZCylinder(const TrackerHitZCylinder& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pos_(from.pos_),
      center_(from.center_),
      rawhits_(from.rawhits_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerHitZCylinder)
}

void TrackerHitZCylinder::SharedCtor() {
    ::memset(&id_, 0, reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
    _cached_size_ = 0;
}

TrackerHitZCylinder::~TrackerHitZCylinder() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerHitZCylinder)
    SharedDtor();
}

void TrackerHitZCylinder::SharedDtor() {}

void TrackerHitZCylinder::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerHitZCylinder::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerHitZCylinder& TrackerHitZCylinder::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerHitZCylinder* TrackerHitZCylinder::New(::google::protobuf::Arena* arena) const {
    TrackerHitZCylinder* n = new TrackerHitZCylinder;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerHitZCylinder::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerHitZCylinder)
    pos_.Clear();
    center_.Clear();
    rawhits_.Clear();
    ::memset(&id_, 0, reinterpret_cast<char*>(&quality_) - reinterpret_cast<char*>(&id_) + sizeof(quality_));
}

bool TrackerHitZCylinder::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerHitZCylinder)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID0 = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID1 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid1_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 type = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &type_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated double pos = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, this->mutable_pos())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(41u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        1, 42u, input, this->mutable_pos())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float center = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(50u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_center())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 50u, input, this->mutable_center())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float dRPhi = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(61u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &drphi_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float dZ = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(69u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &dz_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float EDep = 9;
            case 9: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(77u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &edep_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float EDepErr = 10;
            case 10: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(85u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &edeperr_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float time = 11;
            case 11: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(93u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &time_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 quality = 12;
            case 12: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(96u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &quality_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference rawHits = 13;
            case 13: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(106u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_rawhits()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerHitZCylinder)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerHitZCylinder)
    return false;
#undef DO_
}

void TrackerHitZCylinder::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerHitZCylinder)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid0(), output);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid1(), output);
    }

    // int32 type = 4;
    if (this->type() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
    }

    // repeated double pos = 5;
    if (this->pos_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_pos_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(this->pos().data(), this->pos_size(),
                                                                       output);
    }

    // repeated float center = 6;
    if (this->center_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_center_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->center().data(),
                                                                      this->center_size(), output);
    }

    // float dRPhi = 7;
    if (this->drphi() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->drphi(), output);
    }

    // float dZ = 8;
    if (this->dz() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->dz(), output);
    }

    // float EDep = 9;
    if (this->edep() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->edep(), output);
    }

    // float EDepErr = 10;
    if (this->edeperr() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->edeperr(), output);
    }

    // float time = 11;
    if (this->time() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->time(), output);
    }

    // int32 quality = 12;
    if (this->quality() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->quality(), output);
    }

    // repeated .eicio.model.Reference rawHits = 13;
    for (unsigned int i = 0, n = this->rawhits_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(13, this->rawhits(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerHitZCylinder)
}

::google::protobuf::uint8* TrackerHitZCylinder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerHitZCylinder)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid0(), target);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid1(), target);
    }

    // int32 type = 4;
    if (this->type() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
    }

    // repeated double pos = 5;
    if (this->pos_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_pos_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTagToArray(this->pos_, target);
    }

    // repeated float center = 6;
    if (this->center_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_center_cached_byte_size_,
                                                                                 target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->center_, target);
    }

    // float dRPhi = 7;
    if (this->drphi() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->drphi(), target);
    }

    // float dZ = 8;
    if (this->dz() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->dz(), target);
    }

    // float EDep = 9;
    if (this->edep() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->edep(), target);
    }

    // float EDepErr = 10;
    if (this->edeperr() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->edeperr(), target);
    }

    // float time = 11;
    if (this->time() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->time(), target);
    }

    // int32 quality = 12;
    if (this->quality() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->quality(), target);
    }

    // repeated .eicio.model.Reference rawHits = 13;
    for (unsigned int i = 0, n = this->rawhits_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            13, this->rawhits(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerHitZCylinder)
    return target;
}

size_t TrackerHitZCylinder::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerHitZCylinder)
    size_t total_size = 0;

    // repeated double pos = 5;
    {
        unsigned int count = this->pos_size();
        size_t data_size = 8UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _pos_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float center = 6;
    {
        unsigned int count = this->center_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _center_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated .eicio.model.Reference rawHits = 13;
    {
        unsigned int count = this->rawhits_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->rawhits(i));
        }
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid0());
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid1());
    }

    // int32 type = 4;
    if (this->type() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->type());
    }

    // float dRPhi = 7;
    if (this->drphi() != 0) {
        total_size += 1 + 4;
    }

    // float dZ = 8;
    if (this->dz() != 0) {
        total_size += 1 + 4;
    }

    // float EDep = 9;
    if (this->edep() != 0) {
        total_size += 1 + 4;
    }

    // float EDepErr = 10;
    if (this->edeperr() != 0) {
        total_size += 1 + 4;
    }

    // float time = 11;
    if (this->time() != 0) {
        total_size += 1 + 4;
    }

    // int32 quality = 12;
    if (this->quality() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->quality());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerHitZCylinder::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerHitZCylinder)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerHitZCylinder* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerHitZCylinder>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerHitZCylinder)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerHitZCylinder)
        MergeFrom(*source);
    }
}

void TrackerHitZCylinder::MergeFrom(const TrackerHitZCylinder& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerHitZCylinder)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    pos_.MergeFrom(from.pos_);
    center_.MergeFrom(from.center_);
    rawhits_.MergeFrom(from.rawhits_);
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.cellid0() != 0) {
        set_cellid0(from.cellid0());
    }
    if (from.cellid1() != 0) {
        set_cellid1(from.cellid1());
    }
    if (from.type() != 0) {
        set_type(from.type());
    }
    if (from.drphi() != 0) {
        set_drphi(from.drphi());
    }
    if (from.dz() != 0) {
        set_dz(from.dz());
    }
    if (from.edep() != 0) {
        set_edep(from.edep());
    }
    if (from.edeperr() != 0) {
        set_edeperr(from.edeperr());
    }
    if (from.time() != 0) {
        set_time(from.time());
    }
    if (from.quality() != 0) {
        set_quality(from.quality());
    }
}

void TrackerHitZCylinder::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerHitZCylinder)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerHitZCylinder::CopyFrom(const TrackerHitZCylinder& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerHitZCylinder)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerHitZCylinder::IsInitialized() const { return true; }

void TrackerHitZCylinder::Swap(TrackerHitZCylinder* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerHitZCylinder::InternalSwap(TrackerHitZCylinder* other) {
    pos_.InternalSwap(&other->pos_);
    center_.InternalSwap(&other->center_);
    rawhits_.InternalSwap(&other->rawhits_);
    std::swap(id_, other->id_);
    std::swap(cellid0_, other->cellid0_);
    std::swap(cellid1_, other->cellid1_);
    std::swap(type_, other->type_);
    std::swap(drphi_, other->drphi_);
    std::swap(dz_, other->dz_);
    std::swap(edep_, other->edep_);
    std::swap(edeperr_, other->edeperr_);
    std::swap(time_, other->time_);
    std::swap(quality_, other->quality_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerHitZCylinder::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerHitZCylinder

// uint32 id = 1;
void TrackerHitZCylinder::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerHitZCylinder::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.id)
    return id_;
}
void TrackerHitZCylinder::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.id)
}

// int32 cellID0 = 2;
void TrackerHitZCylinder::clear_cellid0() { cellid0_ = 0; }
::google::protobuf::int32 TrackerHitZCylinder::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.cellID0)
    return cellid0_;
}
void TrackerHitZCylinder::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.cellID0)
}

// int32 cellID1 = 3;
void TrackerHitZCylinder::clear_cellid1() { cellid1_ = 0; }
::google::protobuf::int32 TrackerHitZCylinder::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.cellID1)
    return cellid1_;
}
void TrackerHitZCylinder::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.cellID1)
}

// int32 type = 4;
void TrackerHitZCylinder::clear_type() { type_ = 0; }
::google::protobuf::int32 TrackerHitZCylinder::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.type)
    return type_;
}
void TrackerHitZCylinder::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.type)
}

// repeated double pos = 5;
int TrackerHitZCylinder::pos_size() const { return pos_.size(); }
void TrackerHitZCylinder::clear_pos() { pos_.Clear(); }
double TrackerHitZCylinder::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.pos)
    return pos_.Get(index);
}
void TrackerHitZCylinder::set_pos(int index, double value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.pos)
}
void TrackerHitZCylinder::add_pos(double value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitZCylinder.pos)
}
const ::google::protobuf::RepeatedField<double>& TrackerHitZCylinder::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitZCylinder.pos)
    return pos_;
}
::google::protobuf::RepeatedField<double>* TrackerHitZCylinder::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitZCylinder.pos)
    return &pos_;
}

// repeated float center = 6;
int TrackerHitZCylinder::center_size() const { return center_.size(); }
void TrackerHitZCylinder::clear_center() { center_.Clear(); }
float TrackerHitZCylinder::center(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.center)
    return center_.Get(index);
}
void TrackerHitZCylinder::set_center(int index, float value) {
    center_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.center)
}
void TrackerHitZCylinder::add_center(float value) {
    center_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitZCylinder.center)
}
const ::google::protobuf::RepeatedField<float>& TrackerHitZCylinder::center() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitZCylinder.center)
    return center_;
}
::google::protobuf::RepeatedField<float>* TrackerHitZCylinder::mutable_center() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitZCylinder.center)
    return &center_;
}

// float dRPhi = 7;
void TrackerHitZCylinder::clear_drphi() { drphi_ = 0; }
float TrackerHitZCylinder::drphi() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.dRPhi)
    return drphi_;
}
void TrackerHitZCylinder::set_drphi(float value) {
    drphi_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.dRPhi)
}

// float dZ = 8;
void TrackerHitZCylinder::clear_dz() { dz_ = 0; }
float TrackerHitZCylinder::dz() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.dZ)
    return dz_;
}
void TrackerHitZCylinder::set_dz(float value) {
    dz_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.dZ)
}

// float EDep = 9;
void TrackerHitZCylinder::clear_edep() { edep_ = 0; }
float TrackerHitZCylinder::edep() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.EDep)
    return edep_;
}
void TrackerHitZCylinder::set_edep(float value) {
    edep_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.EDep)
}

// float EDepErr = 10;
void TrackerHitZCylinder::clear_edeperr() { edeperr_ = 0; }
float TrackerHitZCylinder::edeperr() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.EDepErr)
    return edeperr_;
}
void TrackerHitZCylinder::set_edeperr(float value) {
    edeperr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.EDepErr)
}

// float time = 11;
void TrackerHitZCylinder::clear_time() { time_ = 0; }
float TrackerHitZCylinder::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.time)
    return time_;
}
void TrackerHitZCylinder::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.time)
}

// int32 quality = 12;
void TrackerHitZCylinder::clear_quality() { quality_ = 0; }
::google::protobuf::int32 TrackerHitZCylinder::quality() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.quality)
    return quality_;
}
void TrackerHitZCylinder::set_quality(::google::protobuf::int32 value) {
    quality_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinder.quality)
}

// repeated .eicio.model.Reference rawHits = 13;
int TrackerHitZCylinder::rawhits_size() const { return rawhits_.size(); }
void TrackerHitZCylinder::clear_rawhits() { rawhits_.Clear(); }
const ::eicio::model::Reference& TrackerHitZCylinder::rawhits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinder.rawHits)
    return rawhits_.Get(index);
}
::eicio::model::Reference* TrackerHitZCylinder::mutable_rawhits(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitZCylinder.rawHits)
    return rawhits_.Mutable(index);
}
::eicio::model::Reference* TrackerHitZCylinder::add_rawhits() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitZCylinder.rawHits)
    return rawhits_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* TrackerHitZCylinder::mutable_rawhits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitZCylinder.rawHits)
    return &rawhits_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& TrackerHitZCylinder::rawhits() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitZCylinder.rawHits)
    return rawhits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerHitZCylinderCollection::kIdFieldNumber;
const int TrackerHitZCylinderCollection::kFlagsFieldNumber;
const int TrackerHitZCylinderCollection::kParamsFieldNumber;
const int TrackerHitZCylinderCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerHitZCylinderCollection::TrackerHitZCylinderCollection()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackerHitZCylinderCollection)
}
TrackerHitZCylinderCollection::TrackerHitZCylinderCollection(const TrackerHitZCylinderCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackerHitZCylinderCollection)
}

void TrackerHitZCylinderCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

TrackerHitZCylinderCollection::~TrackerHitZCylinderCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackerHitZCylinderCollection)
    SharedDtor();
}

void TrackerHitZCylinderCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void TrackerHitZCylinderCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerHitZCylinderCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerHitZCylinderCollection& TrackerHitZCylinderCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackerHitZCylinderCollection* TrackerHitZCylinderCollection::New(::google::protobuf::Arena* arena) const {
    TrackerHitZCylinderCollection* n = new TrackerHitZCylinderCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackerHitZCylinderCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackerHitZCylinderCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool TrackerHitZCylinderCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackerHitZCylinderCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.TrackerHitZCylinder entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackerHitZCylinderCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackerHitZCylinderCollection)
    return false;
#undef DO_
}

void TrackerHitZCylinderCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackerHitZCylinderCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.TrackerHitZCylinder entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackerHitZCylinderCollection)
}

::google::protobuf::uint8* TrackerHitZCylinderCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackerHitZCylinderCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.TrackerHitZCylinder entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackerHitZCylinderCollection)
    return target;
}

size_t TrackerHitZCylinderCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackerHitZCylinderCollection)
    size_t total_size = 0;

    // repeated .eicio.model.TrackerHitZCylinder entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackerHitZCylinderCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackerHitZCylinderCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackerHitZCylinderCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackerHitZCylinderCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackerHitZCylinderCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackerHitZCylinderCollection)
        MergeFrom(*source);
    }
}

void TrackerHitZCylinderCollection::MergeFrom(const TrackerHitZCylinderCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackerHitZCylinderCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void TrackerHitZCylinderCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackerHitZCylinderCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackerHitZCylinderCollection::CopyFrom(const TrackerHitZCylinderCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackerHitZCylinderCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackerHitZCylinderCollection::IsInitialized() const { return true; }

void TrackerHitZCylinderCollection::Swap(TrackerHitZCylinderCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackerHitZCylinderCollection::InternalSwap(TrackerHitZCylinderCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerHitZCylinderCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerHitZCylinderCollection

// uint32 id = 1;
void TrackerHitZCylinderCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackerHitZCylinderCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinderCollection.id)
    return id_;
}
void TrackerHitZCylinderCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinderCollection.id)
}

// uint32 flags = 2;
void TrackerHitZCylinderCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 TrackerHitZCylinderCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinderCollection.flags)
    return flags_;
}
void TrackerHitZCylinderCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackerHitZCylinderCollection.flags)
}

// .eicio.model.Params params = 3;
bool TrackerHitZCylinderCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void TrackerHitZCylinderCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& TrackerHitZCylinderCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinderCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* TrackerHitZCylinderCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitZCylinderCollection.params)
    return params_;
}
::eicio::model::Params* TrackerHitZCylinderCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackerHitZCylinderCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void TrackerHitZCylinderCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackerHitZCylinderCollection.params)
}

// repeated .eicio.model.TrackerHitZCylinder entries = 4;
int TrackerHitZCylinderCollection::entries_size() const { return entries_.size(); }
void TrackerHitZCylinderCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::TrackerHitZCylinder& TrackerHitZCylinderCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackerHitZCylinderCollection.entries)
    return entries_.Get(index);
}
::eicio::model::TrackerHitZCylinder* TrackerHitZCylinderCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackerHitZCylinderCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::TrackerHitZCylinder* TrackerHitZCylinderCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackerHitZCylinderCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitZCylinder>*
TrackerHitZCylinderCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackerHitZCylinderCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::TrackerHitZCylinder>&
TrackerHitZCylinderCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackerHitZCylinderCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Track_TrackState::kLocFieldNumber;
const int Track_TrackState::kD0FieldNumber;
const int Track_TrackState::kPhiFieldNumber;
const int Track_TrackState::kOmegaFieldNumber;
const int Track_TrackState::kZ0FieldNumber;
const int Track_TrackState::kTanLFieldNumber;
const int Track_TrackState::kCovFieldNumber;
const int Track_TrackState::kRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Track_TrackState::Track_TrackState() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.Track.TrackState)
}
Track_TrackState::Track_TrackState(const Track_TrackState& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cov_(from.cov_),
      ref_(from.ref_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&loc_, &from.loc_,
             reinterpret_cast<char*>(&tanl_) - reinterpret_cast<char*>(&loc_) + sizeof(tanl_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.Track.TrackState)
}

void Track_TrackState::SharedCtor() {
    ::memset(&loc_, 0, reinterpret_cast<char*>(&tanl_) - reinterpret_cast<char*>(&loc_) + sizeof(tanl_));
    _cached_size_ = 0;
}

Track_TrackState::~Track_TrackState() {
    // @@protoc_insertion_point(destructor:eicio.model.Track.TrackState)
    SharedDtor();
}

void Track_TrackState::SharedDtor() {}

void Track_TrackState::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track_TrackState::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Track_TrackState& Track_TrackState::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

Track_TrackState* Track_TrackState::New(::google::protobuf::Arena* arena) const {
    Track_TrackState* n = new Track_TrackState;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Track_TrackState::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.Track.TrackState)
    cov_.Clear();
    ref_.Clear();
    ::memset(&loc_, 0, reinterpret_cast<char*>(&tanl_) - reinterpret_cast<char*>(&loc_) + sizeof(tanl_));
}

bool Track_TrackState::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.Track.TrackState)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // int32 loc = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &loc_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float d0 = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(21u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &d0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float phi = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(29u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &phi_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float omega = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(37u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &omega_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float z0 = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &z0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float tanL = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &tanl_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float cov = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(58u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_cov())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(61u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 58u, input, this->mutable_cov())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float ref = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(66u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_ref())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(69u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 66u, input, this->mutable_ref())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.Track.TrackState)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.Track.TrackState)
    return false;
#undef DO_
}

void Track_TrackState::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.Track.TrackState)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int32 loc = 1;
    if (this->loc() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->loc(), output);
    }

    // float d0 = 2;
    if (this->d0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->d0(), output);
    }

    // float phi = 3;
    if (this->phi() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->phi(), output);
    }

    // float omega = 4;
    if (this->omega() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->omega(), output);
    }

    // float z0 = 5;
    if (this->z0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->z0(), output);
    }

    // float tanL = 6;
    if (this->tanl() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->tanl(), output);
    }

    // repeated float cov = 7;
    if (this->cov_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_cov_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->cov().data(), this->cov_size(),
                                                                      output);
    }

    // repeated float ref = 8;
    if (this->ref_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_ref_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->ref().data(), this->ref_size(),
                                                                      output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.Track.TrackState)
}

::google::protobuf::uint8* Track_TrackState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.Track.TrackState)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int32 loc = 1;
    if (this->loc() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->loc(), target);
    }

    // float d0 = 2;
    if (this->d0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->d0(), target);
    }

    // float phi = 3;
    if (this->phi() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->phi(), target);
    }

    // float omega = 4;
    if (this->omega() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->omega(), target);
    }

    // float z0 = 5;
    if (this->z0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->z0(), target);
    }

    // float tanL = 6;
    if (this->tanl() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->tanl(), target);
    }

    // repeated float cov = 7;
    if (this->cov_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_cov_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->cov_, target);
    }

    // repeated float ref = 8;
    if (this->ref_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_ref_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->ref_, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.Track.TrackState)
    return target;
}

size_t Track_TrackState::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.Track.TrackState)
    size_t total_size = 0;

    // repeated float cov = 7;
    {
        unsigned int count = this->cov_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cov_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float ref = 8;
    {
        unsigned int count = this->ref_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _ref_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // int32 loc = 1;
    if (this->loc() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->loc());
    }

    // float d0 = 2;
    if (this->d0() != 0) {
        total_size += 1 + 4;
    }

    // float phi = 3;
    if (this->phi() != 0) {
        total_size += 1 + 4;
    }

    // float omega = 4;
    if (this->omega() != 0) {
        total_size += 1 + 4;
    }

    // float z0 = 5;
    if (this->z0() != 0) {
        total_size += 1 + 4;
    }

    // float tanL = 6;
    if (this->tanl() != 0) {
        total_size += 1 + 4;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Track_TrackState::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.Track.TrackState)
    GOOGLE_DCHECK_NE(&from, this);
    const Track_TrackState* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const Track_TrackState>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.Track.TrackState)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.Track.TrackState)
        MergeFrom(*source);
    }
}

void Track_TrackState::MergeFrom(const Track_TrackState& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.Track.TrackState)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    cov_.MergeFrom(from.cov_);
    ref_.MergeFrom(from.ref_);
    if (from.loc() != 0) {
        set_loc(from.loc());
    }
    if (from.d0() != 0) {
        set_d0(from.d0());
    }
    if (from.phi() != 0) {
        set_phi(from.phi());
    }
    if (from.omega() != 0) {
        set_omega(from.omega());
    }
    if (from.z0() != 0) {
        set_z0(from.z0());
    }
    if (from.tanl() != 0) {
        set_tanl(from.tanl());
    }
}

void Track_TrackState::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.Track.TrackState)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Track_TrackState::CopyFrom(const Track_TrackState& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.Track.TrackState)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Track_TrackState::IsInitialized() const { return true; }

void Track_TrackState::Swap(Track_TrackState* other) {
    if (other == this) return;
    InternalSwap(other);
}
void Track_TrackState::InternalSwap(Track_TrackState* other) {
    cov_.InternalSwap(&other->cov_);
    ref_.InternalSwap(&other->ref_);
    std::swap(loc_, other->loc_);
    std::swap(d0_, other->d0_);
    std::swap(phi_, other->phi_);
    std::swap(omega_, other->omega_);
    std::swap(z0_, other->z0_);
    std::swap(tanl_, other->tanl_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Track_TrackState::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Track_TrackState

// int32 loc = 1;
void Track_TrackState::clear_loc() { loc_ = 0; }
::google::protobuf::int32 Track_TrackState::loc() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.loc)
    return loc_;
}
void Track_TrackState::set_loc(::google::protobuf::int32 value) {
    loc_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.loc)
}

// float d0 = 2;
void Track_TrackState::clear_d0() { d0_ = 0; }
float Track_TrackState::d0() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.d0)
    return d0_;
}
void Track_TrackState::set_d0(float value) {
    d0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.d0)
}

// float phi = 3;
void Track_TrackState::clear_phi() { phi_ = 0; }
float Track_TrackState::phi() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.phi)
    return phi_;
}
void Track_TrackState::set_phi(float value) {
    phi_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.phi)
}

// float omega = 4;
void Track_TrackState::clear_omega() { omega_ = 0; }
float Track_TrackState::omega() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.omega)
    return omega_;
}
void Track_TrackState::set_omega(float value) {
    omega_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.omega)
}

// float z0 = 5;
void Track_TrackState::clear_z0() { z0_ = 0; }
float Track_TrackState::z0() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.z0)
    return z0_;
}
void Track_TrackState::set_z0(float value) {
    z0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.z0)
}

// float tanL = 6;
void Track_TrackState::clear_tanl() { tanl_ = 0; }
float Track_TrackState::tanl() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.tanL)
    return tanl_;
}
void Track_TrackState::set_tanl(float value) {
    tanl_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.tanL)
}

// repeated float cov = 7;
int Track_TrackState::cov_size() const { return cov_.size(); }
void Track_TrackState::clear_cov() { cov_.Clear(); }
float Track_TrackState::cov(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.cov)
    return cov_.Get(index);
}
void Track_TrackState::set_cov(int index, float value) {
    cov_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.cov)
}
void Track_TrackState::add_cov(float value) {
    cov_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Track.TrackState.cov)
}
const ::google::protobuf::RepeatedField<float>& Track_TrackState::cov() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.TrackState.cov)
    return cov_;
}
::google::protobuf::RepeatedField<float>* Track_TrackState::mutable_cov() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.TrackState.cov)
    return &cov_;
}

// repeated float ref = 8;
int Track_TrackState::ref_size() const { return ref_.size(); }
void Track_TrackState::clear_ref() { ref_.Clear(); }
float Track_TrackState::ref(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.TrackState.ref)
    return ref_.Get(index);
}
void Track_TrackState::set_ref(int index, float value) {
    ref_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Track.TrackState.ref)
}
void Track_TrackState::add_ref(float value) {
    ref_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Track.TrackState.ref)
}
const ::google::protobuf::RepeatedField<float>& Track_TrackState::ref() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.TrackState.ref)
    return ref_;
}
::google::protobuf::RepeatedField<float>* Track_TrackState::mutable_ref() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.TrackState.ref)
    return &ref_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Track::kIdFieldNumber;
const int Track::kTypeFieldNumber;
const int Track::kChi2FieldNumber;
const int Track::kNDFFieldNumber;
const int Track::kDEdxFieldNumber;
const int Track::kDEdxErrFieldNumber;
const int Track::kRadiusFieldNumber;
const int Track::kSubDetHitsFieldNumber;
const int Track::kStatesFieldNumber;
const int Track::kHitsFieldNumber;
const int Track::kTracksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Track::Track() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.Track)
}
Track::Track(const Track& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subdethits_(from.subdethits_),
      states_(from.states_),
      hits_(from.hits_),
      tracks_(from.tracks_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&radius_) - reinterpret_cast<char*>(&id_) + sizeof(radius_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.Track)
}

void Track::SharedCtor() {
    ::memset(&id_, 0, reinterpret_cast<char*>(&radius_) - reinterpret_cast<char*>(&id_) + sizeof(radius_));
    _cached_size_ = 0;
}

Track::~Track() {
    // @@protoc_insertion_point(destructor:eicio.model.Track)
    SharedDtor();
}

void Track::SharedDtor() {}

void Track::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Track& Track::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

Track* Track::New(::google::protobuf::Arena* arena) const {
    Track* n = new Track;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Track::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.Track)
    subdethits_.Clear();
    states_.Clear();
    hits_.Clear();
    tracks_.Clear();
    ::memset(&id_, 0, reinterpret_cast<char*>(&radius_) - reinterpret_cast<char*>(&id_) + sizeof(radius_));
}

bool Track::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.Track)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 type = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &type_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float chi2 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(29u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &chi2_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 NDF = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &ndf_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float dEdx = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &dedx_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float dEdxErr = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &dedxerr_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float radius = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(61u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &radius_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated int32 subDetHits = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(66u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, this->mutable_subdethits())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(64u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        1, 66u, input, this->mutable_subdethits())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Track.TrackState states = 9;
            case 9: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(74u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_states()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference hits = 10;
            case 10: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(82u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_hits()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference tracks = 11;
            case 11: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(90u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_tracks()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.Track)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.Track)
    return false;
#undef DO_
}

void Track::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.Track)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 type = 2;
    if (this->type() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
    }

    // float chi2 = 3;
    if (this->chi2() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->chi2(), output);
    }

    // int32 NDF = 4;
    if (this->ndf() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ndf(), output);
    }

    // float dEdx = 5;
    if (this->dedx() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dedx(), output);
    }

    // float dEdxErr = 6;
    if (this->dedxerr() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dedxerr(), output);
    }

    // float radius = 7;
    if (this->radius() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->radius(), output);
    }

    // repeated int32 subDetHits = 8;
    if (this->subdethits_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_subdethits_cached_byte_size_);
    }
    for (int i = 0, n = this->subdethits_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(this->subdethits(i), output);
    }

    // repeated .eicio.model.Track.TrackState states = 9;
    for (unsigned int i = 0, n = this->states_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(9, this->states(i), output);
    }

    // repeated .eicio.model.Reference hits = 10;
    for (unsigned int i = 0, n = this->hits_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(10, this->hits(i), output);
    }

    // repeated .eicio.model.Reference tracks = 11;
    for (unsigned int i = 0, n = this->tracks_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, this->tracks(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.Track)
}

::google::protobuf::uint8* Track::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.Track)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 type = 2;
    if (this->type() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
    }

    // float chi2 = 3;
    if (this->chi2() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->chi2(), target);
    }

    // int32 NDF = 4;
    if (this->ndf() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ndf(), target);
    }

    // float dEdx = 5;
    if (this->dedx() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dedx(), target);
    }

    // float dEdxErr = 6;
    if (this->dedxerr() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dedxerr(), target);
    }

    // float radius = 7;
    if (this->radius() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->radius(), target);
    }

    // repeated int32 subDetHits = 8;
    if (this->subdethits_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
            _subdethits_cached_byte_size_, target);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteInt32NoTagToArray(this->subdethits_, target);
    }

    // repeated .eicio.model.Track.TrackState states = 9;
    for (unsigned int i = 0, n = this->states_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            9, this->states(i), deterministic, target);
    }

    // repeated .eicio.model.Reference hits = 10;
    for (unsigned int i = 0, n = this->hits_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            10, this->hits(i), deterministic, target);
    }

    // repeated .eicio.model.Reference tracks = 11;
    for (unsigned int i = 0, n = this->tracks_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            11, this->tracks(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.Track)
    return target;
}

size_t Track::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.Track)
    size_t total_size = 0;

    // repeated int32 subDetHits = 8;
    {
        size_t data_size = ::google::protobuf::internal::WireFormatLite::Int32Size(this->subdethits_);
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _subdethits_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated .eicio.model.Track.TrackState states = 9;
    {
        unsigned int count = this->states_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->states(i));
        }
    }

    // repeated .eicio.model.Reference hits = 10;
    {
        unsigned int count = this->hits_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->hits(i));
        }
    }

    // repeated .eicio.model.Reference tracks = 11;
    {
        unsigned int count = this->tracks_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->tracks(i));
        }
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 type = 2;
    if (this->type() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->type());
    }

    // float chi2 = 3;
    if (this->chi2() != 0) {
        total_size += 1 + 4;
    }

    // int32 NDF = 4;
    if (this->ndf() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->ndf());
    }

    // float dEdx = 5;
    if (this->dedx() != 0) {
        total_size += 1 + 4;
    }

    // float dEdxErr = 6;
    if (this->dedxerr() != 0) {
        total_size += 1 + 4;
    }

    // float radius = 7;
    if (this->radius() != 0) {
        total_size += 1 + 4;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.Track)
    GOOGLE_DCHECK_NE(&from, this);
    const Track* source = ::google::protobuf::internal::DynamicCastToGenerated<const Track>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.Track)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.Track)
        MergeFrom(*source);
    }
}

void Track::MergeFrom(const Track& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.Track)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    subdethits_.MergeFrom(from.subdethits_);
    states_.MergeFrom(from.states_);
    hits_.MergeFrom(from.hits_);
    tracks_.MergeFrom(from.tracks_);
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.type() != 0) {
        set_type(from.type());
    }
    if (from.chi2() != 0) {
        set_chi2(from.chi2());
    }
    if (from.ndf() != 0) {
        set_ndf(from.ndf());
    }
    if (from.dedx() != 0) {
        set_dedx(from.dedx());
    }
    if (from.dedxerr() != 0) {
        set_dedxerr(from.dedxerr());
    }
    if (from.radius() != 0) {
        set_radius(from.radius());
    }
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.Track)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.Track)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Track::IsInitialized() const { return true; }

void Track::Swap(Track* other) {
    if (other == this) return;
    InternalSwap(other);
}
void Track::InternalSwap(Track* other) {
    subdethits_.InternalSwap(&other->subdethits_);
    states_.InternalSwap(&other->states_);
    hits_.InternalSwap(&other->hits_);
    tracks_.InternalSwap(&other->tracks_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(chi2_, other->chi2_);
    std::swap(ndf_, other->ndf_);
    std::swap(dedx_, other->dedx_);
    std::swap(dedxerr_, other->dedxerr_);
    std::swap(radius_, other->radius_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Track::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Track

// uint32 id = 1;
void Track::clear_id() { id_ = 0u; }
::google::protobuf::uint32 Track::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.id)
    return id_;
}
void Track::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.id)
}

// int32 type = 2;
void Track::clear_type() { type_ = 0; }
::google::protobuf::int32 Track::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.type)
    return type_;
}
void Track::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.type)
}

// float chi2 = 3;
void Track::clear_chi2() { chi2_ = 0; }
float Track::chi2() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.chi2)
    return chi2_;
}
void Track::set_chi2(float value) {
    chi2_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.chi2)
}

// int32 NDF = 4;
void Track::clear_ndf() { ndf_ = 0; }
::google::protobuf::int32 Track::ndf() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.NDF)
    return ndf_;
}
void Track::set_ndf(::google::protobuf::int32 value) {
    ndf_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.NDF)
}

// float dEdx = 5;
void Track::clear_dedx() { dedx_ = 0; }
float Track::dedx() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.dEdx)
    return dedx_;
}
void Track::set_dedx(float value) {
    dedx_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.dEdx)
}

// float dEdxErr = 6;
void Track::clear_dedxerr() { dedxerr_ = 0; }
float Track::dedxerr() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.dEdxErr)
    return dedxerr_;
}
void Track::set_dedxerr(float value) {
    dedxerr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.dEdxErr)
}

// float radius = 7;
void Track::clear_radius() { radius_ = 0; }
float Track::radius() const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.radius)
    return radius_;
}
void Track::set_radius(float value) {
    radius_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Track.radius)
}

// repeated int32 subDetHits = 8;
int Track::subdethits_size() const { return subdethits_.size(); }
void Track::clear_subdethits() { subdethits_.Clear(); }
::google::protobuf::int32 Track::subdethits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.subDetHits)
    return subdethits_.Get(index);
}
void Track::set_subdethits(int index, ::google::protobuf::int32 value) {
    subdethits_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Track.subDetHits)
}
void Track::add_subdethits(::google::protobuf::int32 value) {
    subdethits_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Track.subDetHits)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32>& Track::subdethits() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.subDetHits)
    return subdethits_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32>* Track::mutable_subdethits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.subDetHits)
    return &subdethits_;
}

// repeated .eicio.model.Track.TrackState states = 9;
int Track::states_size() const { return states_.size(); }
void Track::clear_states() { states_.Clear(); }
const ::eicio::model::Track_TrackState& Track::states(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.states)
    return states_.Get(index);
}
::eicio::model::Track_TrackState* Track::mutable_states(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Track.states)
    return states_.Mutable(index);
}
::eicio::model::Track_TrackState* Track::add_states() {
    // @@protoc_insertion_point(field_add:eicio.model.Track.states)
    return states_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Track_TrackState>* Track::mutable_states() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.states)
    return &states_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Track_TrackState>& Track::states() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.states)
    return states_;
}

// repeated .eicio.model.Reference hits = 10;
int Track::hits_size() const { return hits_.size(); }
void Track::clear_hits() { hits_.Clear(); }
const ::eicio::model::Reference& Track::hits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.hits)
    return hits_.Get(index);
}
::eicio::model::Reference* Track::mutable_hits(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Track.hits)
    return hits_.Mutable(index);
}
::eicio::model::Reference* Track::add_hits() {
    // @@protoc_insertion_point(field_add:eicio.model.Track.hits)
    return hits_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* Track::mutable_hits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.hits)
    return &hits_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& Track::hits() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.hits)
    return hits_;
}

// repeated .eicio.model.Reference tracks = 11;
int Track::tracks_size() const { return tracks_.size(); }
void Track::clear_tracks() { tracks_.Clear(); }
const ::eicio::model::Reference& Track::tracks(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Track.tracks)
    return tracks_.Get(index);
}
::eicio::model::Reference* Track::mutable_tracks(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Track.tracks)
    return tracks_.Mutable(index);
}
::eicio::model::Reference* Track::add_tracks() {
    // @@protoc_insertion_point(field_add:eicio.model.Track.tracks)
    return tracks_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* Track::mutable_tracks() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Track.tracks)
    return &tracks_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& Track::tracks() const {
    // @@protoc_insertion_point(field_list:eicio.model.Track.tracks)
    return tracks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackCollection::kIdFieldNumber;
const int TrackCollection::kFlagsFieldNumber;
const int TrackCollection::kParamsFieldNumber;
const int TrackCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackCollection::TrackCollection() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.TrackCollection)
}
TrackCollection::TrackCollection(const TrackCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.TrackCollection)
}

void TrackCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

TrackCollection::~TrackCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.TrackCollection)
    SharedDtor();
}

void TrackCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void TrackCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackCollection& TrackCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

TrackCollection* TrackCollection::New(::google::protobuf::Arena* arena) const {
    TrackCollection* n = new TrackCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TrackCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.TrackCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool TrackCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.TrackCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Track entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.TrackCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.TrackCollection)
    return false;
#undef DO_
}

void TrackCollection::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.TrackCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.Track entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.TrackCollection)
}

::google::protobuf::uint8* TrackCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.TrackCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.Track entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.TrackCollection)
    return target;
}

size_t TrackCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.TrackCollection)
    size_t total_size = 0;

    // repeated .eicio.model.Track entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TrackCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.TrackCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const TrackCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const TrackCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.TrackCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.TrackCollection)
        MergeFrom(*source);
    }
}

void TrackCollection::MergeFrom(const TrackCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.TrackCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void TrackCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.TrackCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TrackCollection::CopyFrom(const TrackCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.TrackCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TrackCollection::IsInitialized() const { return true; }

void TrackCollection::Swap(TrackCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void TrackCollection::InternalSwap(TrackCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackCollection

// uint32 id = 1;
void TrackCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 TrackCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackCollection.id)
    return id_;
}
void TrackCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackCollection.id)
}

// uint32 flags = 2;
void TrackCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 TrackCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackCollection.flags)
    return flags_;
}
void TrackCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.TrackCollection.flags)
}

// .eicio.model.Params params = 3;
bool TrackCollection::has_params() const { return this != internal_default_instance() && params_ != NULL; }
void TrackCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& TrackCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* TrackCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackCollection.params)
    return params_;
}
::eicio::model::Params* TrackCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.TrackCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void TrackCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.TrackCollection.params)
}

// repeated .eicio.model.Track entries = 4;
int TrackCollection::entries_size() const { return entries_.size(); }
void TrackCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::Track& TrackCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.TrackCollection.entries)
    return entries_.Get(index);
}
::eicio::model::Track* TrackCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.TrackCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::Track* TrackCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.TrackCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Track>* TrackCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.TrackCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Track>& TrackCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.TrackCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimCalorimeterHit_Contrib::kMCParticleFieldNumber;
const int SimCalorimeterHit_Contrib::kEnergyFieldNumber;
const int SimCalorimeterHit_Contrib::kTimeFieldNumber;
const int SimCalorimeterHit_Contrib::kPDGFieldNumber;
const int SimCalorimeterHit_Contrib::kStepPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimCalorimeterHit_Contrib::SimCalorimeterHit_Contrib()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.SimCalorimeterHit.Contrib)
}
SimCalorimeterHit_Contrib::SimCalorimeterHit_Contrib(const SimCalorimeterHit_Contrib& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), steppos_(from.steppos_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_mcparticle()) {
        mcparticle_ = new ::eicio::model::Reference(*from.mcparticle_);
    } else {
        mcparticle_ = NULL;
    }
    ::memcpy(&energy_, &from.energy_,
             reinterpret_cast<char*>(&pdg_) - reinterpret_cast<char*>(&energy_) + sizeof(pdg_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.SimCalorimeterHit.Contrib)
}

void SimCalorimeterHit_Contrib::SharedCtor() {
    ::memset(&mcparticle_, 0,
             reinterpret_cast<char*>(&pdg_) - reinterpret_cast<char*>(&mcparticle_) + sizeof(pdg_));
    _cached_size_ = 0;
}

SimCalorimeterHit_Contrib::~SimCalorimeterHit_Contrib() {
    // @@protoc_insertion_point(destructor:eicio.model.SimCalorimeterHit.Contrib)
    SharedDtor();
}

void SimCalorimeterHit_Contrib::SharedDtor() {
    if (this != internal_default_instance()) {
        delete mcparticle_;
    }
}

void SimCalorimeterHit_Contrib::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimCalorimeterHit_Contrib::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimCalorimeterHit_Contrib& SimCalorimeterHit_Contrib::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

SimCalorimeterHit_Contrib* SimCalorimeterHit_Contrib::New(::google::protobuf::Arena* arena) const {
    SimCalorimeterHit_Contrib* n = new SimCalorimeterHit_Contrib;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SimCalorimeterHit_Contrib::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.SimCalorimeterHit.Contrib)
    steppos_.Clear();
    if (GetArenaNoVirtual() == NULL && mcparticle_ != NULL) {
        delete mcparticle_;
    }
    mcparticle_ = NULL;
    ::memset(&energy_, 0, reinterpret_cast<char*>(&pdg_) - reinterpret_cast<char*>(&energy_) + sizeof(pdg_));
}

bool SimCalorimeterHit_Contrib::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.SimCalorimeterHit.Contrib)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // .eicio.model.Reference MCParticle = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(10u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_mcparticle()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float energy = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(21u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &energy_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float time = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(29u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &time_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 PDG = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &pdg_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float stepPos = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_steppos())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 42u, input, this->mutable_steppos())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.SimCalorimeterHit.Contrib)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.SimCalorimeterHit.Contrib)
    return false;
#undef DO_
}

void SimCalorimeterHit_Contrib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.SimCalorimeterHit.Contrib)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .eicio.model.Reference MCParticle = 1;
    if (this->has_mcparticle()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *this->mcparticle_, output);
    }

    // float energy = 2;
    if (this->energy() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->energy(), output);
    }

    // float time = 3;
    if (this->time() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->time(), output);
    }

    // int32 PDG = 4;
    if (this->pdg() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pdg(), output);
    }

    // repeated float stepPos = 5;
    if (this->steppos_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_steppos_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->steppos().data(),
                                                                      this->steppos_size(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.SimCalorimeterHit.Contrib)
}

::google::protobuf::uint8* SimCalorimeterHit_Contrib::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.SimCalorimeterHit.Contrib)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .eicio.model.Reference MCParticle = 1;
    if (this->has_mcparticle()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            1, *this->mcparticle_, deterministic, target);
    }

    // float energy = 2;
    if (this->energy() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->energy(), target);
    }

    // float time = 3;
    if (this->time() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
    }

    // int32 PDG = 4;
    if (this->pdg() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pdg(), target);
    }

    // repeated float stepPos = 5;
    if (this->steppos_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_steppos_cached_byte_size_,
                                                                                 target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->steppos_, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.SimCalorimeterHit.Contrib)
    return target;
}

size_t SimCalorimeterHit_Contrib::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.SimCalorimeterHit.Contrib)
    size_t total_size = 0;

    // repeated float stepPos = 5;
    {
        unsigned int count = this->steppos_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _steppos_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // .eicio.model.Reference MCParticle = 1;
    if (this->has_mcparticle()) {
        total_size +=
            1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->mcparticle_);
    }

    // float energy = 2;
    if (this->energy() != 0) {
        total_size += 1 + 4;
    }

    // float time = 3;
    if (this->time() != 0) {
        total_size += 1 + 4;
    }

    // int32 PDG = 4;
    if (this->pdg() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->pdg());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SimCalorimeterHit_Contrib::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.SimCalorimeterHit.Contrib)
    GOOGLE_DCHECK_NE(&from, this);
    const SimCalorimeterHit_Contrib* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const SimCalorimeterHit_Contrib>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.SimCalorimeterHit.Contrib)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.SimCalorimeterHit.Contrib)
        MergeFrom(*source);
    }
}

void SimCalorimeterHit_Contrib::MergeFrom(const SimCalorimeterHit_Contrib& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.SimCalorimeterHit.Contrib)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    steppos_.MergeFrom(from.steppos_);
    if (from.has_mcparticle()) {
        mutable_mcparticle()->::eicio::model::Reference::MergeFrom(from.mcparticle());
    }
    if (from.energy() != 0) {
        set_energy(from.energy());
    }
    if (from.time() != 0) {
        set_time(from.time());
    }
    if (from.pdg() != 0) {
        set_pdg(from.pdg());
    }
}

void SimCalorimeterHit_Contrib::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.SimCalorimeterHit.Contrib)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void SimCalorimeterHit_Contrib::CopyFrom(const SimCalorimeterHit_Contrib& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.SimCalorimeterHit.Contrib)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool SimCalorimeterHit_Contrib::IsInitialized() const { return true; }

void SimCalorimeterHit_Contrib::Swap(SimCalorimeterHit_Contrib* other) {
    if (other == this) return;
    InternalSwap(other);
}
void SimCalorimeterHit_Contrib::InternalSwap(SimCalorimeterHit_Contrib* other) {
    steppos_.InternalSwap(&other->steppos_);
    std::swap(mcparticle_, other->mcparticle_);
    std::swap(energy_, other->energy_);
    std::swap(time_, other->time_);
    std::swap(pdg_, other->pdg_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimCalorimeterHit_Contrib::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimCalorimeterHit_Contrib

// .eicio.model.Reference MCParticle = 1;
bool SimCalorimeterHit_Contrib::has_mcparticle() const {
    return this != internal_default_instance() && mcparticle_ != NULL;
}
void SimCalorimeterHit_Contrib::clear_mcparticle() {
    if (GetArenaNoVirtual() == NULL && mcparticle_ != NULL) delete mcparticle_;
    mcparticle_ = NULL;
}
const ::eicio::model::Reference& SimCalorimeterHit_Contrib::mcparticle() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.Contrib.MCParticle)
    return mcparticle_ != NULL ? *mcparticle_ : *::eicio::model::Reference::internal_default_instance();
}
::eicio::model::Reference* SimCalorimeterHit_Contrib::mutable_mcparticle() {
    if (mcparticle_ == NULL) {
        mcparticle_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.SimCalorimeterHit.Contrib.MCParticle)
    return mcparticle_;
}
::eicio::model::Reference* SimCalorimeterHit_Contrib::release_mcparticle() {
    // @@protoc_insertion_point(field_release:eicio.model.SimCalorimeterHit.Contrib.MCParticle)

    ::eicio::model::Reference* temp = mcparticle_;
    mcparticle_ = NULL;
    return temp;
}
void SimCalorimeterHit_Contrib::set_allocated_mcparticle(::eicio::model::Reference* mcparticle) {
    delete mcparticle_;
    mcparticle_ = mcparticle;
    if (mcparticle) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.SimCalorimeterHit.Contrib.MCParticle)
}

// float energy = 2;
void SimCalorimeterHit_Contrib::clear_energy() { energy_ = 0; }
float SimCalorimeterHit_Contrib::energy() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.Contrib.energy)
    return energy_;
}
void SimCalorimeterHit_Contrib::set_energy(float value) {
    energy_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.Contrib.energy)
}

// float time = 3;
void SimCalorimeterHit_Contrib::clear_time() { time_ = 0; }
float SimCalorimeterHit_Contrib::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.Contrib.time)
    return time_;
}
void SimCalorimeterHit_Contrib::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.Contrib.time)
}

// int32 PDG = 4;
void SimCalorimeterHit_Contrib::clear_pdg() { pdg_ = 0; }
::google::protobuf::int32 SimCalorimeterHit_Contrib::pdg() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.Contrib.PDG)
    return pdg_;
}
void SimCalorimeterHit_Contrib::set_pdg(::google::protobuf::int32 value) {
    pdg_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.Contrib.PDG)
}

// repeated float stepPos = 5;
int SimCalorimeterHit_Contrib::steppos_size() const { return steppos_.size(); }
void SimCalorimeterHit_Contrib::clear_steppos() { steppos_.Clear(); }
float SimCalorimeterHit_Contrib::steppos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.Contrib.stepPos)
    return steppos_.Get(index);
}
void SimCalorimeterHit_Contrib::set_steppos(int index, float value) {
    steppos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.Contrib.stepPos)
}
void SimCalorimeterHit_Contrib::add_steppos(float value) {
    steppos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.SimCalorimeterHit.Contrib.stepPos)
}
const ::google::protobuf::RepeatedField<float>& SimCalorimeterHit_Contrib::steppos() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimCalorimeterHit.Contrib.stepPos)
    return steppos_;
}
::google::protobuf::RepeatedField<float>* SimCalorimeterHit_Contrib::mutable_steppos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimCalorimeterHit.Contrib.stepPos)
    return &steppos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimCalorimeterHit::kIdFieldNumber;
const int SimCalorimeterHit::kParamsFieldNumber;
const int SimCalorimeterHit::kCellID0FieldNumber;
const int SimCalorimeterHit::kCellID1FieldNumber;
const int SimCalorimeterHit::kEnergyFieldNumber;
const int SimCalorimeterHit::kPosFieldNumber;
const int SimCalorimeterHit::kContributionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimCalorimeterHit::SimCalorimeterHit() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.SimCalorimeterHit)
}
SimCalorimeterHit::SimCalorimeterHit(const SimCalorimeterHit& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pos_(from.pos_),
      contributions_(from.contributions_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&energy_) - reinterpret_cast<char*>(&id_) + sizeof(energy_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.SimCalorimeterHit)
}

void SimCalorimeterHit::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&energy_) - reinterpret_cast<char*>(&params_) + sizeof(energy_));
    _cached_size_ = 0;
}

SimCalorimeterHit::~SimCalorimeterHit() {
    // @@protoc_insertion_point(destructor:eicio.model.SimCalorimeterHit)
    SharedDtor();
}

void SimCalorimeterHit::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void SimCalorimeterHit::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimCalorimeterHit::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimCalorimeterHit& SimCalorimeterHit::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

SimCalorimeterHit* SimCalorimeterHit::New(::google::protobuf::Arena* arena) const {
    SimCalorimeterHit* n = new SimCalorimeterHit;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SimCalorimeterHit::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.SimCalorimeterHit)
    pos_.Clear();
    contributions_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&energy_) - reinterpret_cast<char*>(&id_) + sizeof(energy_));
}

bool SimCalorimeterHit::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.SimCalorimeterHit)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(18u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID0 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID1 = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid1_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float energy = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &energy_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float pos = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(50u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_pos())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 50u, input, this->mutable_pos())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.SimCalorimeterHit.Contrib contributions = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(58u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, add_contributions()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.SimCalorimeterHit)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.SimCalorimeterHit)
    return false;
#undef DO_
}

void SimCalorimeterHit::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.SimCalorimeterHit)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // .eicio.model.Params params = 2;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *this->params_, output);
    }

    // int32 cellID0 = 3;
    if (this->cellid0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid0(), output);
    }

    // int32 cellID1 = 4;
    if (this->cellid1() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cellid1(), output);
    }

    // float energy = 5;
    if (this->energy() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->energy(), output);
    }

    // repeated float pos = 6;
    if (this->pos_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_pos_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->pos().data(), this->pos_size(),
                                                                      output);
    }

    // repeated .eicio.model.SimCalorimeterHit.Contrib contributions = 7;
    for (unsigned int i = 0, n = this->contributions_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, this->contributions(i),
                                                                               output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.SimCalorimeterHit)
}

::google::protobuf::uint8* SimCalorimeterHit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.SimCalorimeterHit)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // .eicio.model.Params params = 2;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            2, *this->params_, deterministic, target);
    }

    // int32 cellID0 = 3;
    if (this->cellid0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid0(), target);
    }

    // int32 cellID1 = 4;
    if (this->cellid1() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cellid1(), target);
    }

    // float energy = 5;
    if (this->energy() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->energy(), target);
    }

    // repeated float pos = 6;
    if (this->pos_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_pos_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->pos_, target);
    }

    // repeated .eicio.model.SimCalorimeterHit.Contrib contributions = 7;
    for (unsigned int i = 0, n = this->contributions_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            7, this->contributions(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.SimCalorimeterHit)
    return target;
}

size_t SimCalorimeterHit::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.SimCalorimeterHit)
    size_t total_size = 0;

    // repeated float pos = 6;
    {
        unsigned int count = this->pos_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _pos_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated .eicio.model.SimCalorimeterHit.Contrib contributions = 7;
    {
        unsigned int count = this->contributions_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->contributions(i));
        }
    }

    // .eicio.model.Params params = 2;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 cellID0 = 3;
    if (this->cellid0() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid0());
    }

    // int32 cellID1 = 4;
    if (this->cellid1() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid1());
    }

    // float energy = 5;
    if (this->energy() != 0) {
        total_size += 1 + 4;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SimCalorimeterHit::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.SimCalorimeterHit)
    GOOGLE_DCHECK_NE(&from, this);
    const SimCalorimeterHit* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const SimCalorimeterHit>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.SimCalorimeterHit)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.SimCalorimeterHit)
        MergeFrom(*source);
    }
}

void SimCalorimeterHit::MergeFrom(const SimCalorimeterHit& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.SimCalorimeterHit)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    pos_.MergeFrom(from.pos_);
    contributions_.MergeFrom(from.contributions_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.cellid0() != 0) {
        set_cellid0(from.cellid0());
    }
    if (from.cellid1() != 0) {
        set_cellid1(from.cellid1());
    }
    if (from.energy() != 0) {
        set_energy(from.energy());
    }
}

void SimCalorimeterHit::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.SimCalorimeterHit)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void SimCalorimeterHit::CopyFrom(const SimCalorimeterHit& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.SimCalorimeterHit)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool SimCalorimeterHit::IsInitialized() const { return true; }

void SimCalorimeterHit::Swap(SimCalorimeterHit* other) {
    if (other == this) return;
    InternalSwap(other);
}
void SimCalorimeterHit::InternalSwap(SimCalorimeterHit* other) {
    pos_.InternalSwap(&other->pos_);
    contributions_.InternalSwap(&other->contributions_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(cellid0_, other->cellid0_);
    std::swap(cellid1_, other->cellid1_);
    std::swap(energy_, other->energy_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimCalorimeterHit::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimCalorimeterHit

// uint32 id = 1;
void SimCalorimeterHit::clear_id() { id_ = 0u; }
::google::protobuf::uint32 SimCalorimeterHit::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.id)
    return id_;
}
void SimCalorimeterHit::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.id)
}

// .eicio.model.Params params = 2;
bool SimCalorimeterHit::has_params() const { return this != internal_default_instance() && params_ != NULL; }
void SimCalorimeterHit::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& SimCalorimeterHit::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* SimCalorimeterHit::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.SimCalorimeterHit.params)
    return params_;
}
::eicio::model::Params* SimCalorimeterHit::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.SimCalorimeterHit.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void SimCalorimeterHit::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.SimCalorimeterHit.params)
}

// int32 cellID0 = 3;
void SimCalorimeterHit::clear_cellid0() { cellid0_ = 0; }
::google::protobuf::int32 SimCalorimeterHit::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.cellID0)
    return cellid0_;
}
void SimCalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.cellID0)
}

// int32 cellID1 = 4;
void SimCalorimeterHit::clear_cellid1() { cellid1_ = 0; }
::google::protobuf::int32 SimCalorimeterHit::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.cellID1)
    return cellid1_;
}
void SimCalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.cellID1)
}

// float energy = 5;
void SimCalorimeterHit::clear_energy() { energy_ = 0; }
float SimCalorimeterHit::energy() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.energy)
    return energy_;
}
void SimCalorimeterHit::set_energy(float value) {
    energy_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.energy)
}

// repeated float pos = 6;
int SimCalorimeterHit::pos_size() const { return pos_.size(); }
void SimCalorimeterHit::clear_pos() { pos_.Clear(); }
float SimCalorimeterHit::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.pos)
    return pos_.Get(index);
}
void SimCalorimeterHit::set_pos(int index, float value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHit.pos)
}
void SimCalorimeterHit::add_pos(float value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.SimCalorimeterHit.pos)
}
const ::google::protobuf::RepeatedField<float>& SimCalorimeterHit::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimCalorimeterHit.pos)
    return pos_;
}
::google::protobuf::RepeatedField<float>* SimCalorimeterHit::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimCalorimeterHit.pos)
    return &pos_;
}

// repeated .eicio.model.SimCalorimeterHit.Contrib contributions = 7;
int SimCalorimeterHit::contributions_size() const { return contributions_.size(); }
void SimCalorimeterHit::clear_contributions() { contributions_.Clear(); }
const ::eicio::model::SimCalorimeterHit_Contrib& SimCalorimeterHit::contributions(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHit.contributions)
    return contributions_.Get(index);
}
::eicio::model::SimCalorimeterHit_Contrib* SimCalorimeterHit::mutable_contributions(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.SimCalorimeterHit.contributions)
    return contributions_.Mutable(index);
}
::eicio::model::SimCalorimeterHit_Contrib* SimCalorimeterHit::add_contributions() {
    // @@protoc_insertion_point(field_add:eicio.model.SimCalorimeterHit.contributions)
    return contributions_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit_Contrib>*
SimCalorimeterHit::mutable_contributions() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimCalorimeterHit.contributions)
    return &contributions_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit_Contrib>&
SimCalorimeterHit::contributions() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimCalorimeterHit.contributions)
    return contributions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimCalorimeterHitCollection::kIdFieldNumber;
const int SimCalorimeterHitCollection::kFlagsFieldNumber;
const int SimCalorimeterHitCollection::kParamsFieldNumber;
const int SimCalorimeterHitCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimCalorimeterHitCollection::SimCalorimeterHitCollection()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.SimCalorimeterHitCollection)
}
SimCalorimeterHitCollection::SimCalorimeterHitCollection(const SimCalorimeterHitCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.SimCalorimeterHitCollection)
}

void SimCalorimeterHitCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

SimCalorimeterHitCollection::~SimCalorimeterHitCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.SimCalorimeterHitCollection)
    SharedDtor();
}

void SimCalorimeterHitCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void SimCalorimeterHitCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimCalorimeterHitCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimCalorimeterHitCollection& SimCalorimeterHitCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

SimCalorimeterHitCollection* SimCalorimeterHitCollection::New(::google::protobuf::Arena* arena) const {
    SimCalorimeterHitCollection* n = new SimCalorimeterHitCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SimCalorimeterHitCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.SimCalorimeterHitCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool SimCalorimeterHitCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.SimCalorimeterHitCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.SimCalorimeterHit entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.SimCalorimeterHitCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.SimCalorimeterHitCollection)
    return false;
#undef DO_
}

void SimCalorimeterHitCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.SimCalorimeterHitCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.SimCalorimeterHit entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.SimCalorimeterHitCollection)
}

::google::protobuf::uint8* SimCalorimeterHitCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.SimCalorimeterHitCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.SimCalorimeterHit entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.SimCalorimeterHitCollection)
    return target;
}

size_t SimCalorimeterHitCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.SimCalorimeterHitCollection)
    size_t total_size = 0;

    // repeated .eicio.model.SimCalorimeterHit entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SimCalorimeterHitCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.SimCalorimeterHitCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const SimCalorimeterHitCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const SimCalorimeterHitCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.SimCalorimeterHitCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.SimCalorimeterHitCollection)
        MergeFrom(*source);
    }
}

void SimCalorimeterHitCollection::MergeFrom(const SimCalorimeterHitCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.SimCalorimeterHitCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void SimCalorimeterHitCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.SimCalorimeterHitCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void SimCalorimeterHitCollection::CopyFrom(const SimCalorimeterHitCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.SimCalorimeterHitCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool SimCalorimeterHitCollection::IsInitialized() const { return true; }

void SimCalorimeterHitCollection::Swap(SimCalorimeterHitCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void SimCalorimeterHitCollection::InternalSwap(SimCalorimeterHitCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimCalorimeterHitCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimCalorimeterHitCollection

// uint32 id = 1;
void SimCalorimeterHitCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 SimCalorimeterHitCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHitCollection.id)
    return id_;
}
void SimCalorimeterHitCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHitCollection.id)
}

// uint32 flags = 2;
void SimCalorimeterHitCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 SimCalorimeterHitCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHitCollection.flags)
    return flags_;
}
void SimCalorimeterHitCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.SimCalorimeterHitCollection.flags)
}

// .eicio.model.Params params = 3;
bool SimCalorimeterHitCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void SimCalorimeterHitCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& SimCalorimeterHitCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHitCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* SimCalorimeterHitCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.SimCalorimeterHitCollection.params)
    return params_;
}
::eicio::model::Params* SimCalorimeterHitCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.SimCalorimeterHitCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void SimCalorimeterHitCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.SimCalorimeterHitCollection.params)
}

// repeated .eicio.model.SimCalorimeterHit entries = 4;
int SimCalorimeterHitCollection::entries_size() const { return entries_.size(); }
void SimCalorimeterHitCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::SimCalorimeterHit& SimCalorimeterHitCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.SimCalorimeterHitCollection.entries)
    return entries_.Get(index);
}
::eicio::model::SimCalorimeterHit* SimCalorimeterHitCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.SimCalorimeterHitCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::SimCalorimeterHit* SimCalorimeterHitCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.SimCalorimeterHitCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit>*
SimCalorimeterHitCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.SimCalorimeterHitCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::SimCalorimeterHit>&
SimCalorimeterHitCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.SimCalorimeterHitCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawCalorimeterHit::kIdFieldNumber;
const int RawCalorimeterHit::kCellID0FieldNumber;
const int RawCalorimeterHit::kCellID1FieldNumber;
const int RawCalorimeterHit::kAmplitudeFieldNumber;
const int RawCalorimeterHit::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawCalorimeterHit::RawCalorimeterHit() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.RawCalorimeterHit)
}
RawCalorimeterHit::RawCalorimeterHit(const RawCalorimeterHit& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(&id_) + sizeof(timestamp_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.RawCalorimeterHit)
}

void RawCalorimeterHit::SharedCtor() {
    ::memset(&id_, 0,
             reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(&id_) + sizeof(timestamp_));
    _cached_size_ = 0;
}

RawCalorimeterHit::~RawCalorimeterHit() {
    // @@protoc_insertion_point(destructor:eicio.model.RawCalorimeterHit)
    SharedDtor();
}

void RawCalorimeterHit::SharedDtor() {}

void RawCalorimeterHit::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawCalorimeterHit::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RawCalorimeterHit& RawCalorimeterHit::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

RawCalorimeterHit* RawCalorimeterHit::New(::google::protobuf::Arena* arena) const {
    RawCalorimeterHit* n = new RawCalorimeterHit;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void RawCalorimeterHit::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.RawCalorimeterHit)
    ::memset(&id_, 0,
             reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(&id_) + sizeof(timestamp_));
}

bool RawCalorimeterHit::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.RawCalorimeterHit)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID0 = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID1 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid1_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 amplitude = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &amplitude_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 timeStamp = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(40u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &timestamp_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.RawCalorimeterHit)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.RawCalorimeterHit)
    return false;
#undef DO_
}

void RawCalorimeterHit::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.RawCalorimeterHit)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid0(), output);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid1(), output);
    }

    // int32 amplitude = 4;
    if (this->amplitude() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->amplitude(), output);
    }

    // int32 timeStamp = 5;
    if (this->timestamp() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timestamp(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.RawCalorimeterHit)
}

::google::protobuf::uint8* RawCalorimeterHit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.RawCalorimeterHit)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid0(), target);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid1(), target);
    }

    // int32 amplitude = 4;
    if (this->amplitude() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->amplitude(), target);
    }

    // int32 timeStamp = 5;
    if (this->timestamp() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timestamp(), target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.RawCalorimeterHit)
    return target;
}

size_t RawCalorimeterHit::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.RawCalorimeterHit)
    size_t total_size = 0;

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid0());
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid1());
    }

    // int32 amplitude = 4;
    if (this->amplitude() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->amplitude());
    }

    // int32 timeStamp = 5;
    if (this->timestamp() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->timestamp());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void RawCalorimeterHit::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.RawCalorimeterHit)
    GOOGLE_DCHECK_NE(&from, this);
    const RawCalorimeterHit* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const RawCalorimeterHit>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.RawCalorimeterHit)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.RawCalorimeterHit)
        MergeFrom(*source);
    }
}

void RawCalorimeterHit::MergeFrom(const RawCalorimeterHit& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.RawCalorimeterHit)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.cellid0() != 0) {
        set_cellid0(from.cellid0());
    }
    if (from.cellid1() != 0) {
        set_cellid1(from.cellid1());
    }
    if (from.amplitude() != 0) {
        set_amplitude(from.amplitude());
    }
    if (from.timestamp() != 0) {
        set_timestamp(from.timestamp());
    }
}

void RawCalorimeterHit::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.RawCalorimeterHit)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void RawCalorimeterHit::CopyFrom(const RawCalorimeterHit& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.RawCalorimeterHit)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool RawCalorimeterHit::IsInitialized() const { return true; }

void RawCalorimeterHit::Swap(RawCalorimeterHit* other) {
    if (other == this) return;
    InternalSwap(other);
}
void RawCalorimeterHit::InternalSwap(RawCalorimeterHit* other) {
    std::swap(id_, other->id_);
    std::swap(cellid0_, other->cellid0_);
    std::swap(cellid1_, other->cellid1_);
    std::swap(amplitude_, other->amplitude_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawCalorimeterHit::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawCalorimeterHit

// uint32 id = 1;
void RawCalorimeterHit::clear_id() { id_ = 0u; }
::google::protobuf::uint32 RawCalorimeterHit::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHit.id)
    return id_;
}
void RawCalorimeterHit::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHit.id)
}

// int32 cellID0 = 2;
void RawCalorimeterHit::clear_cellid0() { cellid0_ = 0; }
::google::protobuf::int32 RawCalorimeterHit::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHit.cellID0)
    return cellid0_;
}
void RawCalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHit.cellID0)
}

// int32 cellID1 = 3;
void RawCalorimeterHit::clear_cellid1() { cellid1_ = 0; }
::google::protobuf::int32 RawCalorimeterHit::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHit.cellID1)
    return cellid1_;
}
void RawCalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHit.cellID1)
}

// int32 amplitude = 4;
void RawCalorimeterHit::clear_amplitude() { amplitude_ = 0; }
::google::protobuf::int32 RawCalorimeterHit::amplitude() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHit.amplitude)
    return amplitude_;
}
void RawCalorimeterHit::set_amplitude(::google::protobuf::int32 value) {
    amplitude_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHit.amplitude)
}

// int32 timeStamp = 5;
void RawCalorimeterHit::clear_timestamp() { timestamp_ = 0; }
::google::protobuf::int32 RawCalorimeterHit::timestamp() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHit.timeStamp)
    return timestamp_;
}
void RawCalorimeterHit::set_timestamp(::google::protobuf::int32 value) {
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHit.timeStamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawCalorimeterHitCollection::kIdFieldNumber;
const int RawCalorimeterHitCollection::kFlagsFieldNumber;
const int RawCalorimeterHitCollection::kParamsFieldNumber;
const int RawCalorimeterHitCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawCalorimeterHitCollection::RawCalorimeterHitCollection()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.RawCalorimeterHitCollection)
}
RawCalorimeterHitCollection::RawCalorimeterHitCollection(const RawCalorimeterHitCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.RawCalorimeterHitCollection)
}

void RawCalorimeterHitCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

RawCalorimeterHitCollection::~RawCalorimeterHitCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.RawCalorimeterHitCollection)
    SharedDtor();
}

void RawCalorimeterHitCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void RawCalorimeterHitCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawCalorimeterHitCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RawCalorimeterHitCollection& RawCalorimeterHitCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

RawCalorimeterHitCollection* RawCalorimeterHitCollection::New(::google::protobuf::Arena* arena) const {
    RawCalorimeterHitCollection* n = new RawCalorimeterHitCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void RawCalorimeterHitCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.RawCalorimeterHitCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool RawCalorimeterHitCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.RawCalorimeterHitCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.RawCalorimeterHit entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.RawCalorimeterHitCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.RawCalorimeterHitCollection)
    return false;
#undef DO_
}

void RawCalorimeterHitCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.RawCalorimeterHitCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.RawCalorimeterHit entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.RawCalorimeterHitCollection)
}

::google::protobuf::uint8* RawCalorimeterHitCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.RawCalorimeterHitCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.RawCalorimeterHit entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.RawCalorimeterHitCollection)
    return target;
}

size_t RawCalorimeterHitCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.RawCalorimeterHitCollection)
    size_t total_size = 0;

    // repeated .eicio.model.RawCalorimeterHit entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void RawCalorimeterHitCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.RawCalorimeterHitCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const RawCalorimeterHitCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const RawCalorimeterHitCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.RawCalorimeterHitCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.RawCalorimeterHitCollection)
        MergeFrom(*source);
    }
}

void RawCalorimeterHitCollection::MergeFrom(const RawCalorimeterHitCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.RawCalorimeterHitCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void RawCalorimeterHitCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.RawCalorimeterHitCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void RawCalorimeterHitCollection::CopyFrom(const RawCalorimeterHitCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.RawCalorimeterHitCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool RawCalorimeterHitCollection::IsInitialized() const { return true; }

void RawCalorimeterHitCollection::Swap(RawCalorimeterHitCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void RawCalorimeterHitCollection::InternalSwap(RawCalorimeterHitCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawCalorimeterHitCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawCalorimeterHitCollection

// uint32 id = 1;
void RawCalorimeterHitCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 RawCalorimeterHitCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHitCollection.id)
    return id_;
}
void RawCalorimeterHitCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHitCollection.id)
}

// uint32 flags = 2;
void RawCalorimeterHitCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 RawCalorimeterHitCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHitCollection.flags)
    return flags_;
}
void RawCalorimeterHitCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RawCalorimeterHitCollection.flags)
}

// .eicio.model.Params params = 3;
bool RawCalorimeterHitCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void RawCalorimeterHitCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& RawCalorimeterHitCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHitCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* RawCalorimeterHitCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.RawCalorimeterHitCollection.params)
    return params_;
}
::eicio::model::Params* RawCalorimeterHitCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.RawCalorimeterHitCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void RawCalorimeterHitCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.RawCalorimeterHitCollection.params)
}

// repeated .eicio.model.RawCalorimeterHit entries = 4;
int RawCalorimeterHitCollection::entries_size() const { return entries_.size(); }
void RawCalorimeterHitCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::RawCalorimeterHit& RawCalorimeterHitCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RawCalorimeterHitCollection.entries)
    return entries_.Get(index);
}
::eicio::model::RawCalorimeterHit* RawCalorimeterHitCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RawCalorimeterHitCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::RawCalorimeterHit* RawCalorimeterHitCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.RawCalorimeterHitCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::RawCalorimeterHit>*
RawCalorimeterHitCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RawCalorimeterHitCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::RawCalorimeterHit>&
RawCalorimeterHitCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.RawCalorimeterHitCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalorimeterHit::kIdFieldNumber;
const int CalorimeterHit::kCellID0FieldNumber;
const int CalorimeterHit::kCellID1FieldNumber;
const int CalorimeterHit::kEnergyFieldNumber;
const int CalorimeterHit::kEnergyErrFieldNumber;
const int CalorimeterHit::kTimeFieldNumber;
const int CalorimeterHit::kPosFieldNumber;
const int CalorimeterHit::kTypeFieldNumber;
const int CalorimeterHit::kRawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalorimeterHit::CalorimeterHit() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.CalorimeterHit)
}
CalorimeterHit::CalorimeterHit(const CalorimeterHit& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), pos_(from.pos_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_raw()) {
        raw_ = new ::eicio::model::Reference(*from.raw_);
    } else {
        raw_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(&id_) + sizeof(type_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.CalorimeterHit)
}

void CalorimeterHit::SharedCtor() {
    ::memset(&raw_, 0, reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(&raw_) + sizeof(type_));
    _cached_size_ = 0;
}

CalorimeterHit::~CalorimeterHit() {
    // @@protoc_insertion_point(destructor:eicio.model.CalorimeterHit)
    SharedDtor();
}

void CalorimeterHit::SharedDtor() {
    if (this != internal_default_instance()) {
        delete raw_;
    }
}

void CalorimeterHit::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalorimeterHit::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CalorimeterHit& CalorimeterHit::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

CalorimeterHit* CalorimeterHit::New(::google::protobuf::Arena* arena) const {
    CalorimeterHit* n = new CalorimeterHit;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CalorimeterHit::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.CalorimeterHit)
    pos_.Clear();
    if (GetArenaNoVirtual() == NULL && raw_ != NULL) {
        delete raw_;
    }
    raw_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(&id_) + sizeof(type_));
}

bool CalorimeterHit::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.CalorimeterHit)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID0 = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid0_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 cellID1 = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &cellid1_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float energy = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(37u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &energy_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float energyErr = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input,
                                                                                          &energyerr_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float time = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &time_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float pos = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(58u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_pos())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(61u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 58u, input, this->mutable_pos())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 type = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(64u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &type_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Reference raw = 9;
            case 9: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(74u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_raw()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.CalorimeterHit)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.CalorimeterHit)
    return false;
#undef DO_
}

void CalorimeterHit::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.CalorimeterHit)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid0(), output);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid1(), output);
    }

    // float energy = 4;
    if (this->energy() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->energy(), output);
    }

    // float energyErr = 5;
    if (this->energyerr() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->energyerr(), output);
    }

    // float time = 6;
    if (this->time() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->time(), output);
    }

    // repeated float pos = 7;
    if (this->pos_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_pos_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->pos().data(), this->pos_size(),
                                                                      output);
    }

    // int32 type = 8;
    if (this->type() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
    }

    // .eicio.model.Reference raw = 9;
    if (this->has_raw()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(9, *this->raw_, output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.CalorimeterHit)
}

::google::protobuf::uint8* CalorimeterHit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.CalorimeterHit)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid0(), target);
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid1(), target);
    }

    // float energy = 4;
    if (this->energy() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->energy(), target);
    }

    // float energyErr = 5;
    if (this->energyerr() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->energyerr(), target);
    }

    // float time = 6;
    if (this->time() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->time(), target);
    }

    // repeated float pos = 7;
    if (this->pos_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_pos_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->pos_, target);
    }

    // int32 type = 8;
    if (this->type() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
    }

    // .eicio.model.Reference raw = 9;
    if (this->has_raw()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            9, *this->raw_, deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.CalorimeterHit)
    return target;
}

size_t CalorimeterHit::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.CalorimeterHit)
    size_t total_size = 0;

    // repeated float pos = 7;
    {
        unsigned int count = this->pos_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _pos_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // .eicio.model.Reference raw = 9;
    if (this->has_raw()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->raw_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 cellID0 = 2;
    if (this->cellid0() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid0());
    }

    // int32 cellID1 = 3;
    if (this->cellid1() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cellid1());
    }

    // float energy = 4;
    if (this->energy() != 0) {
        total_size += 1 + 4;
    }

    // float energyErr = 5;
    if (this->energyerr() != 0) {
        total_size += 1 + 4;
    }

    // float time = 6;
    if (this->time() != 0) {
        total_size += 1 + 4;
    }

    // int32 type = 8;
    if (this->type() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->type());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CalorimeterHit::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.CalorimeterHit)
    GOOGLE_DCHECK_NE(&from, this);
    const CalorimeterHit* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const CalorimeterHit>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.CalorimeterHit)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.CalorimeterHit)
        MergeFrom(*source);
    }
}

void CalorimeterHit::MergeFrom(const CalorimeterHit& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.CalorimeterHit)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    pos_.MergeFrom(from.pos_);
    if (from.has_raw()) {
        mutable_raw()->::eicio::model::Reference::MergeFrom(from.raw());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.cellid0() != 0) {
        set_cellid0(from.cellid0());
    }
    if (from.cellid1() != 0) {
        set_cellid1(from.cellid1());
    }
    if (from.energy() != 0) {
        set_energy(from.energy());
    }
    if (from.energyerr() != 0) {
        set_energyerr(from.energyerr());
    }
    if (from.time() != 0) {
        set_time(from.time());
    }
    if (from.type() != 0) {
        set_type(from.type());
    }
}

void CalorimeterHit::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.CalorimeterHit)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void CalorimeterHit::CopyFrom(const CalorimeterHit& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.CalorimeterHit)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool CalorimeterHit::IsInitialized() const { return true; }

void CalorimeterHit::Swap(CalorimeterHit* other) {
    if (other == this) return;
    InternalSwap(other);
}
void CalorimeterHit::InternalSwap(CalorimeterHit* other) {
    pos_.InternalSwap(&other->pos_);
    std::swap(raw_, other->raw_);
    std::swap(id_, other->id_);
    std::swap(cellid0_, other->cellid0_);
    std::swap(cellid1_, other->cellid1_);
    std::swap(energy_, other->energy_);
    std::swap(energyerr_, other->energyerr_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalorimeterHit::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalorimeterHit

// uint32 id = 1;
void CalorimeterHit::clear_id() { id_ = 0u; }
::google::protobuf::uint32 CalorimeterHit::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.id)
    return id_;
}
void CalorimeterHit::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.id)
}

// int32 cellID0 = 2;
void CalorimeterHit::clear_cellid0() { cellid0_ = 0; }
::google::protobuf::int32 CalorimeterHit::cellid0() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.cellID0)
    return cellid0_;
}
void CalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
    cellid0_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.cellID0)
}

// int32 cellID1 = 3;
void CalorimeterHit::clear_cellid1() { cellid1_ = 0; }
::google::protobuf::int32 CalorimeterHit::cellid1() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.cellID1)
    return cellid1_;
}
void CalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
    cellid1_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.cellID1)
}

// float energy = 4;
void CalorimeterHit::clear_energy() { energy_ = 0; }
float CalorimeterHit::energy() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.energy)
    return energy_;
}
void CalorimeterHit::set_energy(float value) {
    energy_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.energy)
}

// float energyErr = 5;
void CalorimeterHit::clear_energyerr() { energyerr_ = 0; }
float CalorimeterHit::energyerr() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.energyErr)
    return energyerr_;
}
void CalorimeterHit::set_energyerr(float value) {
    energyerr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.energyErr)
}

// float time = 6;
void CalorimeterHit::clear_time() { time_ = 0; }
float CalorimeterHit::time() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.time)
    return time_;
}
void CalorimeterHit::set_time(float value) {
    time_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.time)
}

// repeated float pos = 7;
int CalorimeterHit::pos_size() const { return pos_.size(); }
void CalorimeterHit::clear_pos() { pos_.Clear(); }
float CalorimeterHit::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.pos)
    return pos_.Get(index);
}
void CalorimeterHit::set_pos(int index, float value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.pos)
}
void CalorimeterHit::add_pos(float value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.CalorimeterHit.pos)
}
const ::google::protobuf::RepeatedField<float>& CalorimeterHit::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.CalorimeterHit.pos)
    return pos_;
}
::google::protobuf::RepeatedField<float>* CalorimeterHit::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.CalorimeterHit.pos)
    return &pos_;
}

// int32 type = 8;
void CalorimeterHit::clear_type() { type_ = 0; }
::google::protobuf::int32 CalorimeterHit::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.type)
    return type_;
}
void CalorimeterHit::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHit.type)
}

// .eicio.model.Reference raw = 9;
bool CalorimeterHit::has_raw() const { return this != internal_default_instance() && raw_ != NULL; }
void CalorimeterHit::clear_raw() {
    if (GetArenaNoVirtual() == NULL && raw_ != NULL) delete raw_;
    raw_ = NULL;
}
const ::eicio::model::Reference& CalorimeterHit::raw() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHit.raw)
    return raw_ != NULL ? *raw_ : *::eicio::model::Reference::internal_default_instance();
}
::eicio::model::Reference* CalorimeterHit::mutable_raw() {
    if (raw_ == NULL) {
        raw_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.CalorimeterHit.raw)
    return raw_;
}
::eicio::model::Reference* CalorimeterHit::release_raw() {
    // @@protoc_insertion_point(field_release:eicio.model.CalorimeterHit.raw)

    ::eicio::model::Reference* temp = raw_;
    raw_ = NULL;
    return temp;
}
void CalorimeterHit::set_allocated_raw(::eicio::model::Reference* raw) {
    delete raw_;
    raw_ = raw;
    if (raw) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.CalorimeterHit.raw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalorimeterHitCollection::kIdFieldNumber;
const int CalorimeterHitCollection::kFlagsFieldNumber;
const int CalorimeterHitCollection::kParamsFieldNumber;
const int CalorimeterHitCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalorimeterHitCollection::CalorimeterHitCollection()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.CalorimeterHitCollection)
}
CalorimeterHitCollection::CalorimeterHitCollection(const CalorimeterHitCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.CalorimeterHitCollection)
}

void CalorimeterHitCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

CalorimeterHitCollection::~CalorimeterHitCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.CalorimeterHitCollection)
    SharedDtor();
}

void CalorimeterHitCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void CalorimeterHitCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalorimeterHitCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CalorimeterHitCollection& CalorimeterHitCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

CalorimeterHitCollection* CalorimeterHitCollection::New(::google::protobuf::Arena* arena) const {
    CalorimeterHitCollection* n = new CalorimeterHitCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CalorimeterHitCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.CalorimeterHitCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool CalorimeterHitCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.CalorimeterHitCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.CalorimeterHit entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.CalorimeterHitCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.CalorimeterHitCollection)
    return false;
#undef DO_
}

void CalorimeterHitCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.CalorimeterHitCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.CalorimeterHit entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.CalorimeterHitCollection)
}

::google::protobuf::uint8* CalorimeterHitCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.CalorimeterHitCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.CalorimeterHit entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.CalorimeterHitCollection)
    return target;
}

size_t CalorimeterHitCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.CalorimeterHitCollection)
    size_t total_size = 0;

    // repeated .eicio.model.CalorimeterHit entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CalorimeterHitCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.CalorimeterHitCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const CalorimeterHitCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const CalorimeterHitCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.CalorimeterHitCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.CalorimeterHitCollection)
        MergeFrom(*source);
    }
}

void CalorimeterHitCollection::MergeFrom(const CalorimeterHitCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.CalorimeterHitCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void CalorimeterHitCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.CalorimeterHitCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void CalorimeterHitCollection::CopyFrom(const CalorimeterHitCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.CalorimeterHitCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool CalorimeterHitCollection::IsInitialized() const { return true; }

void CalorimeterHitCollection::Swap(CalorimeterHitCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void CalorimeterHitCollection::InternalSwap(CalorimeterHitCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalorimeterHitCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalorimeterHitCollection

// uint32 id = 1;
void CalorimeterHitCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 CalorimeterHitCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHitCollection.id)
    return id_;
}
void CalorimeterHitCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHitCollection.id)
}

// uint32 flags = 2;
void CalorimeterHitCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 CalorimeterHitCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHitCollection.flags)
    return flags_;
}
void CalorimeterHitCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.CalorimeterHitCollection.flags)
}

// .eicio.model.Params params = 3;
bool CalorimeterHitCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void CalorimeterHitCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& CalorimeterHitCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHitCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* CalorimeterHitCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.CalorimeterHitCollection.params)
    return params_;
}
::eicio::model::Params* CalorimeterHitCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.CalorimeterHitCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void CalorimeterHitCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.CalorimeterHitCollection.params)
}

// repeated .eicio.model.CalorimeterHit entries = 4;
int CalorimeterHitCollection::entries_size() const { return entries_.size(); }
void CalorimeterHitCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::CalorimeterHit& CalorimeterHitCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.CalorimeterHitCollection.entries)
    return entries_.Get(index);
}
::eicio::model::CalorimeterHit* CalorimeterHitCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.CalorimeterHitCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::CalorimeterHit* CalorimeterHitCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.CalorimeterHitCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::CalorimeterHit>*
CalorimeterHitCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.CalorimeterHitCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::CalorimeterHit>&
CalorimeterHitCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.CalorimeterHitCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster::kIdFieldNumber;
const int Cluster::kTypeFieldNumber;
const int Cluster::kEnergyFieldNumber;
const int Cluster::kEnergyErrFieldNumber;
const int Cluster::kPosFieldNumber;
const int Cluster::kPosErrFieldNumber;
const int Cluster::kThetaFieldNumber;
const int Cluster::kPhiFieldNumber;
const int Cluster::kDirErrFieldNumber;
const int Cluster::kShapeFieldNumber;
const int Cluster::kPIDsFieldNumber;
const int Cluster::kClustersFieldNumber;
const int Cluster::kHitsFieldNumber;
const int Cluster::kWeightsFieldNumber;
const int Cluster::kSubDetEnesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster::Cluster() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.Cluster)
}
Cluster::Cluster(const Cluster& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pos_(from.pos_),
      poserr_(from.poserr_),
      direrr_(from.direrr_),
      shape_(from.shape_),
      pids_(from.pids_),
      clusters_(from.clusters_),
      hits_(from.hits_),
      weights_(from.weights_),
      subdetenes_(from.subdetenes_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&id_, &from.id_, reinterpret_cast<char*>(&phi_) - reinterpret_cast<char*>(&id_) + sizeof(phi_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.Cluster)
}

void Cluster::SharedCtor() {
    ::memset(&id_, 0, reinterpret_cast<char*>(&phi_) - reinterpret_cast<char*>(&id_) + sizeof(phi_));
    _cached_size_ = 0;
}

Cluster::~Cluster() {
    // @@protoc_insertion_point(destructor:eicio.model.Cluster)
    SharedDtor();
}

void Cluster::SharedDtor() {}

void Cluster::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cluster& Cluster::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

Cluster* Cluster::New(::google::protobuf::Arena* arena) const {
    Cluster* n = new Cluster;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Cluster::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.Cluster)
    pos_.Clear();
    poserr_.Clear();
    direrr_.Clear();
    shape_.Clear();
    pids_.Clear();
    clusters_.Clear();
    hits_.Clear();
    weights_.Clear();
    subdetenes_.Clear();
    ::memset(&id_, 0, reinterpret_cast<char*>(&phi_) - reinterpret_cast<char*>(&id_) + sizeof(phi_));
}

bool Cluster::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.Cluster)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 type = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &type_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float energy = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(29u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &energy_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float energyErr = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(37u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input,
                                                                                          &energyerr_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float pos = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_pos())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 42u, input, this->mutable_pos())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float posErr = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(50u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_poserr())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 50u, input, this->mutable_poserr())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float theta = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(61u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &theta_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float phi = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(69u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &phi_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float dirErr = 9;
            case 9: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(74u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_direrr())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(77u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 74u, input, this->mutable_direrr())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float shape = 10;
            case 10: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(82u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_shape())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(85u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 82u, input, this->mutable_shape())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.ParticleID PIDs = 11;
            case 11: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(90u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_pids()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference clusters = 12;
            case 12: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(98u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_clusters()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference hits = 13;
            case 13: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(106u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_hits()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float weights = 14;
            case 14: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(114u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_weights())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(117u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 114u, input, this->mutable_weights())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float subDetEnes = 15;
            case 15: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(122u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_subdetenes())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(125u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 122u, input, this->mutable_subdetenes())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.Cluster)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.Cluster)
    return false;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.Cluster)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 type = 2;
    if (this->type() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
    }

    // float energy = 3;
    if (this->energy() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->energy(), output);
    }

    // float energyErr = 4;
    if (this->energyerr() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->energyerr(), output);
    }

    // repeated float pos = 5;
    if (this->pos_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_pos_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->pos().data(), this->pos_size(),
                                                                      output);
    }

    // repeated float posErr = 6;
    if (this->poserr_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_poserr_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->poserr().data(),
                                                                      this->poserr_size(), output);
    }

    // float theta = 7;
    if (this->theta() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->theta(), output);
    }

    // float phi = 8;
    if (this->phi() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->phi(), output);
    }

    // repeated float dirErr = 9;
    if (this->direrr_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_direrr_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->direrr().data(),
                                                                      this->direrr_size(), output);
    }

    // repeated float shape = 10;
    if (this->shape_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_shape_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->shape().data(),
                                                                      this->shape_size(), output);
    }

    // repeated .eicio.model.ParticleID PIDs = 11;
    for (unsigned int i = 0, n = this->pids_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, this->pids(i), output);
    }

    // repeated .eicio.model.Reference clusters = 12;
    for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(12, this->clusters(i), output);
    }

    // repeated .eicio.model.Reference hits = 13;
    for (unsigned int i = 0, n = this->hits_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(13, this->hits(i), output);
    }

    // repeated float weights = 14;
    if (this->weights_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_weights_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->weights().data(),
                                                                      this->weights_size(), output);
    }

    // repeated float subDetEnes = 15;
    if (this->subdetenes_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_subdetenes_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->subdetenes().data(),
                                                                      this->subdetenes_size(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.Cluster)
}

::google::protobuf::uint8* Cluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.Cluster)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 type = 2;
    if (this->type() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
    }

    // float energy = 3;
    if (this->energy() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->energy(), target);
    }

    // float energyErr = 4;
    if (this->energyerr() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->energyerr(), target);
    }

    // repeated float pos = 5;
    if (this->pos_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_pos_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->pos_, target);
    }

    // repeated float posErr = 6;
    if (this->poserr_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_poserr_cached_byte_size_,
                                                                                 target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->poserr_, target);
    }

    // float theta = 7;
    if (this->theta() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->theta(), target);
    }

    // float phi = 8;
    if (this->phi() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->phi(), target);
    }

    // repeated float dirErr = 9;
    if (this->direrr_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_direrr_cached_byte_size_,
                                                                                 target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->direrr_, target);
    }

    // repeated float shape = 10;
    if (this->shape_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_shape_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->shape_, target);
    }

    // repeated .eicio.model.ParticleID PIDs = 11;
    for (unsigned int i = 0, n = this->pids_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            11, this->pids(i), deterministic, target);
    }

    // repeated .eicio.model.Reference clusters = 12;
    for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            12, this->clusters(i), deterministic, target);
    }

    // repeated .eicio.model.Reference hits = 13;
    for (unsigned int i = 0, n = this->hits_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            13, this->hits(i), deterministic, target);
    }

    // repeated float weights = 14;
    if (this->weights_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_weights_cached_byte_size_,
                                                                                 target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->weights_, target);
    }

    // repeated float subDetEnes = 15;
    if (this->subdetenes_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
            _subdetenes_cached_byte_size_, target);
        target =
            ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->subdetenes_, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.Cluster)
    return target;
}

size_t Cluster::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.Cluster)
    size_t total_size = 0;

    // repeated float pos = 5;
    {
        unsigned int count = this->pos_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _pos_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float posErr = 6;
    {
        unsigned int count = this->poserr_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _poserr_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float dirErr = 9;
    {
        unsigned int count = this->direrr_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _direrr_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float shape = 10;
    {
        unsigned int count = this->shape_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _shape_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated .eicio.model.ParticleID PIDs = 11;
    {
        unsigned int count = this->pids_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->pids(i));
        }
    }

    // repeated .eicio.model.Reference clusters = 12;
    {
        unsigned int count = this->clusters_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->clusters(i));
        }
    }

    // repeated .eicio.model.Reference hits = 13;
    {
        unsigned int count = this->hits_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->hits(i));
        }
    }

    // repeated float weights = 14;
    {
        unsigned int count = this->weights_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _weights_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float subDetEnes = 15;
    {
        unsigned int count = this->subdetenes_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _subdetenes_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 type = 2;
    if (this->type() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->type());
    }

    // float energy = 3;
    if (this->energy() != 0) {
        total_size += 1 + 4;
    }

    // float energyErr = 4;
    if (this->energyerr() != 0) {
        total_size += 1 + 4;
    }

    // float theta = 7;
    if (this->theta() != 0) {
        total_size += 1 + 4;
    }

    // float phi = 8;
    if (this->phi() != 0) {
        total_size += 1 + 4;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.Cluster)
    GOOGLE_DCHECK_NE(&from, this);
    const Cluster* source = ::google::protobuf::internal::DynamicCastToGenerated<const Cluster>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.Cluster)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.Cluster)
        MergeFrom(*source);
    }
}

void Cluster::MergeFrom(const Cluster& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.Cluster)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    pos_.MergeFrom(from.pos_);
    poserr_.MergeFrom(from.poserr_);
    direrr_.MergeFrom(from.direrr_);
    shape_.MergeFrom(from.shape_);
    pids_.MergeFrom(from.pids_);
    clusters_.MergeFrom(from.clusters_);
    hits_.MergeFrom(from.hits_);
    weights_.MergeFrom(from.weights_);
    subdetenes_.MergeFrom(from.subdetenes_);
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.type() != 0) {
        set_type(from.type());
    }
    if (from.energy() != 0) {
        set_energy(from.energy());
    }
    if (from.energyerr() != 0) {
        set_energyerr(from.energyerr());
    }
    if (from.theta() != 0) {
        set_theta(from.theta());
    }
    if (from.phi() != 0) {
        set_phi(from.phi());
    }
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.Cluster)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.Cluster)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Cluster::IsInitialized() const { return true; }

void Cluster::Swap(Cluster* other) {
    if (other == this) return;
    InternalSwap(other);
}
void Cluster::InternalSwap(Cluster* other) {
    pos_.InternalSwap(&other->pos_);
    poserr_.InternalSwap(&other->poserr_);
    direrr_.InternalSwap(&other->direrr_);
    shape_.InternalSwap(&other->shape_);
    pids_.InternalSwap(&other->pids_);
    clusters_.InternalSwap(&other->clusters_);
    hits_.InternalSwap(&other->hits_);
    weights_.InternalSwap(&other->weights_);
    subdetenes_.InternalSwap(&other->subdetenes_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(energy_, other->energy_);
    std::swap(energyerr_, other->energyerr_);
    std::swap(theta_, other->theta_);
    std::swap(phi_, other->phi_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster

// uint32 id = 1;
void Cluster::clear_id() { id_ = 0u; }
::google::protobuf::uint32 Cluster::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.id)
    return id_;
}
void Cluster::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.id)
}

// int32 type = 2;
void Cluster::clear_type() { type_ = 0; }
::google::protobuf::int32 Cluster::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.type)
    return type_;
}
void Cluster::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.type)
}

// float energy = 3;
void Cluster::clear_energy() { energy_ = 0; }
float Cluster::energy() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.energy)
    return energy_;
}
void Cluster::set_energy(float value) {
    energy_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.energy)
}

// float energyErr = 4;
void Cluster::clear_energyerr() { energyerr_ = 0; }
float Cluster::energyerr() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.energyErr)
    return energyerr_;
}
void Cluster::set_energyerr(float value) {
    energyerr_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.energyErr)
}

// repeated float pos = 5;
int Cluster::pos_size() const { return pos_.size(); }
void Cluster::clear_pos() { pos_.Clear(); }
float Cluster::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.pos)
    return pos_.Get(index);
}
void Cluster::set_pos(int index, float value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.pos)
}
void Cluster::add_pos(float value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.pos)
}
const ::google::protobuf::RepeatedField<float>& Cluster::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.pos)
    return pos_;
}
::google::protobuf::RepeatedField<float>* Cluster::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.pos)
    return &pos_;
}

// repeated float posErr = 6;
int Cluster::poserr_size() const { return poserr_.size(); }
void Cluster::clear_poserr() { poserr_.Clear(); }
float Cluster::poserr(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.posErr)
    return poserr_.Get(index);
}
void Cluster::set_poserr(int index, float value) {
    poserr_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.posErr)
}
void Cluster::add_poserr(float value) {
    poserr_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.posErr)
}
const ::google::protobuf::RepeatedField<float>& Cluster::poserr() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.posErr)
    return poserr_;
}
::google::protobuf::RepeatedField<float>* Cluster::mutable_poserr() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.posErr)
    return &poserr_;
}

// float theta = 7;
void Cluster::clear_theta() { theta_ = 0; }
float Cluster::theta() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.theta)
    return theta_;
}
void Cluster::set_theta(float value) {
    theta_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.theta)
}

// float phi = 8;
void Cluster::clear_phi() { phi_ = 0; }
float Cluster::phi() const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.phi)
    return phi_;
}
void Cluster::set_phi(float value) {
    phi_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.phi)
}

// repeated float dirErr = 9;
int Cluster::direrr_size() const { return direrr_.size(); }
void Cluster::clear_direrr() { direrr_.Clear(); }
float Cluster::direrr(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.dirErr)
    return direrr_.Get(index);
}
void Cluster::set_direrr(int index, float value) {
    direrr_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.dirErr)
}
void Cluster::add_direrr(float value) {
    direrr_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.dirErr)
}
const ::google::protobuf::RepeatedField<float>& Cluster::direrr() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.dirErr)
    return direrr_;
}
::google::protobuf::RepeatedField<float>* Cluster::mutable_direrr() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.dirErr)
    return &direrr_;
}

// repeated float shape = 10;
int Cluster::shape_size() const { return shape_.size(); }
void Cluster::clear_shape() { shape_.Clear(); }
float Cluster::shape(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.shape)
    return shape_.Get(index);
}
void Cluster::set_shape(int index, float value) {
    shape_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.shape)
}
void Cluster::add_shape(float value) {
    shape_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.shape)
}
const ::google::protobuf::RepeatedField<float>& Cluster::shape() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.shape)
    return shape_;
}
::google::protobuf::RepeatedField<float>* Cluster::mutable_shape() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.shape)
    return &shape_;
}

// repeated .eicio.model.ParticleID PIDs = 11;
int Cluster::pids_size() const { return pids_.size(); }
void Cluster::clear_pids() { pids_.Clear(); }
const ::eicio::model::ParticleID& Cluster::pids(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.PIDs)
    return pids_.Get(index);
}
::eicio::model::ParticleID* Cluster::mutable_pids(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Cluster.PIDs)
    return pids_.Mutable(index);
}
::eicio::model::ParticleID* Cluster::add_pids() {
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.PIDs)
    return pids_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>* Cluster::mutable_pids() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.PIDs)
    return &pids_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>& Cluster::pids() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.PIDs)
    return pids_;
}

// repeated .eicio.model.Reference clusters = 12;
int Cluster::clusters_size() const { return clusters_.size(); }
void Cluster::clear_clusters() { clusters_.Clear(); }
const ::eicio::model::Reference& Cluster::clusters(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.clusters)
    return clusters_.Get(index);
}
::eicio::model::Reference* Cluster::mutable_clusters(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Cluster.clusters)
    return clusters_.Mutable(index);
}
::eicio::model::Reference* Cluster::add_clusters() {
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.clusters)
    return clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* Cluster::mutable_clusters() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.clusters)
    return &clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& Cluster::clusters() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.clusters)
    return clusters_;
}

// repeated .eicio.model.Reference hits = 13;
int Cluster::hits_size() const { return hits_.size(); }
void Cluster::clear_hits() { hits_.Clear(); }
const ::eicio::model::Reference& Cluster::hits(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.hits)
    return hits_.Get(index);
}
::eicio::model::Reference* Cluster::mutable_hits(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.Cluster.hits)
    return hits_.Mutable(index);
}
::eicio::model::Reference* Cluster::add_hits() {
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.hits)
    return hits_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* Cluster::mutable_hits() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.hits)
    return &hits_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& Cluster::hits() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.hits)
    return hits_;
}

// repeated float weights = 14;
int Cluster::weights_size() const { return weights_.size(); }
void Cluster::clear_weights() { weights_.Clear(); }
float Cluster::weights(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.weights)
    return weights_.Get(index);
}
void Cluster::set_weights(int index, float value) {
    weights_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.weights)
}
void Cluster::add_weights(float value) {
    weights_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.weights)
}
const ::google::protobuf::RepeatedField<float>& Cluster::weights() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.weights)
    return weights_;
}
::google::protobuf::RepeatedField<float>* Cluster::mutable_weights() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.weights)
    return &weights_;
}

// repeated float subDetEnes = 15;
int Cluster::subdetenes_size() const { return subdetenes_.size(); }
void Cluster::clear_subdetenes() { subdetenes_.Clear(); }
float Cluster::subdetenes(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Cluster.subDetEnes)
    return subdetenes_.Get(index);
}
void Cluster::set_subdetenes(int index, float value) {
    subdetenes_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Cluster.subDetEnes)
}
void Cluster::add_subdetenes(float value) {
    subdetenes_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Cluster.subDetEnes)
}
const ::google::protobuf::RepeatedField<float>& Cluster::subdetenes() const {
    // @@protoc_insertion_point(field_list:eicio.model.Cluster.subDetEnes)
    return subdetenes_;
}
::google::protobuf::RepeatedField<float>* Cluster::mutable_subdetenes() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Cluster.subDetEnes)
    return &subdetenes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterCollection::kIdFieldNumber;
const int ClusterCollection::kFlagsFieldNumber;
const int ClusterCollection::kParamsFieldNumber;
const int ClusterCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterCollection::ClusterCollection() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.ClusterCollection)
}
ClusterCollection::ClusterCollection(const ClusterCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.ClusterCollection)
}

void ClusterCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

ClusterCollection::~ClusterCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.ClusterCollection)
    SharedDtor();
}

void ClusterCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void ClusterCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterCollection& ClusterCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

ClusterCollection* ClusterCollection::New(::google::protobuf::Arena* arena) const {
    ClusterCollection* n = new ClusterCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ClusterCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.ClusterCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool ClusterCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.ClusterCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Cluster entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.ClusterCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.ClusterCollection)
    return false;
#undef DO_
}

void ClusterCollection::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.ClusterCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.Cluster entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.ClusterCollection)
}

::google::protobuf::uint8* ClusterCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.ClusterCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.Cluster entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.ClusterCollection)
    return target;
}

size_t ClusterCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.ClusterCollection)
    size_t total_size = 0;

    // repeated .eicio.model.Cluster entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ClusterCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.ClusterCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const ClusterCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const ClusterCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.ClusterCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.ClusterCollection)
        MergeFrom(*source);
    }
}

void ClusterCollection::MergeFrom(const ClusterCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.ClusterCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void ClusterCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.ClusterCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void ClusterCollection::CopyFrom(const ClusterCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.ClusterCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ClusterCollection::IsInitialized() const { return true; }

void ClusterCollection::Swap(ClusterCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void ClusterCollection::InternalSwap(ClusterCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterCollection

// uint32 id = 1;
void ClusterCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 ClusterCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.ClusterCollection.id)
    return id_;
}
void ClusterCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ClusterCollection.id)
}

// uint32 flags = 2;
void ClusterCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 ClusterCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.ClusterCollection.flags)
    return flags_;
}
void ClusterCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.ClusterCollection.flags)
}

// .eicio.model.Params params = 3;
bool ClusterCollection::has_params() const { return this != internal_default_instance() && params_ != NULL; }
void ClusterCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& ClusterCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.ClusterCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* ClusterCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.ClusterCollection.params)
    return params_;
}
::eicio::model::Params* ClusterCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.ClusterCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void ClusterCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.ClusterCollection.params)
}

// repeated .eicio.model.Cluster entries = 4;
int ClusterCollection::entries_size() const { return entries_.size(); }
void ClusterCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::Cluster& ClusterCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.ClusterCollection.entries)
    return entries_.Get(index);
}
::eicio::model::Cluster* ClusterCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.ClusterCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::Cluster* ClusterCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.ClusterCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Cluster>* ClusterCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.ClusterCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Cluster>& ClusterCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.ClusterCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecParticle::kIdFieldNumber;
const int RecParticle::kTypeFieldNumber;
const int RecParticle::kPFieldNumber;
const int RecParticle::kEnergyFieldNumber;
const int RecParticle::kCovFieldNumber;
const int RecParticle::kMassFieldNumber;
const int RecParticle::kChargeFieldNumber;
const int RecParticle::kRefFieldNumber;
const int RecParticle::kPIDsFieldNumber;
const int RecParticle::kPIDUsedFieldNumber;
const int RecParticle::kGoodnessOfPIDFieldNumber;
const int RecParticle::kRecsFieldNumber;
const int RecParticle::kTracksFieldNumber;
const int RecParticle::kClustersFieldNumber;
const int RecParticle::kStartVtxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecParticle::RecParticle() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.RecParticle)
}
RecParticle::RecParticle(const RecParticle& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      p_(from.p_),
      cov_(from.cov_),
      ref_(from.ref_),
      pids_(from.pids_),
      recs_(from.recs_),
      tracks_(from.tracks_),
      clusters_(from.clusters_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_startvtx()) {
        startvtx_ = new ::eicio::model::Reference(*from.startvtx_);
    } else {
        startvtx_ = NULL;
    }
    ::memcpy(
        &id_, &from.id_,
        reinterpret_cast<char*>(&goodnessofpid_) - reinterpret_cast<char*>(&id_) + sizeof(goodnessofpid_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.RecParticle)
}

void RecParticle::SharedCtor() {
    ::memset(&startvtx_, 0,
             reinterpret_cast<char*>(&goodnessofpid_) - reinterpret_cast<char*>(&startvtx_) +
                 sizeof(goodnessofpid_));
    _cached_size_ = 0;
}

RecParticle::~RecParticle() {
    // @@protoc_insertion_point(destructor:eicio.model.RecParticle)
    SharedDtor();
}

void RecParticle::SharedDtor() {
    if (this != internal_default_instance()) {
        delete startvtx_;
    }
}

void RecParticle::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecParticle::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecParticle& RecParticle::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

RecParticle* RecParticle::New(::google::protobuf::Arena* arena) const {
    RecParticle* n = new RecParticle;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void RecParticle::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.RecParticle)
    p_.Clear();
    cov_.Clear();
    ref_.Clear();
    pids_.Clear();
    recs_.Clear();
    tracks_.Clear();
    clusters_.Clear();
    if (GetArenaNoVirtual() == NULL && startvtx_ != NULL) {
        delete startvtx_;
    }
    startvtx_ = NULL;
    ::memset(
        &id_, 0,
        reinterpret_cast<char*>(&goodnessofpid_) - reinterpret_cast<char*>(&id_) + sizeof(goodnessofpid_));
}

bool RecParticle::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.RecParticle)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 type = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &type_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float p = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_p())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(29u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 26u, input, this->mutable_p())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float energy = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(37u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &energy_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float cov = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_cov())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 42u, input, this->mutable_cov())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float mass = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &mass_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float charge = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(61u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &charge_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float ref = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(66u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_ref())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(69u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 66u, input, this->mutable_ref())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.ParticleID PIDs = 9;
            case 9: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(74u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_pids()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 PIDUsed = 10;
            case 10: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(80u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &pidused_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float goodnessOfPID = 11;
            case 11: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(93u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input,
                                                                                          &goodnessofpid_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference recs = 12;
            case 12: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(98u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_recs()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference tracks = 13;
            case 13: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(106u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_tracks()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Reference clusters = 14;
            case 14: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(114u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_clusters()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Reference startVtx = 15;
            case 15: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(122u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_startvtx()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.RecParticle)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.RecParticle)
    return false;
#undef DO_
}

void RecParticle::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.RecParticle)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 type = 2;
    if (this->type() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
    }

    // repeated float p = 3;
    if (this->p_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_p_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->p().data(), this->p_size(),
                                                                      output);
    }

    // float energy = 4;
    if (this->energy() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->energy(), output);
    }

    // repeated float cov = 5;
    if (this->cov_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_cov_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->cov().data(), this->cov_size(),
                                                                      output);
    }

    // float mass = 6;
    if (this->mass() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->mass(), output);
    }

    // float charge = 7;
    if (this->charge() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->charge(), output);
    }

    // repeated float ref = 8;
    if (this->ref_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_ref_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->ref().data(), this->ref_size(),
                                                                      output);
    }

    // repeated .eicio.model.ParticleID PIDs = 9;
    for (unsigned int i = 0, n = this->pids_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(9, this->pids(i), output);
    }

    // int32 PIDUsed = 10;
    if (this->pidused() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pidused(), output);
    }

    // float goodnessOfPID = 11;
    if (this->goodnessofpid() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->goodnessofpid(), output);
    }

    // repeated .eicio.model.Reference recs = 12;
    for (unsigned int i = 0, n = this->recs_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(12, this->recs(i), output);
    }

    // repeated .eicio.model.Reference tracks = 13;
    for (unsigned int i = 0, n = this->tracks_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(13, this->tracks(i), output);
    }

    // repeated .eicio.model.Reference clusters = 14;
    for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(14, this->clusters(i), output);
    }

    // .eicio.model.Reference startVtx = 15;
    if (this->has_startvtx()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(15, *this->startvtx_, output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.RecParticle)
}

::google::protobuf::uint8* RecParticle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.RecParticle)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 type = 2;
    if (this->type() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
    }

    // repeated float p = 3;
    if (this->p_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_p_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->p_, target);
    }

    // float energy = 4;
    if (this->energy() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->energy(), target);
    }

    // repeated float cov = 5;
    if (this->cov_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_cov_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->cov_, target);
    }

    // float mass = 6;
    if (this->mass() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->mass(), target);
    }

    // float charge = 7;
    if (this->charge() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->charge(), target);
    }

    // repeated float ref = 8;
    if (this->ref_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_ref_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->ref_, target);
    }

    // repeated .eicio.model.ParticleID PIDs = 9;
    for (unsigned int i = 0, n = this->pids_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            9, this->pids(i), deterministic, target);
    }

    // int32 PIDUsed = 10;
    if (this->pidused() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pidused(), target);
    }

    // float goodnessOfPID = 11;
    if (this->goodnessofpid() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->goodnessofpid(),
                                                                                 target);
    }

    // repeated .eicio.model.Reference recs = 12;
    for (unsigned int i = 0, n = this->recs_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            12, this->recs(i), deterministic, target);
    }

    // repeated .eicio.model.Reference tracks = 13;
    for (unsigned int i = 0, n = this->tracks_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            13, this->tracks(i), deterministic, target);
    }

    // repeated .eicio.model.Reference clusters = 14;
    for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            14, this->clusters(i), deterministic, target);
    }

    // .eicio.model.Reference startVtx = 15;
    if (this->has_startvtx()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            15, *this->startvtx_, deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.RecParticle)
    return target;
}

size_t RecParticle::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.RecParticle)
    size_t total_size = 0;

    // repeated float p = 3;
    {
        unsigned int count = this->p_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _p_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float cov = 5;
    {
        unsigned int count = this->cov_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cov_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float ref = 8;
    {
        unsigned int count = this->ref_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _ref_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated .eicio.model.ParticleID PIDs = 9;
    {
        unsigned int count = this->pids_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->pids(i));
        }
    }

    // repeated .eicio.model.Reference recs = 12;
    {
        unsigned int count = this->recs_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->recs(i));
        }
    }

    // repeated .eicio.model.Reference tracks = 13;
    {
        unsigned int count = this->tracks_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->tracks(i));
        }
    }

    // repeated .eicio.model.Reference clusters = 14;
    {
        unsigned int count = this->clusters_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->clusters(i));
        }
    }

    // .eicio.model.Reference startVtx = 15;
    if (this->has_startvtx()) {
        total_size +=
            1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->startvtx_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 type = 2;
    if (this->type() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->type());
    }

    // float energy = 4;
    if (this->energy() != 0) {
        total_size += 1 + 4;
    }

    // float mass = 6;
    if (this->mass() != 0) {
        total_size += 1 + 4;
    }

    // float charge = 7;
    if (this->charge() != 0) {
        total_size += 1 + 4;
    }

    // int32 PIDUsed = 10;
    if (this->pidused() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->pidused());
    }

    // float goodnessOfPID = 11;
    if (this->goodnessofpid() != 0) {
        total_size += 1 + 4;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void RecParticle::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.RecParticle)
    GOOGLE_DCHECK_NE(&from, this);
    const RecParticle* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const RecParticle>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.RecParticle)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.RecParticle)
        MergeFrom(*source);
    }
}

void RecParticle::MergeFrom(const RecParticle& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.RecParticle)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    p_.MergeFrom(from.p_);
    cov_.MergeFrom(from.cov_);
    ref_.MergeFrom(from.ref_);
    pids_.MergeFrom(from.pids_);
    recs_.MergeFrom(from.recs_);
    tracks_.MergeFrom(from.tracks_);
    clusters_.MergeFrom(from.clusters_);
    if (from.has_startvtx()) {
        mutable_startvtx()->::eicio::model::Reference::MergeFrom(from.startvtx());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.type() != 0) {
        set_type(from.type());
    }
    if (from.energy() != 0) {
        set_energy(from.energy());
    }
    if (from.mass() != 0) {
        set_mass(from.mass());
    }
    if (from.charge() != 0) {
        set_charge(from.charge());
    }
    if (from.pidused() != 0) {
        set_pidused(from.pidused());
    }
    if (from.goodnessofpid() != 0) {
        set_goodnessofpid(from.goodnessofpid());
    }
}

void RecParticle::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.RecParticle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void RecParticle::CopyFrom(const RecParticle& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.RecParticle)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool RecParticle::IsInitialized() const { return true; }

void RecParticle::Swap(RecParticle* other) {
    if (other == this) return;
    InternalSwap(other);
}
void RecParticle::InternalSwap(RecParticle* other) {
    p_.InternalSwap(&other->p_);
    cov_.InternalSwap(&other->cov_);
    ref_.InternalSwap(&other->ref_);
    pids_.InternalSwap(&other->pids_);
    recs_.InternalSwap(&other->recs_);
    tracks_.InternalSwap(&other->tracks_);
    clusters_.InternalSwap(&other->clusters_);
    std::swap(startvtx_, other->startvtx_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(energy_, other->energy_);
    std::swap(mass_, other->mass_);
    std::swap(charge_, other->charge_);
    std::swap(pidused_, other->pidused_);
    std::swap(goodnessofpid_, other->goodnessofpid_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecParticle::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecParticle

// uint32 id = 1;
void RecParticle::clear_id() { id_ = 0u; }
::google::protobuf::uint32 RecParticle::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.id)
    return id_;
}
void RecParticle::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.id)
}

// int32 type = 2;
void RecParticle::clear_type() { type_ = 0; }
::google::protobuf::int32 RecParticle::type() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.type)
    return type_;
}
void RecParticle::set_type(::google::protobuf::int32 value) {
    type_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.type)
}

// repeated float p = 3;
int RecParticle::p_size() const { return p_.size(); }
void RecParticle::clear_p() { p_.Clear(); }
float RecParticle::p(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.p)
    return p_.Get(index);
}
void RecParticle::set_p(int index, float value) {
    p_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.p)
}
void RecParticle::add_p(float value) {
    p_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.p)
}
const ::google::protobuf::RepeatedField<float>& RecParticle::p() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.p)
    return p_;
}
::google::protobuf::RepeatedField<float>* RecParticle::mutable_p() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.p)
    return &p_;
}

// float energy = 4;
void RecParticle::clear_energy() { energy_ = 0; }
float RecParticle::energy() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.energy)
    return energy_;
}
void RecParticle::set_energy(float value) {
    energy_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.energy)
}

// repeated float cov = 5;
int RecParticle::cov_size() const { return cov_.size(); }
void RecParticle::clear_cov() { cov_.Clear(); }
float RecParticle::cov(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.cov)
    return cov_.Get(index);
}
void RecParticle::set_cov(int index, float value) {
    cov_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.cov)
}
void RecParticle::add_cov(float value) {
    cov_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.cov)
}
const ::google::protobuf::RepeatedField<float>& RecParticle::cov() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.cov)
    return cov_;
}
::google::protobuf::RepeatedField<float>* RecParticle::mutable_cov() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.cov)
    return &cov_;
}

// float mass = 6;
void RecParticle::clear_mass() { mass_ = 0; }
float RecParticle::mass() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.mass)
    return mass_;
}
void RecParticle::set_mass(float value) {
    mass_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.mass)
}

// float charge = 7;
void RecParticle::clear_charge() { charge_ = 0; }
float RecParticle::charge() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.charge)
    return charge_;
}
void RecParticle::set_charge(float value) {
    charge_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.charge)
}

// repeated float ref = 8;
int RecParticle::ref_size() const { return ref_.size(); }
void RecParticle::clear_ref() { ref_.Clear(); }
float RecParticle::ref(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.ref)
    return ref_.Get(index);
}
void RecParticle::set_ref(int index, float value) {
    ref_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.ref)
}
void RecParticle::add_ref(float value) {
    ref_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.ref)
}
const ::google::protobuf::RepeatedField<float>& RecParticle::ref() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.ref)
    return ref_;
}
::google::protobuf::RepeatedField<float>* RecParticle::mutable_ref() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.ref)
    return &ref_;
}

// repeated .eicio.model.ParticleID PIDs = 9;
int RecParticle::pids_size() const { return pids_.size(); }
void RecParticle::clear_pids() { pids_.Clear(); }
const ::eicio::model::ParticleID& RecParticle::pids(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.PIDs)
    return pids_.Get(index);
}
::eicio::model::ParticleID* RecParticle::mutable_pids(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticle.PIDs)
    return pids_.Mutable(index);
}
::eicio::model::ParticleID* RecParticle::add_pids() {
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.PIDs)
    return pids_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>* RecParticle::mutable_pids() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.PIDs)
    return &pids_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::ParticleID>& RecParticle::pids() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.PIDs)
    return pids_;
}

// int32 PIDUsed = 10;
void RecParticle::clear_pidused() { pidused_ = 0; }
::google::protobuf::int32 RecParticle::pidused() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.PIDUsed)
    return pidused_;
}
void RecParticle::set_pidused(::google::protobuf::int32 value) {
    pidused_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.PIDUsed)
}

// float goodnessOfPID = 11;
void RecParticle::clear_goodnessofpid() { goodnessofpid_ = 0; }
float RecParticle::goodnessofpid() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.goodnessOfPID)
    return goodnessofpid_;
}
void RecParticle::set_goodnessofpid(float value) {
    goodnessofpid_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticle.goodnessOfPID)
}

// repeated .eicio.model.Reference recs = 12;
int RecParticle::recs_size() const { return recs_.size(); }
void RecParticle::clear_recs() { recs_.Clear(); }
const ::eicio::model::Reference& RecParticle::recs(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.recs)
    return recs_.Get(index);
}
::eicio::model::Reference* RecParticle::mutable_recs(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticle.recs)
    return recs_.Mutable(index);
}
::eicio::model::Reference* RecParticle::add_recs() {
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.recs)
    return recs_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* RecParticle::mutable_recs() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.recs)
    return &recs_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& RecParticle::recs() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.recs)
    return recs_;
}

// repeated .eicio.model.Reference tracks = 13;
int RecParticle::tracks_size() const { return tracks_.size(); }
void RecParticle::clear_tracks() { tracks_.Clear(); }
const ::eicio::model::Reference& RecParticle::tracks(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.tracks)
    return tracks_.Get(index);
}
::eicio::model::Reference* RecParticle::mutable_tracks(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticle.tracks)
    return tracks_.Mutable(index);
}
::eicio::model::Reference* RecParticle::add_tracks() {
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.tracks)
    return tracks_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* RecParticle::mutable_tracks() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.tracks)
    return &tracks_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& RecParticle::tracks() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.tracks)
    return tracks_;
}

// repeated .eicio.model.Reference clusters = 14;
int RecParticle::clusters_size() const { return clusters_.size(); }
void RecParticle::clear_clusters() { clusters_.Clear(); }
const ::eicio::model::Reference& RecParticle::clusters(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.clusters)
    return clusters_.Get(index);
}
::eicio::model::Reference* RecParticle::mutable_clusters(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticle.clusters)
    return clusters_.Mutable(index);
}
::eicio::model::Reference* RecParticle::add_clusters() {
    // @@protoc_insertion_point(field_add:eicio.model.RecParticle.clusters)
    return clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>* RecParticle::mutable_clusters() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticle.clusters)
    return &clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Reference>& RecParticle::clusters() const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticle.clusters)
    return clusters_;
}

// .eicio.model.Reference startVtx = 15;
bool RecParticle::has_startvtx() const { return this != internal_default_instance() && startvtx_ != NULL; }
void RecParticle::clear_startvtx() {
    if (GetArenaNoVirtual() == NULL && startvtx_ != NULL) delete startvtx_;
    startvtx_ = NULL;
}
const ::eicio::model::Reference& RecParticle::startvtx() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticle.startVtx)
    return startvtx_ != NULL ? *startvtx_ : *::eicio::model::Reference::internal_default_instance();
}
::eicio::model::Reference* RecParticle::mutable_startvtx() {
    if (startvtx_ == NULL) {
        startvtx_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticle.startVtx)
    return startvtx_;
}
::eicio::model::Reference* RecParticle::release_startvtx() {
    // @@protoc_insertion_point(field_release:eicio.model.RecParticle.startVtx)

    ::eicio::model::Reference* temp = startvtx_;
    startvtx_ = NULL;
    return temp;
}
void RecParticle::set_allocated_startvtx(::eicio::model::Reference* startvtx) {
    delete startvtx_;
    startvtx_ = startvtx;
    if (startvtx) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.RecParticle.startVtx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecParticleCollection::kIdFieldNumber;
const int RecParticleCollection::kFlagsFieldNumber;
const int RecParticleCollection::kParamsFieldNumber;
const int RecParticleCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecParticleCollection::RecParticleCollection() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.RecParticleCollection)
}
RecParticleCollection::RecParticleCollection(const RecParticleCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.RecParticleCollection)
}

void RecParticleCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

RecParticleCollection::~RecParticleCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.RecParticleCollection)
    SharedDtor();
}

void RecParticleCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void RecParticleCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecParticleCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecParticleCollection& RecParticleCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

RecParticleCollection* RecParticleCollection::New(::google::protobuf::Arena* arena) const {
    RecParticleCollection* n = new RecParticleCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void RecParticleCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.RecParticleCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool RecParticleCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.RecParticleCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.RecParticle entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.RecParticleCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.RecParticleCollection)
    return false;
#undef DO_
}

void RecParticleCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.RecParticleCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.RecParticle entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.RecParticleCollection)
}

::google::protobuf::uint8* RecParticleCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.RecParticleCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.RecParticle entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.RecParticleCollection)
    return target;
}

size_t RecParticleCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.RecParticleCollection)
    size_t total_size = 0;

    // repeated .eicio.model.RecParticle entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void RecParticleCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.RecParticleCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const RecParticleCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const RecParticleCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.RecParticleCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.RecParticleCollection)
        MergeFrom(*source);
    }
}

void RecParticleCollection::MergeFrom(const RecParticleCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.RecParticleCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void RecParticleCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.RecParticleCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void RecParticleCollection::CopyFrom(const RecParticleCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.RecParticleCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool RecParticleCollection::IsInitialized() const { return true; }

void RecParticleCollection::Swap(RecParticleCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void RecParticleCollection::InternalSwap(RecParticleCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecParticleCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecParticleCollection

// uint32 id = 1;
void RecParticleCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 RecParticleCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticleCollection.id)
    return id_;
}
void RecParticleCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticleCollection.id)
}

// uint32 flags = 2;
void RecParticleCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 RecParticleCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticleCollection.flags)
    return flags_;
}
void RecParticleCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RecParticleCollection.flags)
}

// .eicio.model.Params params = 3;
bool RecParticleCollection::has_params() const {
    return this != internal_default_instance() && params_ != NULL;
}
void RecParticleCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& RecParticleCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticleCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* RecParticleCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticleCollection.params)
    return params_;
}
::eicio::model::Params* RecParticleCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.RecParticleCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void RecParticleCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.RecParticleCollection.params)
}

// repeated .eicio.model.RecParticle entries = 4;
int RecParticleCollection::entries_size() const { return entries_.size(); }
void RecParticleCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::RecParticle& RecParticleCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RecParticleCollection.entries)
    return entries_.Get(index);
}
::eicio::model::RecParticle* RecParticleCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RecParticleCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::RecParticle* RecParticleCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.RecParticleCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::RecParticle>* RecParticleCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RecParticleCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::RecParticle>& RecParticleCollection::entries()
    const {
    // @@protoc_insertion_point(field_list:eicio.model.RecParticleCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vertex::kIdFieldNumber;
const int Vertex::kPrimaryFieldNumber;
const int Vertex::kAlgTypeFieldNumber;
const int Vertex::kChi2FieldNumber;
const int Vertex::kProbFieldNumber;
const int Vertex::kPosFieldNumber;
const int Vertex::kCovFieldNumber;
const int Vertex::kParamsFieldNumber;
const int Vertex::kRecPartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vertex::Vertex() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.Vertex)
}
Vertex::Vertex(const Vertex& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pos_(from.pos_),
      cov_(from.cov_),
      params_(from.params_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_recpart()) {
        recpart_ = new ::eicio::model::Reference(*from.recpart_);
    } else {
        recpart_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&prob_) - reinterpret_cast<char*>(&id_) + sizeof(prob_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.Vertex)
}

void Vertex::SharedCtor() {
    ::memset(&recpart_, 0,
             reinterpret_cast<char*>(&prob_) - reinterpret_cast<char*>(&recpart_) + sizeof(prob_));
    _cached_size_ = 0;
}

Vertex::~Vertex() {
    // @@protoc_insertion_point(destructor:eicio.model.Vertex)
    SharedDtor();
}

void Vertex::SharedDtor() {
    if (this != internal_default_instance()) {
        delete recpart_;
    }
}

void Vertex::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vertex::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vertex& Vertex::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

Vertex* Vertex::New(::google::protobuf::Arena* arena) const {
    Vertex* n = new Vertex;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Vertex::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.Vertex)
    pos_.Clear();
    cov_.Clear();
    params_.Clear();
    if (GetArenaNoVirtual() == NULL && recpart_ != NULL) {
        delete recpart_;
    }
    recpart_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&prob_) - reinterpret_cast<char*>(&id_) + sizeof(prob_));
}

bool Vertex::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.Vertex)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 primary = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &primary_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 algType = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &algtype_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float chi2 = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(37u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &chi2_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float prob = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(45u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &prob_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float pos = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(50u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_pos())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(53u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 50u, input, this->mutable_pos())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float cov = 7;
            case 7: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(58u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_cov())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(61u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 58u, input, this->mutable_cov())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated float params = 8;
            case 8: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(66u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_params())));
                } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                           static_cast< ::google::protobuf::uint8>(69u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 66u, input, this->mutable_params())));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Reference recPart = 9;
            case 9: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(74u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_recpart()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.Vertex)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.Vertex)
    return false;
#undef DO_
}

void Vertex::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.Vertex)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // int32 primary = 2;
    if (this->primary() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->primary(), output);
    }

    // int32 algType = 3;
    if (this->algtype() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->algtype(), output);
    }

    // float chi2 = 4;
    if (this->chi2() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->chi2(), output);
    }

    // float prob = 5;
    if (this->prob() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->prob(), output);
    }

    // repeated float pos = 6;
    if (this->pos_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_pos_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->pos().data(), this->pos_size(),
                                                                      output);
    }

    // repeated float cov = 7;
    if (this->cov_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_cov_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->cov().data(), this->cov_size(),
                                                                      output);
    }

    // repeated float params = 8;
    if (this->params_size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(_params_cached_byte_size_);
        ::google::protobuf::internal::WireFormatLite::WriteFloatArray(this->params().data(),
                                                                      this->params_size(), output);
    }

    // .eicio.model.Reference recPart = 9;
    if (this->has_recpart()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(9, *this->recpart_, output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.Vertex)
}

::google::protobuf::uint8* Vertex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.Vertex)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // int32 primary = 2;
    if (this->primary() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->primary(), target);
    }

    // int32 algType = 3;
    if (this->algtype() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->algtype(), target);
    }

    // float chi2 = 4;
    if (this->chi2() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->chi2(), target);
    }

    // float prob = 5;
    if (this->prob() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->prob(), target);
    }

    // repeated float pos = 6;
    if (this->pos_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_pos_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->pos_, target);
    }

    // repeated float cov = 7;
    if (this->cov_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target =
            ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_cov_cached_byte_size_, target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->cov_, target);
    }

    // repeated float params = 8;
    if (this->params_size() > 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(_params_cached_byte_size_,
                                                                                 target);
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatNoTagToArray(this->params_, target);
    }

    // .eicio.model.Reference recPart = 9;
    if (this->has_recpart()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            9, *this->recpart_, deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.Vertex)
    return target;
}

size_t Vertex::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.Vertex)
    size_t total_size = 0;

    // repeated float pos = 6;
    {
        unsigned int count = this->pos_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _pos_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float cov = 7;
    {
        unsigned int count = this->cov_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cov_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated float params = 8;
    {
        unsigned int count = this->params_size();
        size_t data_size = 4UL * count;
        if (data_size > 0) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _params_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // .eicio.model.Reference recPart = 9;
    if (this->has_recpart()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->recpart_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // int32 primary = 2;
    if (this->primary() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->primary());
    }

    // int32 algType = 3;
    if (this->algtype() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->algtype());
    }

    // float chi2 = 4;
    if (this->chi2() != 0) {
        total_size += 1 + 4;
    }

    // float prob = 5;
    if (this->prob() != 0) {
        total_size += 1 + 4;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Vertex::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.Vertex)
    GOOGLE_DCHECK_NE(&from, this);
    const Vertex* source = ::google::protobuf::internal::DynamicCastToGenerated<const Vertex>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.Vertex)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.Vertex)
        MergeFrom(*source);
    }
}

void Vertex::MergeFrom(const Vertex& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.Vertex)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    pos_.MergeFrom(from.pos_);
    cov_.MergeFrom(from.cov_);
    params_.MergeFrom(from.params_);
    if (from.has_recpart()) {
        mutable_recpart()->::eicio::model::Reference::MergeFrom(from.recpart());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.primary() != 0) {
        set_primary(from.primary());
    }
    if (from.algtype() != 0) {
        set_algtype(from.algtype());
    }
    if (from.chi2() != 0) {
        set_chi2(from.chi2());
    }
    if (from.prob() != 0) {
        set_prob(from.prob());
    }
}

void Vertex::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.Vertex)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Vertex::CopyFrom(const Vertex& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.Vertex)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Vertex::IsInitialized() const { return true; }

void Vertex::Swap(Vertex* other) {
    if (other == this) return;
    InternalSwap(other);
}
void Vertex::InternalSwap(Vertex* other) {
    pos_.InternalSwap(&other->pos_);
    cov_.InternalSwap(&other->cov_);
    params_.InternalSwap(&other->params_);
    std::swap(recpart_, other->recpart_);
    std::swap(id_, other->id_);
    std::swap(primary_, other->primary_);
    std::swap(algtype_, other->algtype_);
    std::swap(chi2_, other->chi2_);
    std::swap(prob_, other->prob_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vertex::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vertex

// uint32 id = 1;
void Vertex::clear_id() { id_ = 0u; }
::google::protobuf::uint32 Vertex::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.id)
    return id_;
}
void Vertex::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.id)
}

// int32 primary = 2;
void Vertex::clear_primary() { primary_ = 0; }
::google::protobuf::int32 Vertex::primary() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.primary)
    return primary_;
}
void Vertex::set_primary(::google::protobuf::int32 value) {
    primary_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.primary)
}

// int32 algType = 3;
void Vertex::clear_algtype() { algtype_ = 0; }
::google::protobuf::int32 Vertex::algtype() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.algType)
    return algtype_;
}
void Vertex::set_algtype(::google::protobuf::int32 value) {
    algtype_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.algType)
}

// float chi2 = 4;
void Vertex::clear_chi2() { chi2_ = 0; }
float Vertex::chi2() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.chi2)
    return chi2_;
}
void Vertex::set_chi2(float value) {
    chi2_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.chi2)
}

// float prob = 5;
void Vertex::clear_prob() { prob_ = 0; }
float Vertex::prob() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.prob)
    return prob_;
}
void Vertex::set_prob(float value) {
    prob_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.prob)
}

// repeated float pos = 6;
int Vertex::pos_size() const { return pos_.size(); }
void Vertex::clear_pos() { pos_.Clear(); }
float Vertex::pos(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.pos)
    return pos_.Get(index);
}
void Vertex::set_pos(int index, float value) {
    pos_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.pos)
}
void Vertex::add_pos(float value) {
    pos_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Vertex.pos)
}
const ::google::protobuf::RepeatedField<float>& Vertex::pos() const {
    // @@protoc_insertion_point(field_list:eicio.model.Vertex.pos)
    return pos_;
}
::google::protobuf::RepeatedField<float>* Vertex::mutable_pos() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Vertex.pos)
    return &pos_;
}

// repeated float cov = 7;
int Vertex::cov_size() const { return cov_.size(); }
void Vertex::clear_cov() { cov_.Clear(); }
float Vertex::cov(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.cov)
    return cov_.Get(index);
}
void Vertex::set_cov(int index, float value) {
    cov_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.cov)
}
void Vertex::add_cov(float value) {
    cov_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Vertex.cov)
}
const ::google::protobuf::RepeatedField<float>& Vertex::cov() const {
    // @@protoc_insertion_point(field_list:eicio.model.Vertex.cov)
    return cov_;
}
::google::protobuf::RepeatedField<float>* Vertex::mutable_cov() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Vertex.cov)
    return &cov_;
}

// repeated float params = 8;
int Vertex::params_size() const { return params_.size(); }
void Vertex::clear_params() { params_.Clear(); }
float Vertex::params(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.params)
    return params_.Get(index);
}
void Vertex::set_params(int index, float value) {
    params_.Set(index, value);
    // @@protoc_insertion_point(field_set:eicio.model.Vertex.params)
}
void Vertex::add_params(float value) {
    params_.Add(value);
    // @@protoc_insertion_point(field_add:eicio.model.Vertex.params)
}
const ::google::protobuf::RepeatedField<float>& Vertex::params() const {
    // @@protoc_insertion_point(field_list:eicio.model.Vertex.params)
    return params_;
}
::google::protobuf::RepeatedField<float>* Vertex::mutable_params() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.Vertex.params)
    return &params_;
}

// .eicio.model.Reference recPart = 9;
bool Vertex::has_recpart() const { return this != internal_default_instance() && recpart_ != NULL; }
void Vertex::clear_recpart() {
    if (GetArenaNoVirtual() == NULL && recpart_ != NULL) delete recpart_;
    recpart_ = NULL;
}
const ::eicio::model::Reference& Vertex::recpart() const {
    // @@protoc_insertion_point(field_get:eicio.model.Vertex.recPart)
    return recpart_ != NULL ? *recpart_ : *::eicio::model::Reference::internal_default_instance();
}
::eicio::model::Reference* Vertex::mutable_recpart() {
    if (recpart_ == NULL) {
        recpart_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.Vertex.recPart)
    return recpart_;
}
::eicio::model::Reference* Vertex::release_recpart() {
    // @@protoc_insertion_point(field_release:eicio.model.Vertex.recPart)

    ::eicio::model::Reference* temp = recpart_;
    recpart_ = NULL;
    return temp;
}
void Vertex::set_allocated_recpart(::eicio::model::Reference* recpart) {
    delete recpart_;
    recpart_ = recpart;
    if (recpart) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.Vertex.recPart)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VertexCollection::kIdFieldNumber;
const int VertexCollection::kFlagsFieldNumber;
const int VertexCollection::kParamsFieldNumber;
const int VertexCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VertexCollection::VertexCollection() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.VertexCollection)
}
VertexCollection::VertexCollection(const VertexCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.VertexCollection)
}

void VertexCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

VertexCollection::~VertexCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.VertexCollection)
    SharedDtor();
}

void VertexCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void VertexCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VertexCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VertexCollection& VertexCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

VertexCollection* VertexCollection::New(::google::protobuf::Arena* arena) const {
    VertexCollection* n = new VertexCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void VertexCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.VertexCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool VertexCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.VertexCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Vertex entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.VertexCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.VertexCollection)
    return false;
#undef DO_
}

void VertexCollection::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.VertexCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.Vertex entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.VertexCollection)
}

::google::protobuf::uint8* VertexCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.VertexCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.Vertex entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.VertexCollection)
    return target;
}

size_t VertexCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.VertexCollection)
    size_t total_size = 0;

    // repeated .eicio.model.Vertex entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void VertexCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.VertexCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const VertexCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const VertexCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.VertexCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.VertexCollection)
        MergeFrom(*source);
    }
}

void VertexCollection::MergeFrom(const VertexCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.VertexCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void VertexCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.VertexCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void VertexCollection::CopyFrom(const VertexCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.VertexCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool VertexCollection::IsInitialized() const { return true; }

void VertexCollection::Swap(VertexCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void VertexCollection::InternalSwap(VertexCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VertexCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VertexCollection

// uint32 id = 1;
void VertexCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 VertexCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.VertexCollection.id)
    return id_;
}
void VertexCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.VertexCollection.id)
}

// uint32 flags = 2;
void VertexCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 VertexCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.VertexCollection.flags)
    return flags_;
}
void VertexCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.VertexCollection.flags)
}

// .eicio.model.Params params = 3;
bool VertexCollection::has_params() const { return this != internal_default_instance() && params_ != NULL; }
void VertexCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& VertexCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.VertexCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* VertexCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.VertexCollection.params)
    return params_;
}
::eicio::model::Params* VertexCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.VertexCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void VertexCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.VertexCollection.params)
}

// repeated .eicio.model.Vertex entries = 4;
int VertexCollection::entries_size() const { return entries_.size(); }
void VertexCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::Vertex& VertexCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.VertexCollection.entries)
    return entries_.Get(index);
}
::eicio::model::Vertex* VertexCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.VertexCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::Vertex* VertexCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.VertexCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Vertex>* VertexCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.VertexCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Vertex>& VertexCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.VertexCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Relation::kIdFieldNumber;
const int Relation::kFromFieldNumber;
const int Relation::kToFieldNumber;
const int Relation::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Relation::Relation() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.Relation)
}
Relation::Relation(const Relation& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_from()) {
        from_ = new ::eicio::model::Reference(*from.from_);
    } else {
        from_ = NULL;
    }
    if (from.has_to()) {
        to_ = new ::eicio::model::Reference(*from.to_);
    } else {
        to_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&weight_) - reinterpret_cast<char*>(&id_) + sizeof(weight_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.Relation)
}

void Relation::SharedCtor() {
    ::memset(&from_, 0,
             reinterpret_cast<char*>(&weight_) - reinterpret_cast<char*>(&from_) + sizeof(weight_));
    _cached_size_ = 0;
}

Relation::~Relation() {
    // @@protoc_insertion_point(destructor:eicio.model.Relation)
    SharedDtor();
}

void Relation::SharedDtor() {
    if (this != internal_default_instance()) {
        delete from_;
    }
    if (this != internal_default_instance()) {
        delete to_;
    }
}

void Relation::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Relation& Relation::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

Relation* Relation::New(::google::protobuf::Arena* arena) const {
    Relation* n = new Relation;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Relation::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.Relation)
    if (GetArenaNoVirtual() == NULL && from_ != NULL) {
        delete from_;
    }
    from_ = NULL;
    if (GetArenaNoVirtual() == NULL && to_ != NULL) {
        delete to_;
    }
    to_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&weight_) - reinterpret_cast<char*>(&id_) + sizeof(weight_));
}

bool Relation::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.Relation)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Reference from = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(18u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_from()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Reference to = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_to()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // float weight = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(37u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(input, &weight_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.Relation)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.Relation)
    return false;
#undef DO_
}

void Relation::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.Relation)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // .eicio.model.Reference from = 2;
    if (this->has_from()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *this->from_, output);
    }

    // .eicio.model.Reference to = 3;
    if (this->has_to()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->to_, output);
    }

    // float weight = 4;
    if (this->weight() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->weight(), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.Relation)
}

::google::protobuf::uint8* Relation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.Relation)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // .eicio.model.Reference from = 2;
    if (this->has_from()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            2, *this->from_, deterministic, target);
    }

    // .eicio.model.Reference to = 3;
    if (this->has_to()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->to_, deterministic, target);
    }

    // float weight = 4;
    if (this->weight() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->weight(), target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.Relation)
    return target;
}

size_t Relation::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.Relation)
    size_t total_size = 0;

    // .eicio.model.Reference from = 2;
    if (this->has_from()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->from_);
    }

    // .eicio.model.Reference to = 3;
    if (this->has_to()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->to_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // float weight = 4;
    if (this->weight() != 0) {
        total_size += 1 + 4;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Relation::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.Relation)
    GOOGLE_DCHECK_NE(&from, this);
    const Relation* source = ::google::protobuf::internal::DynamicCastToGenerated<const Relation>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.Relation)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.Relation)
        MergeFrom(*source);
    }
}

void Relation::MergeFrom(const Relation& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.Relation)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.has_from()) {
        mutable_from()->::eicio::model::Reference::MergeFrom(from.from());
    }
    if (from.has_to()) {
        mutable_to()->::eicio::model::Reference::MergeFrom(from.to());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.weight() != 0) {
        set_weight(from.weight());
    }
}

void Relation::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.Relation)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.Relation)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Relation::IsInitialized() const { return true; }

void Relation::Swap(Relation* other) {
    if (other == this) return;
    InternalSwap(other);
}
void Relation::InternalSwap(Relation* other) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Relation::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Relation

// uint32 id = 1;
void Relation::clear_id() { id_ = 0u; }
::google::protobuf::uint32 Relation::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.Relation.id)
    return id_;
}
void Relation::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Relation.id)
}

// .eicio.model.Reference from = 2;
bool Relation::has_from() const { return this != internal_default_instance() && from_ != NULL; }
void Relation::clear_from() {
    if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
    from_ = NULL;
}
const ::eicio::model::Reference& Relation::from() const {
    // @@protoc_insertion_point(field_get:eicio.model.Relation.from)
    return from_ != NULL ? *from_ : *::eicio::model::Reference::internal_default_instance();
}
::eicio::model::Reference* Relation::mutable_from() {
    if (from_ == NULL) {
        from_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.Relation.from)
    return from_;
}
::eicio::model::Reference* Relation::release_from() {
    // @@protoc_insertion_point(field_release:eicio.model.Relation.from)

    ::eicio::model::Reference* temp = from_;
    from_ = NULL;
    return temp;
}
void Relation::set_allocated_from(::eicio::model::Reference* from) {
    delete from_;
    from_ = from;
    if (from) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.Relation.from)
}

// .eicio.model.Reference to = 3;
bool Relation::has_to() const { return this != internal_default_instance() && to_ != NULL; }
void Relation::clear_to() {
    if (GetArenaNoVirtual() == NULL && to_ != NULL) delete to_;
    to_ = NULL;
}
const ::eicio::model::Reference& Relation::to() const {
    // @@protoc_insertion_point(field_get:eicio.model.Relation.to)
    return to_ != NULL ? *to_ : *::eicio::model::Reference::internal_default_instance();
}
::eicio::model::Reference* Relation::mutable_to() {
    if (to_ == NULL) {
        to_ = new ::eicio::model::Reference;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.Relation.to)
    return to_;
}
::eicio::model::Reference* Relation::release_to() {
    // @@protoc_insertion_point(field_release:eicio.model.Relation.to)

    ::eicio::model::Reference* temp = to_;
    to_ = NULL;
    return temp;
}
void Relation::set_allocated_to(::eicio::model::Reference* to) {
    delete to_;
    to_ = to;
    if (to) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.Relation.to)
}

// float weight = 4;
void Relation::clear_weight() { weight_ = 0; }
float Relation::weight() const {
    // @@protoc_insertion_point(field_get:eicio.model.Relation.weight)
    return weight_;
}
void Relation::set_weight(float value) {
    weight_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.Relation.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelationCollection::kIdFieldNumber;
const int RelationCollection::kFlagsFieldNumber;
const int RelationCollection::kParamsFieldNumber;
const int RelationCollection::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelationCollection::RelationCollection() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_eicio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:eicio.model.RelationCollection)
}
RelationCollection::RelationCollection(const RelationCollection& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), entries_(from.entries_), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_params()) {
        params_ = new ::eicio::model::Params(*from.params_);
    } else {
        params_ = NULL;
    }
    ::memcpy(&id_, &from.id_,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
    // @@protoc_insertion_point(copy_constructor:eicio.model.RelationCollection)
}

void RelationCollection::SharedCtor() {
    ::memset(&params_, 0,
             reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&params_) + sizeof(flags_));
    _cached_size_ = 0;
}

RelationCollection::~RelationCollection() {
    // @@protoc_insertion_point(destructor:eicio.model.RelationCollection)
    SharedDtor();
}

void RelationCollection::SharedDtor() {
    if (this != internal_default_instance()) {
        delete params_;
    }
}

void RelationCollection::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationCollection::descriptor() {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelationCollection& RelationCollection::default_instance() {
    protobuf_eicio_2eproto::InitDefaults();
    return *internal_default_instance();
}

RelationCollection* RelationCollection::New(::google::protobuf::Arena* arena) const {
    RelationCollection* n = new RelationCollection;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void RelationCollection::Clear() {
    // @@protoc_insertion_point(message_clear_start:eicio.model.RelationCollection)
    entries_.Clear();
    if (GetArenaNoVirtual() == NULL && params_ != NULL) {
        delete params_;
    }
    params_ = NULL;
    ::memset(&id_, 0, reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(&id_) + sizeof(flags_));
}

bool RelationCollection::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:eicio.model.RelationCollection)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 id = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 flags = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &flags_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // .eicio.model.Params params = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           mutable_params()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .eicio.model.Relation entries = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(34u)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input,
                                                                                           add_entries()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:eicio.model.RelationCollection)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:eicio.model.RelationCollection)
    return false;
#undef DO_
}

void RelationCollection::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:eicio.model.RelationCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *this->params_, output);
    }

    // repeated .eicio.model.Relation entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, this->entries(i), output);
    }

    // @@protoc_insertion_point(serialize_end:eicio.model.RelationCollection)
}

::google::protobuf::uint8* RelationCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:eicio.model.RelationCollection)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 id = 1;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            3, *this->params_, deterministic, target);
    }

    // repeated .eicio.model.Relation entries = 4;
    for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            4, this->entries(i), deterministic, target);
    }

    // @@protoc_insertion_point(serialize_to_array_end:eicio.model.RelationCollection)
    return target;
}

size_t RelationCollection::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:eicio.model.RelationCollection)
    size_t total_size = 0;

    // repeated .eicio.model.Relation entries = 4;
    {
        unsigned int count = this->entries_size();
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->entries(i));
        }
    }

    // .eicio.model.Params params = 3;
    if (this->has_params()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
    }

    // uint32 id = 1;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 flags = 2;
    if (this->flags() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->flags());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void RelationCollection::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:eicio.model.RelationCollection)
    GOOGLE_DCHECK_NE(&from, this);
    const RelationCollection* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const RelationCollection>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.model.RelationCollection)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.model.RelationCollection)
        MergeFrom(*source);
    }
}

void RelationCollection::MergeFrom(const RelationCollection& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:eicio.model.RelationCollection)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.has_params()) {
        mutable_params()->::eicio::model::Params::MergeFrom(from.params());
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.flags() != 0) {
        set_flags(from.flags());
    }
}

void RelationCollection::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:eicio.model.RelationCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void RelationCollection::CopyFrom(const RelationCollection& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:eicio.model.RelationCollection)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool RelationCollection::IsInitialized() const { return true; }

void RelationCollection::Swap(RelationCollection* other) {
    if (other == this) return;
    InternalSwap(other);
}
void RelationCollection::InternalSwap(RelationCollection* other) {
    entries_.InternalSwap(&other->entries_);
    std::swap(params_, other->params_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelationCollection::GetMetadata() const {
    protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelationCollection

// uint32 id = 1;
void RelationCollection::clear_id() { id_ = 0u; }
::google::protobuf::uint32 RelationCollection::id() const {
    // @@protoc_insertion_point(field_get:eicio.model.RelationCollection.id)
    return id_;
}
void RelationCollection::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RelationCollection.id)
}

// uint32 flags = 2;
void RelationCollection::clear_flags() { flags_ = 0u; }
::google::protobuf::uint32 RelationCollection::flags() const {
    // @@protoc_insertion_point(field_get:eicio.model.RelationCollection.flags)
    return flags_;
}
void RelationCollection::set_flags(::google::protobuf::uint32 value) {
    flags_ = value;
    // @@protoc_insertion_point(field_set:eicio.model.RelationCollection.flags)
}

// .eicio.model.Params params = 3;
bool RelationCollection::has_params() const { return this != internal_default_instance() && params_ != NULL; }
void RelationCollection::clear_params() {
    if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
    params_ = NULL;
}
const ::eicio::model::Params& RelationCollection::params() const {
    // @@protoc_insertion_point(field_get:eicio.model.RelationCollection.params)
    return params_ != NULL ? *params_ : *::eicio::model::Params::internal_default_instance();
}
::eicio::model::Params* RelationCollection::mutable_params() {
    if (params_ == NULL) {
        params_ = new ::eicio::model::Params;
    }
    // @@protoc_insertion_point(field_mutable:eicio.model.RelationCollection.params)
    return params_;
}
::eicio::model::Params* RelationCollection::release_params() {
    // @@protoc_insertion_point(field_release:eicio.model.RelationCollection.params)

    ::eicio::model::Params* temp = params_;
    params_ = NULL;
    return temp;
}
void RelationCollection::set_allocated_params(::eicio::model::Params* params) {
    delete params_;
    params_ = params;
    if (params) {
    } else {
    }
    // @@protoc_insertion_point(field_set_allocated:eicio.model.RelationCollection.params)
}

// repeated .eicio.model.Relation entries = 4;
int RelationCollection::entries_size() const { return entries_.size(); }
void RelationCollection::clear_entries() { entries_.Clear(); }
const ::eicio::model::Relation& RelationCollection::entries(int index) const {
    // @@protoc_insertion_point(field_get:eicio.model.RelationCollection.entries)
    return entries_.Get(index);
}
::eicio::model::Relation* RelationCollection::mutable_entries(int index) {
    // @@protoc_insertion_point(field_mutable:eicio.model.RelationCollection.entries)
    return entries_.Mutable(index);
}
::eicio::model::Relation* RelationCollection::add_entries() {
    // @@protoc_insertion_point(field_add:eicio.model.RelationCollection.entries)
    return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::model::Relation>* RelationCollection::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_list:eicio.model.RelationCollection.entries)
    return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::model::Relation>& RelationCollection::entries() const {
    // @@protoc_insertion_point(field_list:eicio.model.RelationCollection.entries)
    return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace eicio

// @@protoc_insertion_point(global_scope)
